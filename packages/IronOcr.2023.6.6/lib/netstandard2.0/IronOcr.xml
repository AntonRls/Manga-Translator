<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>IronOcr</name>
    </assembly>
    <members>
        <member name="T:IronOcr.Installation">
            <summary>
            A static class providing everything needed to configure the installation and licensing of IronOCR
            </summary>
        </member>
        <member name="P:IronOcr.Installation.InstallationPath">
            <summary>
            IronOcr installation path
            </summary>
        </member>
        <member name="P:IronOcr.Installation.LanguagePackDirectory">
            <summary>
            Custom language pack directory which contains .ocrdata language pack files
            </summary>
        </member>
        <member name="P:IronOcr.Installation.MachineLearningModelsDirectory">
            <summary>
            Directory containing machine learning files for computer vision features
            </summary>
        </member>
        <member name="P:IronOcr.Installation.LinuxAndDockerDependenciesAutoConfig">
            <summary>
            If <c>true</c> The necessary package dependencies for IronOCR rendering will we automatically installed to
            Docker and Debian / Ubuntu Linux deployments. <para>Applies only to IronOCR for .Net Core.</para><para>This
            will take a few minutes the next time you run IronOCR. Watch the Visual Studio "Output" window for
            progress.</para><para>Set this to false if manual Docker / Linux setup is more convenient:
            https://ironsoftware.com/csharp/ocr/docs/questions/csharp-tesseract-ocr-docker-linux-setup-tutorial/</para></summary>
            <seealso cref="P:IronSoftware.Deployment.DeploymentEngine.SkipInstallCommands" />
        </member>
        <member name="M:IronOcr.Installation.IsValidLicense(System.String)">
            <summary>
            Checks if a given license key is valid for use with IronOCR.
            </summary>
            <param name="LicenseKey">Full License Key provided as a string.</param>
            <returns>True when a valid key is given.</returns>
        </member>
        <member name="P:IronOcr.Installation.LicenseKey">
            <summary>
            Removes watermarks. Get Licensed at https://ironsoftware.com/
            </summary>
        </member>
        <member name="P:IronOcr.Installation.IsLicensed">
            <summary>
            Determines whether this instance of IronOcr is Licensed.
            Will return false unless a LicenseKey is set to a valid trial or full license key in
            IronOcr.Installation.LicenseKey, Web.Config , App.Config or appsettings.json in .Net Core.
            </summary>
        </member>
        <member name="T:IronOcr.Installation.LoggingModes">
            <summary>
            Logging modes. You may use any combination of these flags to enable logging.
            </summary>
            <seealso cref="P:IronOcr.Installation.LoggingMode" />
        </member>
        <member name="F:IronOcr.Installation.LoggingModes.None">
            <summary>
            Disable logging
            </summary>
        </member>
        <member name="F:IronOcr.Installation.LoggingModes.DebugOutputWindow">
            <summary>
            Enable logging to the debug output window
            </summary>
        </member>
        <member name="F:IronOcr.Installation.LoggingModes.Console">
            <summary>
            Enable logging to the console
            </summary>
        </member>
        <member name="F:IronOcr.Installation.LoggingModes.Custom">
            <summary>
            Enable custom logging
            </summary>
            <seealso cref="P:IronOcr.Installation.CustomLogger" />
        </member>
        <member name="F:IronOcr.Installation.LoggingModes.File">
            <summary>
            Enable logging to the debug output window
            </summary>
            <seealso cref="P:IronOcr.Installation.LogFilePath" />
        </member>
        <member name="F:IronOcr.Installation.LoggingModes.All">
            <summary>
            Enable logging to the debug output window
            </summary>
        </member>
        <member name="P:IronOcr.Installation.LogFilePath">
            <summary>
            Setting a log path produces ‘log files’ which may be vey useful for debugging in production or providing to Iron Software support when reporting an issue.
            <para>LogFilePath may be set to a directory name or a full file name.</para><para>Setting <c>LogFilePath = null</c> will turn off log files.</para></summary>
            <seealso cref="M:IronOcr.Installation.ClearLogFiles" />
        </member>
        <member name="M:IronOcr.Installation.ClearLogFiles">
            <summary>
            Removes any Iron Software log files at the <see cref="P:IronOcr.Installation.LogFilePath" />.
            </summary>
            <seealso cref="P:IronOcr.Installation.LogFilePath" />
        </member>
        <member name="P:IronOcr.Installation.LoggingMode">
            <summary>
            Activate or disable detailed developer messages sent to your choice of location in the IDE or application console. 
            </summary>
        </member>
        <member name="P:IronOcr.Installation.CustomLogger">
            <summary>
            Custom logger implementation
            </summary>
        </member>
        <member name="T:IronOcr.TesseractPageSegmentationMode">
            <summary>
            Page segmentation mode defines how your text will be searched for by Tesseract.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.OsdOnly">
            <summary>
            Orientation and script detection (OSD) only.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.AutoOsd">
            <summary>
            Automatic page segmentation with orientation and script detection (OSD).
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.AutoOnly">
            <summary>
            Automatic page segmentation, but no OSD, or OCR.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.Auto">
            <summary>
            Fully automatic page segmentation, but no OSD.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SingleColumn">
            <summary>
            Assume a single column of text of variable sizes.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SingleBlockVertText">
            <summary>
            Assume a single uniform block of vertically aligned text.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SingleBlock">
            <summary>
            Assume a single uniform block of text.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SingleLine">
            <summary>
            Treat the image as a single text line.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SingleWord">
            <summary>
            Treat the image as a single word.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.CircleWord">
            <summary>
            Treat the image as a single word in a circle.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SingleChar">
            <summary>
            Treat the image as a single character.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SparseText">
            <summary>
            Find as much text as possible in no particular order.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.SparseTextOsd">
            <summary>
            Sparse text with orientation and script detection.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractPageSegmentationMode.RawLine">
            <summary>
            Treat the image as a single text line, bypassing hacks that are
            specific to Tesseract.
            </summary>
        </member>
        <member name="T:IronOcr.ResultHighlightType">
            <summary>
            ResultHighlightType defines what highlighting mode to use for <see cref="M:IronOcr.OcrInput.HighlightTextAndSaveAsImages(IronOcr.IronTesseract,System.String,IronOcr.ResultHighlightType)" />.
            You may choose to highlight every character, word, line, or paragraph.
            </summary>
        </member>
        <member name="F:IronOcr.ResultHighlightType.Character">
            <summary>
            Highlight every single detected <see cref="T:IronOcr.OcrResult.Character" />.
            </summary>
        </member>
        <member name="F:IronOcr.ResultHighlightType.Word">
            <summary>
            Highlight every single detected <see cref="T:IronOcr.OcrResult.Word" />.
            </summary>
        </member>
        <member name="F:IronOcr.ResultHighlightType.Line">
            <summary>
            Highlight every single detected <see cref="T:IronOcr.OcrResult.Line" />.
            </summary>
        </member>
        <member name="F:IronOcr.ResultHighlightType.Paragraph">
            <summary>
            Highlight every single detected <see cref="T:IronOcr.OcrResult.Paragraph" />.
            </summary>
        </member>
        <member name="T:IronOcr.TesseractEngineMode">
            <summary>
            Allows the developer to choose the algorithm Tesseract will use for OCR.  TesseractAndLstm is the recommended behavior for IronOCR.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractEngineMode.TesseractOnly">
            <summary>
            Only the legacy tesseract OCR engine is used.  (Tesseract 3 OEM Mode)
            </summary>
        </member>
        <member name="F:IronOcr.TesseractEngineMode.LstmOnly">
            <summary>
            Only the new LSTM-based OCR engine is used.  Uses a pre programmed neural net. (Tesseract 4 + 5  Mode)
            </summary>
        </member>
        <member name="F:IronOcr.TesseractEngineMode.TesseractAndLstm">
            <summary>
            Both the legacy and new LSTM based OCR engine is used.  (Recommended for a  good balance of speed and performance)
            </summary>
        </member>
        <member name="F:IronOcr.TesseractEngineMode.Default">
            <summary>
            The default OCR engine is used (currently LSTM-based OCR engine).
            </summary>
        </member>
        <member name="T:IronOcr.TesseractVersion">
            <summary>
            Selects between different binary versions of Tesseract.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractVersion.Tesseract5">
            <summary>
            Tesseract 5.1
            </summary>
        </member>
        <member name="T:IronOcr.Events.OcrProgressEventsArgs">
            <summary>
            An event allowing developers to track and display progress of longer OCR jobs.
            <para>Use the <see cref="E:IronOcr.IronTesseract.OcrProgress" /> event to receive detailed notifications of
            ocr job progress.</para></summary>
            <seealso cref="E:IronOcr.IronTesseract.OcrProgress" />
        </member>
        <member name="P:IronOcr.Events.OcrProgressEventsArgs.ProgressPercent">
            <summary>
            OCR job progress as a percentage of pages completed. Values range from  0 to 100.
            </summary>
        </member>
        <member name="P:IronOcr.Events.OcrProgressEventsArgs.TotalPages">
            <summary>
            The total number of pages being OCR 'read' by <see cref="M:IronOcr.IronTesseract.Read(IronOcr.OcrInput)" /> method class.
            </summary>
        </member>
        <member name="P:IronOcr.Events.OcrProgressEventsArgs.PagesComplete">
            <summary>
            The number of pages where OCR 'reading' has been fully completed.  They are normally processed in parallel across multiple CPU cores.
            </summary>
        </member>
        <member name="P:IronOcr.Events.OcrProgressEventsArgs.Duration">
            <summary>
            The time taken for the entire OCR job.  The counter stops when OCR is complete on every page.
            </summary>
        </member>
        <member name="P:IronOcr.Events.OcrProgressEventsArgs.StartTimeUTC">
            <summary>
            The DateTime at which the <see cref="M:IronOcr.IronTesseract.Read(IronOcr.OcrInput)" /> OCR job started in UTC format.
            </summary>
        </member>
        <member name="P:IronOcr.Events.OcrProgressEventsArgs.EndTimeUTC">
            <summary>
            The DateTime at which the <see cref="M:IronOcr.IronTesseract.Read(IronOcr.OcrInput)" /> OCR job was 100% completed in UTC format.
            <para>null while OCR is still in progress</para></summary>
        </member>
        <member name="T:IronOcr.Exceptions.LanguagePackException">
            <summary>
            Indicates an issue regarding language packs, such as a missing language pack
            </summary>
        </member>
        <member name="T:IronOcr.Exceptions.NamespaceDoc">
            <summary>
            Exceptions thrown from IronOCR.  For documentation and support please visit:  https://ironsoftware.com/csharp/ocr/ 
            </summary>
        </member>
        <member name="T:IronOcr.Exceptions.IronOcrNativeException">
            <summary>
            Represents errors that occur in IronOCR native code
            </summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrNativeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrNativeException" /> class.
            </summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrNativeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrNativeException" /> class with a
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrNativeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrNativeException" /> class with a
            specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:IronOcr.Exceptions.IronOcrLicensingException">
            <summary>
             Represents errors that occur during IronOCR execution due to the library not being appropriately licensed.
            <para>https://ironsoftware.com/csharp/ocr/licensing/</para></summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrLicensingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrLicensingException" /> class.
            </summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrLicensingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrLicensingException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrLicensingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrLicensingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IronOcr.Exceptions.IronOcrProductException">
            <summary>
            Represents errors that occur during IronOCR execution.
            </summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrProductException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrProductException" /> class.
            </summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrProductException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrProductException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrProductException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrProductException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IronOcr.Exceptions.IronOcrDictionaryException">
            <summary>
            Represents errors that occur relating to IronOCR language files.
            </summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrDictionaryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrDictionaryException" /> class.
            </summary>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrDictionaryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrDictionaryException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:IronOcr.Exceptions.IronOcrDictionaryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IronOcr.Exceptions.IronOcrDictionaryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IronOcr.Exceptions.IronOcrAssemblyVersionMismatchException">
            <summary>
            Represents errors that occur while loading assemblies during IronOcr deployment.
            </summary>
        </member>
        <member name="P:IronOcr.Exceptions.IronOcrAssemblyVersionMismatchException.Message">
            <summary>
            The message that describes the error.
            </summary>
        </member>
        <member name="T:IronOcr.IronTesseract">
            <summary>
             IronTesseract is a comprehensive managed class for performing Tesseract OCR in .Net applications.
             <para>IronTesseract natively supports Tesseract 3, 4 and 5 engines, and will automatically install all required binaries and language packs (tessdata) files.</para></summary>
        </member>
        <member name="M:IronOcr.IronTesseract.ReadAsync(IronOcr.OcrInput,System.Int32)">
            <summary>
            Reads text from an <see cref="T:IronOcr.OcrInput" /> object and returns an <see cref="T:IronOcr.OcrResult" /> object.
            <para><see cref="T:IronOcr.OcrInput" /> is the preferred input type because it allows for OCR of multi-paged documents, and allows images to be enhanced before OCR to obtain faster, more accurate results.</para><para>There are also other overloads of this method that allow for Images and PDFs to be read directly as  File paths and Bitmaps. </para></summary>
            <param name="Input">An <see cref="T:IronOcr.OcrInput" /> document which can contain one or more images and PDFs</param>
            <param name="TimeoutMs">Optional timeout in milliseconds, after which the Ocr read will be cancelled. Not supported in .NET 4.0</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains
            an <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="M:IronOcr.IronTesseract.ReadAsync(System.String,IronSoftware.Drawing.CropRectangle,System.Int32)">
            <summary>
            Reads text from an Image file and returns an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <param name="ImagePath">Path to an image file.</param>
            <param name="ContentArea">Specifies a region within the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
            <param name="TimeoutMs">Optional timeout in milliseconds, after which the Ocr read will be cancelled. Not supported in .NET 4.0</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains
            an <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="M:IronOcr.IronTesseract.ReadAsync(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle,System.Int32)">
            <summary>
            Reads text from an <see cref="T:IronSoftware.Drawing.AnyBitmap" /> object and returns an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <param name="Image">An <see cref="T:IronSoftware.Drawing.AnyBitmap" /> object</param>
            <param name="ContentArea">Specifies a region within the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
            <param name="TimeoutMs">Optional timeout in milliseconds, after which the Ocr read will be cancelled. Not supported in .NET 4.0</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains
            an <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="P:IronOcr.IronTesseract.MultiThreaded">
            <summary>
            Read multiple PDF pages and images simultaneously on different threads
            </summary>
        </member>
        <member name="M:IronOcr.IronTesseract.#ctor">
            <summary>
            Public constructor.  Creates a default instance of IronTesseract
            </summary>
        </member>
        <member name="M:IronOcr.IronTesseract.#ctor(IronOcr.TesseractConfiguration)">
            <summary>
            Public constructor.  Creates an instance of IronTesseract with a customized <see cref="T:IronOcr.TesseractConfiguration" />.
            <para>This allows advanced developers to fine tune Tesseract behavior.</para></summary>
        </member>
        <member name="M:IronOcr.IronTesseract.Read(IronOcr.OcrInput)">
            <summary>
             Reads text from an <see cref="T:IronOcr.OcrInput" /> object and returns an <see cref="T:IronOcr.OcrResult" /> object.
            <para><see cref="T:IronOcr.OcrInput" /> is the preferred input type because it allows for OCR of multi-paged documents, and allows images to be enhanced before OCR to obtain faster, more accurate results.</para><para>There are also other overloads of this method that allow for Images and PDFs to be read directly as  File paths and Bitmaps. </para></summary>
            <param name="Input">An <see cref="T:IronOcr.OcrInput" /> document which can contain one or more images and PDFs</param>
            <returns>A <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="M:IronOcr.IronTesseract.Read(System.String)">
            <summary>
            Reads text from an Image file and returns an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <param name="ImagePath">Path to an image file.</param>
            <returns>A <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="M:IronOcr.IronTesseract.Read(System.String,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Reads text from a region of an Image file and returns an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <param name="ImagePath">Path to an image file.</param>
            <param name="ContentArea">Specifies a region within the  image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
            <returns>A <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="M:IronOcr.IronTesseract.Read(IronSoftware.Drawing.AnyBitmap)">
            <summary>
            Reads text from a IronSoftware.Drawing.AnyBitmap Image file and returns an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <param name="Image">An <see cref="T:IronSoftware.Drawing.AnyBitmap" />, SixLabor.ImageSharp.Image, SkiaSharp.SKBitmap, SkiaSharp.SKImage, Microsoft.Maui.Graphics.Platform.PlatformImage, System.Drawing.Bitmap, or System.Drawing.Image</param>
            <returns>A <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="M:IronOcr.IronTesseract.Read(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Reads text from a region of a IronSoftware.Drawing.AnyBitmap Image file and returns an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <param name="Image">An <see cref="T:IronSoftware.Drawing.AnyBitmap" />, SixLabor.ImageSharp.Image, SkiaSharp.SKBitmap, SkiaSharp.SKImage, Microsoft.Maui.Graphics.Platform.PlatformImage, System.Drawing.Bitmap, or System.Drawing.Image</param>
            <param name="ContentArea">Specifies a region within the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
            <returns>A <see cref="T:IronOcr.OcrResult" /> object containing text,  and detailed, structured information about the extracted text content.</returns>
        </member>
        <member name="M:IronOcr.IronTesseract.ReadPdfAndOverlayText(System.String,System.String,System.String)">
            <summary>
            This will take a PDF document and overlay text read by tesseract on top of the pages. This will preserve bookmarks from the original document.
            </summary>
            <param name="pdfFilePath">Path to the PDF that needs selectable text overlay-ed on it.</param>
            <param name="password">Password of the input PDF if there is one.</param>
            <param name="ownerPassword">Owner password of the input PDF if there is one.</param>
            <returns>Returns the new PDF as a byte[]. To save in one step use <see cref="M:IronOcr.IronTesseract.ReadPdfAndOverlayText(System.String,System.String,System.String)" />.</returns>
            <seealso cref="M:IronOcr.IronTesseract.ReadPdfAndOverlayText(System.String,System.String,System.String)" />
        </member>
        <member name="M:IronOcr.IronTesseract.ReadPdfAndOverlayText(System.Byte[],System.String,System.String)">
            <summary>
            This will take a PDF document and overlay text read by tesseract on top of the pages. This will preserve bookmarks from the original document.
            </summary>
            <param name="pdf">PDF to read and overlay text on as bytes.</param>
            <param name="password">Password of the input PDF if there is one.</param>
            <param name="ownerPassword">Owner password of the input PDF if there is one.</param>
            <returns>Returns the new PDF as a byte[]. To save in one step use <see cref="M:IronOcr.IronTesseract.ReadPdfAndOverlayText(System.Byte[],System.String,System.String)" />.</returns>
            <seealso cref="M:IronOcr.IronTesseract.ReadPdfAndOverlayText(System.Byte[],System.String,System.String)" />
        </member>
        <member name="M:IronOcr.IronTesseract.ReadPdfAndOverlayTextSaveAs(System.String,System.String,System.String,System.String)">
            <summary>
            This will take a PDF document and overlay text read by tesseract on top of the pages. This will preserve bookmarks from the original document.
            </summary>
            <param name="pdfFilePath">Path to the PDF that needs selectable text overlay-ed on it.</param>
            <param name="pdfSavePath">Path to save the new PDF.</param>
            <param name="password">Password of the input PDF if there is one.</param>
            <param name="ownerPassword">Owner password of the input PDF if there is one.</param>
        </member>
        <member name="M:IronOcr.IronTesseract.ReadPdfAndOverlayTextSaveAs(System.Byte[],System.String,System.String,System.String)">
            <summary>
            This will take a PDF document and overlay text read by tesseract on top of the pages. This will preserve bookmarks from the original document.
            </summary>
            <param name="pdf">PDF to read and overlay text on as bytes.</param>
            <param name="pdfSavePath">Path to save the new PDF.</param>
            <param name="password">Password of the input PDF if there is one.</param>
            <param name="ownerPassword">Owner password of the input PDF if there is one.</param>
        </member>
        <member name="F:IronOcr.IronTesseract.Configuration">
            <summary>
            An instance of <see cref="T:IronOcr.TesseractConfiguration" /> which allows fine-grained control of the underlying Tesseract OCR Engine.
            <para>Options include: Language file detail level.  Page Segmentation Mode and access to the entire API of tesseract settings variables.</para></summary>
        </member>
        <member name="P:IronOcr.IronTesseract.Language">
            <summary>
             The Natural Language of the documents Which <see cref="T:IronOcr.IronTesseract" /> will read.
             <para> Default is English. Additional languages can be installed easily using Nuget https://www.nuget.org/packages?q=IronOcr.Languages or downloaded from  https://ironsoftware.com/csharp/ocr/languages/</para><para>We may use multiple languages packs simultaneously with the UseMultipleLanguages method.</para><para>We can use custom Tesseract .tessdata language packs with the <see cref="M:IronOcr.IronTesseract.UseCustomTesseractLanguageFile(System.String)" /> method.</para></summary>
            <seealso cref="T:IronOcr.OcrLanguage" />
        </member>
        <member name="M:IronOcr.IronTesseract.UseCustomTesseractLanguageFile(System.String)">
            <summary>
            IronTesseract will use  a tesseract .traineddata language file as its only OCR language.
            <para>https://github.com/tesseract-ocr/tessdata</para></summary>
            <param name="TrainedDataPath">File path to a .traineddata file. These can be downloaded from https://github.com/tesseract-ocr/tessdata or generated using Tesseract command line.</param>
        </member>
        <member name="M:IronOcr.IronTesseract.AddSecondaryLanguage(IronOcr.OcrLanguage)">
            <summary>
             IronTesseract will use  multiple tesseract language files simultaneously.  MultilingualOCR.
              <para>Any number of secondary languages may be added.  Speed and performance may be affected.</para></summary>
            <param name="SecondaryLanguage">An additional <see cref="T:IronOcr.OcrLanguage" /></param>
        </member>
        <member name="M:IronOcr.IronTesseract.AddSecondaryLanguage(System.String)">
            <summary>
             IronTesseract will use  multiple tesseract language files simultaneously.  MultilingualOCR using a custom .traineddata tesseract 3,4 or 5 language file.
             <para>Any number of secondary languages may be added.  Speed and performance may be affected.</para></summary>
            <param name="CustomLanguagePath">File path to a .traineddata tesseract language pack.</param>
        </member>
        <member name="M:IronOcr.IronTesseract.ClearSecondaryLanguages">
            <summary>
            Removes all languages add by <see cref="M:IronOcr.IronTesseract.AddSecondaryLanguage(IronOcr.OcrLanguage)" /> or <see cref="M:IronOcr.IronTesseract.AddSecondaryLanguage(System.String)" /></summary>
        </member>
        <member name="M:IronOcr.IronTesseract.PdfiumApi.OverlayTextOnOriginalPdf(System.Byte[],System.Byte[],System.String,System.String)">
            <summary>
            Overlays a text-only PDF generated by Tesseract on top of the original, thus making a Searchable PDF.
            </summary>
        </member>
        <member name="E:IronOcr.IronTesseract.OcrProgress">
            <summary>
            An Event which can be used to track OCR progress and inform users of OCR performance and progress.
            <para>Progress is reported via the <see cref="T:IronOcr.Events.OcrProgressEventsArgs" /> class </para></summary>
            <seealso cref="T:IronOcr.Events.OcrProgressEventsArgs" />
            <example>
                <code>myIronTesseract.OcrProgress += (object o, IronOcr.Events.OcrProgressEventsArgs e) =&gt;
                   {
                      Console.WriteLine(e.ProgressPercent + "%   " + e.Duration.TotalSeconds+"s"  );
                   }</code>
            </example>
        </member>
        <member name="M:IronOcr.IronTesseract.TesseractPageFactory(DynamicTesseract.TesseractEngine,IronOcr.OcrInput.PixPlus)">
            <summary>
            Allows IronTesseract to read documents using multiple threads on multiple CPU cores. A significant performance improvement over traditional Tesseract.
            </summary>
        </member>
        <member name="T:IronOcr.NamespaceDoc">
            <summary>
                <para>IronOcr is an advanced Optical Character Recognition library for the .Net Framework.</para>
                <para> IronOcr provides advanced OCR by processing Images and PDF documents to test using an embedded Tesseract engine supporting Tesseract 3,4 and 5.</para>
                <para>To read an image to text - first add the image to an <see cref="T:IronOcr.OcrInput" /> document, and then convert it to plain text it with the <see cref="T:IronOcr.IronTesseract" /> class.</para>
                <para>Support for .Net 4.0 and above, .Net Standard 2.x and.Net Core 2, 3  &amp; 5 omn on Windows, Mac and Linux.  https://ironsoftware.com/csharp/ocr/</para>
            </summary>
        </member>
        <member name="T:IronOcr.TesseractConfiguration">
            <summary>
            A configuration object that fine-tunes Tesseract behavior at an Instance level.    Gives access to every option available to tesseract command line or C++ API users.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractConfiguration.RenderSearchablePdfsAndHocr">
            <summary>
            Prerenders searchable PDF documents and HOCR files during Tesseract read operations.  
            Required True to use <see cref="M:IronOcr.OcrResult.SaveAsHocrFile(System.String)" /> and  <see cref="M:IronOcr.OcrResult.SaveAsSearchablePdf(System.String)" /> methods.
            </summary>
        </member>
        <member name="M:IronOcr.TesseractConfiguration.Clone">
            <summary>
            Clone this See <see cref="T:IronOcr.TesseractConfiguration" /></summary>
            <returns>A copy of this <see cref="T:IronOcr.TesseractConfiguration" /> as an object.</returns>
        </member>
        <member name="F:IronOcr.TesseractConfiguration.TesseractVersion">
            <summary>
            IronOcr supports Tesseract 5.1
            </summary>
        </member>
        <member name="P:IronOcr.TesseractConfiguration.WhiteListCharacters">
            <summary>
            If set, only characters in this string will be read by IronTesseract.  Remember to include punctuation marks and space characters.
            <para>If know, WhiteListCharacters can dramatically increase performance and accuracy.</para><para>Also very useful if we expect only numbers or only letters.</para></summary>
        </member>
        <member name="P:IronOcr.TesseractConfiguration.BlackListCharacters">
            <summary>
            If set, any characters in this string will not be recognized by IronTesseract OCR.  An example use-case is to remove characters with accents.
             <para>BlackListCharacters and WhiteListCharacters can positively impact speed and accuracy if set thoughtfully.</para></summary>
            <seealso cref="P:IronOcr.TesseractConfiguration.WhiteListCharacters" />
        </member>
        <member name="F:IronOcr.TesseractConfiguration.PageSegmentationMode">
            <summary>
            Determines how a page is scanned to find potential blocks of text.  Best documented in Tesseract developer websites.
            <para><see cref="F:IronOcr.TesseractPageSegmentationMode.AutoOsd" /> is a safe default.</para></summary>
        </member>
        <member name="F:IronOcr.TesseractConfiguration.EngineMode">
            <summary>
            Allows the developer to choose the algorithm Tesseract will use for OCR.  TesseractAndLstm is the recommended behavior for IronOCR.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractConfiguration.ReadBarCodes">
            <summary>
            Optionally turns on Barcode reading alongside OCR.
            </summary>
        </member>
        <member name="F:IronOcr.TesseractConfiguration.TesseractVariables">
            <summary>
            Add Tesseract configuration variables of type bool, int, double or string.  Gives access to all Tesseract command-line and config file options.
            <para>
            To learn how to use this, Tesseract documentation is very sparse.  Please use <see cref="M:IronOcr.TesseractConfiguration.TrySaveAllTesseractVariablesToFile(System.String)" /> to output all available tesseract variables for your installation of Tesseract.
            </para><para>
            To learn more about how to use TesseractVariables see our guide at: https://ironsoftware.com/csharp/ocr/docs/questions/csharp-tesseract-config-configuration-variables/
            </para></summary>
        </member>
        <member name="M:IronOcr.TesseractConfiguration.TrySaveAllTesseractVariablesToFile(System.String)">
            <summary>
            Saves all Tesseract internal settings for this Configuration to a plain text file.
            </summary>
            <param name="Path">A valid file path.  Recommended file extension is .txt</param>
            <returns>True if file successfully saved</returns>
        </member>
        <member name="T:IronOcr.OcrLanguage">
            <summary>
             The natural language in which OCR documents will be read.
             <para>Any number of languages may be used simultaneously using the IronTessseract.AddSecondaryLanguage() Method.  </para><para>To use a custom Tesseract language file (.traineddata) please see the IronTessseract.UseCustomLanguageFile() Method</para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Afrikaans">
            <summary>
            Afrikaans  OCR language. Performs OCR, reading documents of the Afrikaans language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Afrikaans uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Afrikaans' from https://www.nuget.org/packages/IronOcr.Languages.Afrikaans/ to your Visual Studio project.<br />
            Alternatively download the "Afrikaans.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AfrikaansBest">
            <summary>
            Afrikaans  OCR language. Performs OCR, reading documents of the Afrikaans language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Afrikaans uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Afrikaans' from https://www.nuget.org/packages/IronOcr.Languages.Afrikaans/ to your Visual Studio project.<br />
            Alternatively download the "Afrikaans.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AfrikaansFast">
            <summary>
            Afrikaans  OCR language. Performs OCR, reading documents of the Afrikaans language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Afrikaans uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Afrikaans' from https://www.nuget.org/packages/IronOcr.Languages.Afrikaans/ to your Visual Studio project.<br />
            Alternatively download the "Afrikaans.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Amharic">
            <summary>
            Amharic  OCR language. Performs OCR, reading documents of the Amharic (አማርኛ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Amharic uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Amharic' from https://www.nuget.org/packages/IronOcr.Languages.Amharic/ to your Visual Studio project.<br />
            Alternatively download the "Amharic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AmharicBest">
            <summary>
            Amharic  OCR language. Performs OCR, reading documents of the Amharic (አማርኛ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Amharic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Amharic' from https://www.nuget.org/packages/IronOcr.Languages.Amharic/ to your Visual Studio project.<br />
            Alternatively download the "Amharic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AmharicFast">
            <summary>
            Amharic  OCR language. Performs OCR, reading documents of the Amharic (አማርኛ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Amharic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Amharic' from https://www.nuget.org/packages/IronOcr.Languages.Amharic/ to your Visual Studio project.<br />
            Alternatively download the "Amharic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Arabic">
            <summary>
            Arabic  OCR language. Performs OCR, reading documents of the Arabic (العربية) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Arabic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Arabic' from https://www.nuget.org/packages/IronOcr.Languages.Arabic/ to your Visual Studio project.<br />
            Alternatively download the "Arabic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArabicBest">
            <summary>
            Arabic  OCR language. Performs OCR, reading documents of the Arabic (العربية) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Arabic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Arabic' from https://www.nuget.org/packages/IronOcr.Languages.Arabic/ to your Visual Studio project.<br />
            Alternatively download the "Arabic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArabicFast">
            <summary>
            Arabic  OCR language. Performs OCR, reading documents of the Arabic (العربية) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Arabic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Arabic' from https://www.nuget.org/packages/IronOcr.Languages.Arabic/ to your Visual Studio project.<br />
            Alternatively download the "Arabic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArabicAlphabet">
            <summary>
            Arabic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Arabic Alphabet (العربية) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Arabic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Arabic' from https://www.nuget.org/packages/IronOcr.Languages.Arabic/ to your Visual Studio project.<br />
            Alternatively download the "Arabic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArabicAlphabetBest">
            <summary>
            Arabic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Arabic Alphabet (العربية) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Arabic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Arabic' from https://www.nuget.org/packages/IronOcr.Languages.Arabic/ to your Visual Studio project.<br />
            Alternatively download the "Arabic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArabicAlphabetFast">
            <summary>
            Arabic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Arabic Alphabet (العربية) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Arabic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Arabic' from https://www.nuget.org/packages/IronOcr.Languages.Arabic/ to your Visual Studio project.<br />
            Alternatively download the "Arabic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArmenianAlphabet">
            <summary>
            Armenian Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Armenian Alphabet (Հայերեն) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Armenian Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Armenian' from https://www.nuget.org/packages/IronOcr.Languages.Armenian/ to your Visual Studio project.<br />
            Alternatively download the "Armenian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArmenianAlphabetBest">
            <summary>
            Armenian Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Armenian Alphabet (Հայերեն) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Armenian Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Armenian' from https://www.nuget.org/packages/IronOcr.Languages.Armenian/ to your Visual Studio project.<br />
            Alternatively download the "Armenian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArmenianAlphabetFast">
            <summary>
            Armenian Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Armenian Alphabet (Հայերեն) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Armenian Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Armenian' from https://www.nuget.org/packages/IronOcr.Languages.Armenian/ to your Visual Studio project.<br />
            Alternatively download the "Armenian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Assamese">
            <summary>
            Assamese  OCR language. Performs OCR, reading documents of the Assamese (অসমীয়া) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Assamese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Assamese' from https://www.nuget.org/packages/IronOcr.Languages.Assamese/ to your Visual Studio project.<br />
            Alternatively download the "Assamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AssameseBest">
            <summary>
            Assamese  OCR language. Performs OCR, reading documents of the Assamese (অসমীয়া) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Assamese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Assamese' from https://www.nuget.org/packages/IronOcr.Languages.Assamese/ to your Visual Studio project.<br />
            Alternatively download the "Assamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AssameseFast">
            <summary>
            Assamese  OCR language. Performs OCR, reading documents of the Assamese (অসমীয়া) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Assamese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Assamese' from https://www.nuget.org/packages/IronOcr.Languages.Assamese/ to your Visual Studio project.<br />
            Alternatively download the "Assamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Azerbaijani">
            <summary>
            Azerbaijani  OCR language. Performs OCR, reading documents of the Azerbaijani (azərbaycan dili) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Azerbaijani uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Azerbaijani' from https://www.nuget.org/packages/IronOcr.Languages.Azerbaijani/ to your Visual Studio project.<br />
            Alternatively download the "Azerbaijani.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AzerbaijaniBest">
            <summary>
            Azerbaijani  OCR language. Performs OCR, reading documents of the Azerbaijani (azərbaycan dili) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Azerbaijani uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Azerbaijani' from https://www.nuget.org/packages/IronOcr.Languages.Azerbaijani/ to your Visual Studio project.<br />
            Alternatively download the "Azerbaijani.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AzerbaijaniFast">
            <summary>
            Azerbaijani  OCR language. Performs OCR, reading documents of the Azerbaijani (azərbaycan dili) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Azerbaijani uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Azerbaijani' from https://www.nuget.org/packages/IronOcr.Languages.Azerbaijani/ to your Visual Studio project.<br />
            Alternatively download the "Azerbaijani.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AzerbaijaniCyrillic">
            <summary>
            Azerbaijani Cyrillic  OCR language. Performs OCR, reading documents of the Azerbaijani (azərbaycan dili) language ,using the Cyrillic alphabet, with an understanding of spelling and linguistic context. 
            <para>This Default variant of Azerbaijani Cyrillic uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Azerbaijani' from https://www.nuget.org/packages/IronOcr.Languages.Azerbaijani/ to your Visual Studio project.<br />
            Alternatively download the "Azerbaijani.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AzerbaijaniCyrillicBest">
            <summary>
            Azerbaijani Cyrillic  OCR language. Performs OCR, reading documents of the Azerbaijani (azərbaycan dili) language ,using the Cyrillic alphabet, with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Azerbaijani Cyrillic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Azerbaijani' from https://www.nuget.org/packages/IronOcr.Languages.Azerbaijani/ to your Visual Studio project.<br />
            Alternatively download the "Azerbaijani.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AzerbaijaniCyrillicFast">
            <summary>
            Azerbaijani Cyrillic  OCR language. Performs OCR, reading documents of the Azerbaijani (azərbaycan dili) language ,using the Cyrillic alphabet, with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Azerbaijani Cyrillic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Azerbaijani' from https://www.nuget.org/packages/IronOcr.Languages.Azerbaijani/ to your Visual Studio project.<br />
            Alternatively download the "Azerbaijani.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Belarusian">
            <summary>
            Belarusian  OCR language. Performs OCR, reading documents of the Belarusian (беларуская мова) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Belarusian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Belarusian' from https://www.nuget.org/packages/IronOcr.Languages.Belarusian/ to your Visual Studio project.<br />
            Alternatively download the "Belarusian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BelarusianBest">
            <summary>
            Belarusian  OCR language. Performs OCR, reading documents of the Belarusian (беларуская мова) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Belarusian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Belarusian' from https://www.nuget.org/packages/IronOcr.Languages.Belarusian/ to your Visual Studio project.<br />
            Alternatively download the "Belarusian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BelarusianFast">
            <summary>
            Belarusian  OCR language. Performs OCR, reading documents of the Belarusian (беларуская мова) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Belarusian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Belarusian' from https://www.nuget.org/packages/IronOcr.Languages.Belarusian/ to your Visual Studio project.<br />
            Alternatively download the "Belarusian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Bengali">
            <summary>
            Bengali  OCR language. Performs OCR, reading documents of the Bengali (Bangla,বাংলা) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Bengali uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bengali' from https://www.nuget.org/packages/IronOcr.Languages.Bengali/ to your Visual Studio project.<br />
            Alternatively download the "Bengali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BengaliBest">
            <summary>
            Bengali  OCR language. Performs OCR, reading documents of the Bengali (Bangla,বাংলা) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Bengali uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bengali' from https://www.nuget.org/packages/IronOcr.Languages.Bengali/ to your Visual Studio project.<br />
            Alternatively download the "Bengali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BengaliFast">
            <summary>
            Bengali  OCR language. Performs OCR, reading documents of the Bengali (Bangla,বাংলা) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Bengali uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bengali' from https://www.nuget.org/packages/IronOcr.Languages.Bengali/ to your Visual Studio project.<br />
            Alternatively download the "Bengali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BengaliAlphabet">
            <summary>
            Bengali Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Bengali Alphabet (Bangla,বাংলা) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Bengali Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bengali' from https://www.nuget.org/packages/IronOcr.Languages.Bengali/ to your Visual Studio project.<br />
            Alternatively download the "Bengali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BengaliAlphabetBest">
            <summary>
            Bengali Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Bengali Alphabet (Bangla,বাংলা) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Bengali Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bengali' from https://www.nuget.org/packages/IronOcr.Languages.Bengali/ to your Visual Studio project.<br />
            Alternatively download the "Bengali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BengaliAlphabetFast">
            <summary>
            Bengali Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Bengali Alphabet (Bangla,বাংলা) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Bengali Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bengali' from https://www.nuget.org/packages/IronOcr.Languages.Bengali/ to your Visual Studio project.<br />
            Alternatively download the "Bengali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Tibetan">
            <summary>
            Tibetan  OCR language. Performs OCR, reading documents of the Tibetan (Tibetan Standard, Tibetan, Central ཡིག་) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Tibetan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tibetan' from https://www.nuget.org/packages/IronOcr.Languages.Tibetan/ to your Visual Studio project.<br />
            Alternatively download the "Tibetan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TibetanBest">
            <summary>
            Tibetan  OCR language. Performs OCR, reading documents of the Tibetan (Tibetan Standard, Tibetan, Central ཡིག་) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Tibetan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tibetan' from https://www.nuget.org/packages/IronOcr.Languages.Tibetan/ to your Visual Studio project.<br />
            Alternatively download the "Tibetan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TibetanFast">
            <summary>
            Tibetan  OCR language. Performs OCR, reading documents of the Tibetan (Tibetan Standard, Tibetan, Central ཡིག་) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Tibetan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tibetan' from https://www.nuget.org/packages/IronOcr.Languages.Tibetan/ to your Visual Studio project.<br />
            Alternatively download the "Tibetan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Bosnian">
            <summary>
            Bosnian  OCR language. Performs OCR, reading documents of the Bosnian (bosanski jezik) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Bosnian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bosnian' from https://www.nuget.org/packages/IronOcr.Languages.Bosnian/ to your Visual Studio project.<br />
            Alternatively download the "Bosnian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BosnianBest">
            <summary>
            Bosnian  OCR language. Performs OCR, reading documents of the Bosnian (bosanski jezik) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Bosnian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bosnian' from https://www.nuget.org/packages/IronOcr.Languages.Bosnian/ to your Visual Studio project.<br />
            Alternatively download the "Bosnian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BosnianFast">
            <summary>
            Bosnian  OCR language. Performs OCR, reading documents of the Bosnian (bosanski jezik) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Bosnian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bosnian' from https://www.nuget.org/packages/IronOcr.Languages.Bosnian/ to your Visual Studio project.<br />
            Alternatively download the "Bosnian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Breton">
            <summary>
            Breton  OCR language. Performs OCR, reading documents of the Breton (brezhoneg) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Breton uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Breton' from https://www.nuget.org/packages/IronOcr.Languages.Breton/ to your Visual Studio project.<br />
            Alternatively download the "Breton.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BretonBest">
            <summary>
            Breton  OCR language. Performs OCR, reading documents of the Breton (brezhoneg) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Breton uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Breton' from https://www.nuget.org/packages/IronOcr.Languages.Breton/ to your Visual Studio project.<br />
            Alternatively download the "Breton.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BretonFast">
            <summary>
            Breton  OCR language. Performs OCR, reading documents of the Breton (brezhoneg) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Breton uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Breton' from https://www.nuget.org/packages/IronOcr.Languages.Breton/ to your Visual Studio project.<br />
            Alternatively download the "Breton.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Bulgarian">
            <summary>
            Bulgarian  OCR language. Performs OCR, reading documents of the Bulgarian (български език) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Bulgarian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bulgarian' from https://www.nuget.org/packages/IronOcr.Languages.Bulgarian/ to your Visual Studio project.<br />
            Alternatively download the "Bulgarian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BulgarianBest">
            <summary>
            Bulgarian  OCR language. Performs OCR, reading documents of the Bulgarian (български език) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Bulgarian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bulgarian' from https://www.nuget.org/packages/IronOcr.Languages.Bulgarian/ to your Visual Studio project.<br />
            Alternatively download the "Bulgarian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BulgarianFast">
            <summary>
            Bulgarian  OCR language. Performs OCR, reading documents of the Bulgarian (български език) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Bulgarian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Bulgarian' from https://www.nuget.org/packages/IronOcr.Languages.Bulgarian/ to your Visual Studio project.<br />
            Alternatively download the "Bulgarian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CanadianAboriginalAlphabet">
            <summary>
            Canadian Aboriginal Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Canadian Aboriginal Alphabet (Canadian First Nations, Indigenous Canadians, Native Canadian, Inuit) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Canadian Aboriginal Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.CanadianAboriginal' from https://www.nuget.org/packages/IronOcr.Languages.CanadianAboriginal/ to your Visual Studio project.<br />
            Alternatively download the "CanadianAboriginal.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CanadianAboriginalAlphabetBest">
            <summary>
            Canadian Aboriginal Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Canadian Aboriginal Alphabet (Canadian First Nations, Indigenous Canadians, Native Canadian, Inuit) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Canadian Aboriginal Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.CanadianAboriginal' from https://www.nuget.org/packages/IronOcr.Languages.CanadianAboriginal/ to your Visual Studio project.<br />
            Alternatively download the "CanadianAboriginal.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CanadianAboriginalAlphabetFast">
            <summary>
            Canadian Aboriginal Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Canadian Aboriginal Alphabet (Canadian First Nations, Indigenous Canadians, Native Canadian, Inuit) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Canadian Aboriginal Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.CanadianAboriginal' from https://www.nuget.org/packages/IronOcr.Languages.CanadianAboriginal/ to your Visual Studio project.<br />
            Alternatively download the "CanadianAboriginal.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Catalan">
            <summary>
            Catalan  OCR language. Performs OCR, reading documents of the Catalan (català, valencià) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Catalan uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Catalan' from https://www.nuget.org/packages/IronOcr.Languages.Catalan/ to your Visual Studio project.<br />
            Alternatively download the "Catalan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CatalanBest">
            <summary>
            Catalan  OCR language. Performs OCR, reading documents of the Catalan (català, valencià) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Catalan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Catalan' from https://www.nuget.org/packages/IronOcr.Languages.Catalan/ to your Visual Studio project.<br />
            Alternatively download the "Catalan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CatalanFast">
            <summary>
            Catalan  OCR language. Performs OCR, reading documents of the Catalan (català, valencià) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Catalan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Catalan' from https://www.nuget.org/packages/IronOcr.Languages.Catalan/ to your Visual Studio project.<br />
            Alternatively download the "Catalan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Cebuano">
            <summary>
            Cebuano  OCR language. Performs OCR, reading documents of the Cebuano (Bisaya, Binisaya) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Cebuano uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cebuano' from https://www.nuget.org/packages/IronOcr.Languages.Cebuano/ to your Visual Studio project.<br />
            Alternatively download the "Cebuano.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CebuanoBest">
            <summary>
            Cebuano  OCR language. Performs OCR, reading documents of the Cebuano (Bisaya, Binisaya) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Cebuano uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cebuano' from https://www.nuget.org/packages/IronOcr.Languages.Cebuano/ to your Visual Studio project.<br />
            Alternatively download the "Cebuano.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CebuanoFast">
            <summary>
            Cebuano  OCR language. Performs OCR, reading documents of the Cebuano (Bisaya, Binisaya) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Cebuano uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cebuano' from https://www.nuget.org/packages/IronOcr.Languages.Cebuano/ to your Visual Studio project.<br />
            Alternatively download the "Cebuano.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Czech">
            <summary>
            Czech  OCR language. Performs OCR, reading documents of the Czech (čeština, český jazyk) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Czech uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Czech' from https://www.nuget.org/packages/IronOcr.Languages.Czech/ to your Visual Studio project.<br />
            Alternatively download the "Czech.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CzechBest">
            <summary>
            Czech  OCR language. Performs OCR, reading documents of the Czech (čeština, český jazyk) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Czech uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Czech' from https://www.nuget.org/packages/IronOcr.Languages.Czech/ to your Visual Studio project.<br />
            Alternatively download the "Czech.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CzechFast">
            <summary>
            Czech  OCR language. Performs OCR, reading documents of the Czech (čeština, český jazyk) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Czech uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Czech' from https://www.nuget.org/packages/IronOcr.Languages.Czech/ to your Visual Studio project.<br />
            Alternatively download the "Czech.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CherokeeAlphabet">
            <summary>
            Cherokee Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Cherokee Alphabet (ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ, Tsalagi Gawonihisdi) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Cherokee Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cherokee' from https://www.nuget.org/packages/IronOcr.Languages.Cherokee/ to your Visual Studio project.<br />
            Alternatively download the "Cherokee.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CherokeeAlphabetBest">
            <summary>
            Cherokee Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Cherokee Alphabet (ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ, Tsalagi Gawonihisdi) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Cherokee Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cherokee' from https://www.nuget.org/packages/IronOcr.Languages.Cherokee/ to your Visual Studio project.<br />
            Alternatively download the "Cherokee.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CherokeeAlphabetFast">
            <summary>
            Cherokee Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Cherokee Alphabet (ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ, Tsalagi Gawonihisdi) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Cherokee Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cherokee' from https://www.nuget.org/packages/IronOcr.Languages.Cherokee/ to your Visual Studio project.<br />
            Alternatively download the "Cherokee.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseSimplified">
            <summary>
            Chinese Simplified  OCR language. Performs OCR, reading documents of the Chinese Simplified [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Chinese Simplified uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseSimplifiedBest">
            <summary>
            Chinese Simplified  OCR language. Performs OCR, reading documents of the Chinese Simplified [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Chinese Simplified uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseSimplifiedFast">
            <summary>
            Chinese Simplified  OCR language. Performs OCR, reading documents of the Chinese Simplified [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Chinese Simplified uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseSimplifiedVertical">
            <summary>
            Chinese Simplified Vertical  OCR language. Performs OCR, reading documents of the Chinese Simplified Vertical [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Chinese Simplified Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseSimplifiedVerticalBest">
            <summary>
            Chinese Simplified Vertical  OCR language. Performs OCR, reading documents of the Chinese Simplified Vertical [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Chinese Simplified Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseSimplifiedVerticalFast">
            <summary>
            Chinese Simplified Vertical  OCR language. Performs OCR, reading documents of the Chinese Simplified Vertical [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Chinese Simplified Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseTraditional">
            <summary>
            Chinese Traditional  OCR language. Performs OCR, reading documents of the Chinese Traditional [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Chinese Traditional uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseTraditionalBest">
            <summary>
            Chinese Traditional  OCR language. Performs OCR, reading documents of the Chinese Traditional [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Chinese Traditional uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseTraditionalFast">
            <summary>
            Chinese Traditional  OCR language. Performs OCR, reading documents of the Chinese Traditional [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Chinese Traditional uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseTraditionalVertical">
            <summary>
            Chinese Traditional Vertical  OCR language. Performs OCR, reading documents of the Chinese Traditional Vertical [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Chinese Traditional Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseTraditionalVerticalBest">
            <summary>
            Chinese Traditional Vertical  OCR language. Performs OCR, reading documents of the Chinese Traditional Vertical [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Chinese Traditional Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ChineseTraditionalVerticalFast">
            <summary>
            Chinese Traditional Vertical  OCR language. Performs OCR, reading documents of the Chinese Traditional Vertical [中文 (Zhōngwén), 汉语, 漢語] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Chinese Traditional Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Chinese' from https://www.nuget.org/packages/IronOcr.Languages.Chinese/ to your Visual Studio project.<br />
            Alternatively download the "Chinese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Cherokee">
            <summary>
            Cherokee  OCR language. Performs OCR, reading documents of the Cherokee (ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ, Tsalagi Gawonihisdi) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Cherokee uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cherokee' from https://www.nuget.org/packages/IronOcr.Languages.Cherokee/ to your Visual Studio project.<br />
            Alternatively download the "Cherokee.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CherokeeBest">
            <summary>
            Cherokee  OCR language. Performs OCR, reading documents of the Cherokee (ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ, Tsalagi Gawonihisdi) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Cherokee uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cherokee' from https://www.nuget.org/packages/IronOcr.Languages.Cherokee/ to your Visual Studio project.<br />
            Alternatively download the "Cherokee.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CherokeeFast">
            <summary>
            Cherokee  OCR language. Performs OCR, reading documents of the Cherokee (ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ, Tsalagi Gawonihisdi) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Cherokee uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cherokee' from https://www.nuget.org/packages/IronOcr.Languages.Cherokee/ to your Visual Studio project.<br />
            Alternatively download the "Cherokee.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Corsican">
            <summary>
            Corsican  OCR language. Performs OCR, reading documents of the Corsican (corsu, lingua corsa) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Corsican uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Corsican' from https://www.nuget.org/packages/IronOcr.Languages.Corsican/ to your Visual Studio project.<br />
            Alternatively download the "Corsican.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CorsicanBest">
            <summary>
            Corsican  OCR language. Performs OCR, reading documents of the Corsican (corsu, lingua corsa) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Corsican uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Corsican' from https://www.nuget.org/packages/IronOcr.Languages.Corsican/ to your Visual Studio project.<br />
            Alternatively download the "Corsican.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CorsicanFast">
            <summary>
            Corsican  OCR language. Performs OCR, reading documents of the Corsican (corsu, lingua corsa) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Corsican uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Corsican' from https://www.nuget.org/packages/IronOcr.Languages.Corsican/ to your Visual Studio project.<br />
            Alternatively download the "Corsican.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Welsh">
            <summary>
            Welsh  OCR language. Performs OCR, reading documents of the Welsh (Cymraeg) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Welsh uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Welsh' from https://www.nuget.org/packages/IronOcr.Languages.Welsh/ to your Visual Studio project.<br />
            Alternatively download the "Welsh.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.WelshBest">
            <summary>
            Welsh  OCR language. Performs OCR, reading documents of the Welsh (Cymraeg) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Welsh uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Welsh' from https://www.nuget.org/packages/IronOcr.Languages.Welsh/ to your Visual Studio project.<br />
            Alternatively download the "Welsh.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.WelshFast">
            <summary>
            Welsh  OCR language. Performs OCR, reading documents of the Welsh (Cymraeg) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Welsh uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Welsh' from https://www.nuget.org/packages/IronOcr.Languages.Welsh/ to your Visual Studio project.<br />
            Alternatively download the "Welsh.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CyrillicAlphabet">
            <summary>
            Cyrillic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Cyrillic Alphabet (Cyrillic scripts) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Cyrillic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cyrillic' from https://www.nuget.org/packages/IronOcr.Languages.Cyrillic/ to your Visual Studio project.<br />
            Alternatively download the "Cyrillic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CyrillicAlphabetBest">
            <summary>
            Cyrillic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Cyrillic Alphabet (Cyrillic scripts) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Cyrillic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cyrillic' from https://www.nuget.org/packages/IronOcr.Languages.Cyrillic/ to your Visual Studio project.<br />
            Alternatively download the "Cyrillic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CyrillicAlphabetFast">
            <summary>
            Cyrillic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Cyrillic Alphabet (Cyrillic scripts) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Cyrillic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Cyrillic' from https://www.nuget.org/packages/IronOcr.Languages.Cyrillic/ to your Visual Studio project.<br />
            Alternatively download the "Cyrillic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Danish">
            <summary>
            Danish  OCR language. Performs OCR, reading documents of the Danish (dansk) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Danish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Danish' from https://www.nuget.org/packages/IronOcr.Languages.Danish/ to your Visual Studio project.<br />
            Alternatively download the "Danish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DanishBest">
            <summary>
            Danish  OCR language. Performs OCR, reading documents of the Danish (dansk) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Danish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Danish' from https://www.nuget.org/packages/IronOcr.Languages.Danish/ to your Visual Studio project.<br />
            Alternatively download the "Danish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DanishFast">
            <summary>
            Danish  OCR language. Performs OCR, reading documents of the Danish (dansk) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Danish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Danish' from https://www.nuget.org/packages/IronOcr.Languages.Danish/ to your Visual Studio project.<br />
            Alternatively download the "Danish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DanishFraktur">
            <summary>
            Danish Fraktur  OCR language. Performs OCR, reading documents of the Danish Fraktur (dansk) language with an understanding of spelling and linguistic context. 
            <para>This Danish Fraktur OCR language pack  uses only an OEM (shape recognition evolved from Tesseract 3) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Danish' from https://www.nuget.org/packages/IronOcr.Languages.Danish/ to your Visual Studio project.<br />
            Alternatively download the "Danish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.German">
            <summary>
            German  OCR language. Performs OCR, reading documents of the German (Deutsch) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of German uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.German' from https://www.nuget.org/packages/IronOcr.Languages.German/ to your Visual Studio project.<br />
            Alternatively download the "German.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GermanBest">
            <summary>
            German  OCR language. Performs OCR, reading documents of the German (Deutsch) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of German uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.German' from https://www.nuget.org/packages/IronOcr.Languages.German/ to your Visual Studio project.<br />
            Alternatively download the "German.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GermanFast">
            <summary>
            German  OCR language. Performs OCR, reading documents of the German (Deutsch) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of German uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.German' from https://www.nuget.org/packages/IronOcr.Languages.German/ to your Visual Studio project.<br />
            Alternatively download the "German.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GermanFraktur">
            <summary>
            German Fraktur  OCR language. Performs OCR, reading documents of the German Fraktur (Deutsch) language with an understanding of spelling and linguistic context. 
            <para>This German Fraktur OCR language pack  uses only an OEM (shape recognition evolved from Tesseract 3) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.German' from https://www.nuget.org/packages/IronOcr.Languages.German/ to your Visual Studio project.<br />
            Alternatively download the "German.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DevanagariAlphabet">
            <summary>
            Devanagari Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Devanagari Alphabet (Nagair,देवनागरी) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Devanagari Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Devanagari' from https://www.nuget.org/packages/IronOcr.Languages.Devanagari/ to your Visual Studio project.<br />
            Alternatively download the "Devanagari.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DevanagariAlphabetBest">
            <summary>
            Devanagari Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Devanagari Alphabet (Nagair,देवनागरी) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Devanagari Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Devanagari' from https://www.nuget.org/packages/IronOcr.Languages.Devanagari/ to your Visual Studio project.<br />
            Alternatively download the "Devanagari.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DevanagariAlphabetFast">
            <summary>
            Devanagari Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Devanagari Alphabet (Nagair,देवनागरी) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Devanagari Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Devanagari' from https://www.nuget.org/packages/IronOcr.Languages.Devanagari/ to your Visual Studio project.<br />
            Alternatively download the "Devanagari.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Divehi">
            <summary>
            Divehi  OCR language. Performs OCR, reading documents of the Divehi (ދިވެހި) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Divehi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Divehi' from https://www.nuget.org/packages/IronOcr.Languages.Divehi/ to your Visual Studio project.<br />
            Alternatively download the "Divehi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DivehiBest">
            <summary>
            Divehi  OCR language. Performs OCR, reading documents of the Divehi (ދިވެހި) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Divehi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Divehi' from https://www.nuget.org/packages/IronOcr.Languages.Divehi/ to your Visual Studio project.<br />
            Alternatively download the "Divehi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DivehiFast">
            <summary>
            Divehi  OCR language. Performs OCR, reading documents of the Divehi (ދިވެހި) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Divehi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Divehi' from https://www.nuget.org/packages/IronOcr.Languages.Divehi/ to your Visual Studio project.<br />
            Alternatively download the "Divehi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Dzongkha">
            <summary>
            Dzongkha  OCR language. Performs OCR, reading documents of the Dzongkha (རྫོང་ཁ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Dzongkha uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Dzongkha' from https://www.nuget.org/packages/IronOcr.Languages.Dzongkha/ to your Visual Studio project.<br />
            Alternatively download the "Dzongkha.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DzongkhaBest">
            <summary>
            Dzongkha  OCR language. Performs OCR, reading documents of the Dzongkha (རྫོང་ཁ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Dzongkha uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Dzongkha' from https://www.nuget.org/packages/IronOcr.Languages.Dzongkha/ to your Visual Studio project.<br />
            Alternatively download the "Dzongkha.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DzongkhaFast">
            <summary>
            Dzongkha  OCR language. Performs OCR, reading documents of the Dzongkha (རྫོང་ཁ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Dzongkha uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Dzongkha' from https://www.nuget.org/packages/IronOcr.Languages.Dzongkha/ to your Visual Studio project.<br />
            Alternatively download the "Dzongkha.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Greek">
            <summary>
            Greek  OCR language. Performs OCR, reading documents of the Greek (ελληνικά) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Greek uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Greek' from https://www.nuget.org/packages/IronOcr.Languages.Greek/ to your Visual Studio project.<br />
            Alternatively download the "Greek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GreekBest">
            <summary>
            Greek  OCR language. Performs OCR, reading documents of the Greek (ελληνικά) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Greek uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Greek' from https://www.nuget.org/packages/IronOcr.Languages.Greek/ to your Visual Studio project.<br />
            Alternatively download the "Greek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GreekFast">
            <summary>
            Greek  OCR language. Performs OCR, reading documents of the Greek (ελληνικά) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Greek uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Greek' from https://www.nuget.org/packages/IronOcr.Languages.Greek/ to your Visual Studio project.<br />
            Alternatively download the "Greek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.English">
            <summary>
            English  OCR language. Performs OCR, reading documents of the English language with an understanding of spelling and linguistic context. 
            <para>Installed Automatically with IronOCR as the default Language</para><para>This Default variant of English uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.English' from https://www.nuget.org/packages/IronOcr.Languages.English/ to your Visual Studio project.<br />
            Alternatively download the "English.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EnglishBest">
            <summary>
            English  OCR language. Performs OCR, reading documents of the English language with an understanding of spelling and linguistic context. 
            <para>Installed Automatically with IronOCR as the default Language</para><para>This 'Best' (detailed) variant of English uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.English' from https://www.nuget.org/packages/IronOcr.Languages.English/ to your Visual Studio project.<br />
            Alternatively download the "English.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EnglishFast">
            <summary>
            English  OCR language. Performs OCR, reading documents of the English language with an understanding of spelling and linguistic context. 
            <para>Installed Automatically with IronOCR as the default Language</para><para>This 'Fast' variant of English uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.English' from https://www.nuget.org/packages/IronOcr.Languages.English/ to your Visual Studio project.<br />
            Alternatively download the "English.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MiddleEnglish">
            <summary>
            Middle English  OCR language. Performs OCR, reading documents of the Middle English [English (1100-1500 AD)] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Middle English uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.MiddleEnglish' from https://www.nuget.org/packages/IronOcr.Languages.MiddleEnglish/ to your Visual Studio project.<br />
            Alternatively download the "MiddleEnglish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MiddleEnglishBest">
            <summary>
            Middle English  OCR language. Performs OCR, reading documents of the Middle English [English (1100-1500 AD)] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Middle English uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.MiddleEnglish' from https://www.nuget.org/packages/IronOcr.Languages.MiddleEnglish/ to your Visual Studio project.<br />
            Alternatively download the "MiddleEnglish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MiddleEnglishFast">
            <summary>
            Middle English  OCR language. Performs OCR, reading documents of the Middle English [English (1100-1500 AD)] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Middle English uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.MiddleEnglish' from https://www.nuget.org/packages/IronOcr.Languages.MiddleEnglish/ to your Visual Studio project.<br />
            Alternatively download the "MiddleEnglish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Esperanto">
            <summary>
            Esperanto  OCR language. Performs OCR, reading documents of the Esperanto language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Esperanto uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Esperanto' from https://www.nuget.org/packages/IronOcr.Languages.Esperanto/ to your Visual Studio project.<br />
            Alternatively download the "Esperanto.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EsperantoBest">
            <summary>
            Esperanto  OCR language. Performs OCR, reading documents of the Esperanto language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Esperanto uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Esperanto' from https://www.nuget.org/packages/IronOcr.Languages.Esperanto/ to your Visual Studio project.<br />
            Alternatively download the "Esperanto.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EsperantoFast">
            <summary>
            Esperanto  OCR language. Performs OCR, reading documents of the Esperanto language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Esperanto uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Esperanto' from https://www.nuget.org/packages/IronOcr.Languages.Esperanto/ to your Visual Studio project.<br />
            Alternatively download the "Esperanto.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Estonian">
            <summary>
            Estonian  OCR language. Performs OCR, reading documents of the Estonian (eesti, eesti keel) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Estonian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Estonian' from https://www.nuget.org/packages/IronOcr.Languages.Estonian/ to your Visual Studio project.<br />
            Alternatively download the "Estonian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EstonianBest">
            <summary>
            Estonian  OCR language. Performs OCR, reading documents of the Estonian (eesti, eesti keel) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Estonian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Estonian' from https://www.nuget.org/packages/IronOcr.Languages.Estonian/ to your Visual Studio project.<br />
            Alternatively download the "Estonian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EstonianFast">
            <summary>
            Estonian  OCR language. Performs OCR, reading documents of the Estonian (eesti, eesti keel) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Estonian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Estonian' from https://www.nuget.org/packages/IronOcr.Languages.Estonian/ to your Visual Studio project.<br />
            Alternatively download the "Estonian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EthiopicAlphabet">
            <summary>
            Ethiopic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Ethiopic Alphabet (Ge'ez,ግዕዝ, Gəʿəz) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Ethiopic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Ethiopic' from https://www.nuget.org/packages/IronOcr.Languages.Ethiopic/ to your Visual Studio project.<br />
            Alternatively download the "Ethiopic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EthiopicAlphabetBest">
            <summary>
            Ethiopic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Ethiopic Alphabet (Ge'ez,ግዕዝ, Gəʿəz) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Ethiopic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Ethiopic' from https://www.nuget.org/packages/IronOcr.Languages.Ethiopic/ to your Visual Studio project.<br />
            Alternatively download the "Ethiopic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.EthiopicAlphabetFast">
            <summary>
            Ethiopic Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Ethiopic Alphabet (Ge'ez,ግዕዝ, Gəʿəz) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Ethiopic Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Ethiopic' from https://www.nuget.org/packages/IronOcr.Languages.Ethiopic/ to your Visual Studio project.<br />
            Alternatively download the "Ethiopic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Basque">
            <summary>
            Basque  OCR language. Performs OCR, reading documents of the Basque (euskara, euskera) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Basque uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Basque' from https://www.nuget.org/packages/IronOcr.Languages.Basque/ to your Visual Studio project.<br />
            Alternatively download the "Basque.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BasqueBest">
            <summary>
            Basque  OCR language. Performs OCR, reading documents of the Basque (euskara, euskera) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Basque uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Basque' from https://www.nuget.org/packages/IronOcr.Languages.Basque/ to your Visual Studio project.<br />
            Alternatively download the "Basque.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.BasqueFast">
            <summary>
            Basque  OCR language. Performs OCR, reading documents of the Basque (euskara, euskera) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Basque uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Basque' from https://www.nuget.org/packages/IronOcr.Languages.Basque/ to your Visual Studio project.<br />
            Alternatively download the "Basque.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Faroese">
            <summary>
            Faroese  OCR language. Performs OCR, reading documents of the Faroese (føroyskt) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Faroese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Faroese' from https://www.nuget.org/packages/IronOcr.Languages.Faroese/ to your Visual Studio project.<br />
            Alternatively download the "Faroese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FaroeseBest">
            <summary>
            Faroese  OCR language. Performs OCR, reading documents of the Faroese (føroyskt) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Faroese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Faroese' from https://www.nuget.org/packages/IronOcr.Languages.Faroese/ to your Visual Studio project.<br />
            Alternatively download the "Faroese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FaroeseFast">
            <summary>
            Faroese  OCR language. Performs OCR, reading documents of the Faroese (føroyskt) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Faroese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Faroese' from https://www.nuget.org/packages/IronOcr.Languages.Faroese/ to your Visual Studio project.<br />
            Alternatively download the "Faroese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Persian">
            <summary>
            Persian  OCR language. Performs OCR, reading documents of the Persian (فارسی) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Persian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Persian' from https://www.nuget.org/packages/IronOcr.Languages.Persian/ to your Visual Studio project.<br />
            Alternatively download the "Persian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PersianBest">
            <summary>
            Persian  OCR language. Performs OCR, reading documents of the Persian (فارسی) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Persian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Persian' from https://www.nuget.org/packages/IronOcr.Languages.Persian/ to your Visual Studio project.<br />
            Alternatively download the "Persian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PersianFast">
            <summary>
            Persian  OCR language. Performs OCR, reading documents of the Persian (فارسی) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Persian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Persian' from https://www.nuget.org/packages/IronOcr.Languages.Persian/ to your Visual Studio project.<br />
            Alternatively download the "Persian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Filipino">
            <summary>
            Filipino  OCR language. Performs OCR, reading documents of the Filipino (National Language of the Philippines, Standardized Tagalog) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Filipino uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Filipino' from https://www.nuget.org/packages/IronOcr.Languages.Filipino/ to your Visual Studio project.<br />
            Alternatively download the "Filipino.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FilipinoBest">
            <summary>
            Filipino  OCR language. Performs OCR, reading documents of the Filipino (National Language of the Philippines, Standardized Tagalog) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Filipino uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Filipino' from https://www.nuget.org/packages/IronOcr.Languages.Filipino/ to your Visual Studio project.<br />
            Alternatively download the "Filipino.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FilipinoFast">
            <summary>
            Filipino  OCR language. Performs OCR, reading documents of the Filipino (National Language of the Philippines, Standardized Tagalog) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Filipino uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Filipino' from https://www.nuget.org/packages/IronOcr.Languages.Filipino/ to your Visual Studio project.<br />
            Alternatively download the "Filipino.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Finnish">
            <summary>
            Finnish  OCR language. Performs OCR, reading documents of the Finnish (suomi, suomen kieli) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Finnish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Finnish' from https://www.nuget.org/packages/IronOcr.Languages.Finnish/ to your Visual Studio project.<br />
            Alternatively download the "Finnish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FinnishBest">
            <summary>
            Finnish  OCR language. Performs OCR, reading documents of the Finnish (suomi, suomen kieli) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Finnish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Finnish' from https://www.nuget.org/packages/IronOcr.Languages.Finnish/ to your Visual Studio project.<br />
            Alternatively download the "Finnish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FinnishFast">
            <summary>
            Finnish  OCR language. Performs OCR, reading documents of the Finnish (suomi, suomen kieli) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Finnish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Finnish' from https://www.nuget.org/packages/IronOcr.Languages.Finnish/ to your Visual Studio project.<br />
            Alternatively download the "Finnish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Financial">
            <summary>
            Financial  OCR language. Performs OCR, reading documents of the Financial (Financial, Numerical and Technical Documents) language with an understanding of spelling and linguistic context. 
            <para>This Financial OCR language pack  uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Financial' from https://www.nuget.org/packages/IronOcr.Languages.Financial/ to your Visual Studio project.<br />
            Alternatively download the "Financial.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.French">
            <summary>
            French  OCR language. Performs OCR, reading documents of the French (français, langue française) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of French uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.French' from https://www.nuget.org/packages/IronOcr.Languages.French/ to your Visual Studio project.<br />
            Alternatively download the "French.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FrenchBest">
            <summary>
            French  OCR language. Performs OCR, reading documents of the French (français, langue française) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of French uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.French' from https://www.nuget.org/packages/IronOcr.Languages.French/ to your Visual Studio project.<br />
            Alternatively download the "French.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FrenchFast">
            <summary>
            French  OCR language. Performs OCR, reading documents of the French (français, langue française) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of French uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.French' from https://www.nuget.org/packages/IronOcr.Languages.French/ to your Visual Studio project.<br />
            Alternatively download the "French.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FrakturAlphabet">
            <summary>
            Fraktur Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Fraktur Alphabet (Generic Fraktur, Calligraphic hand of the Latin alphabet) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Fraktur Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Fraktur' from https://www.nuget.org/packages/IronOcr.Languages.Fraktur/ to your Visual Studio project.<br />
            Alternatively download the "Fraktur.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FrakturAlphabetBest">
            <summary>
            Fraktur Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Fraktur Alphabet (Generic Fraktur, Calligraphic hand of the Latin alphabet) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Fraktur Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Fraktur' from https://www.nuget.org/packages/IronOcr.Languages.Fraktur/ to your Visual Studio project.<br />
            Alternatively download the "Fraktur.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FrakturAlphabetFast">
            <summary>
            Fraktur Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Fraktur Alphabet (Generic Fraktur, Calligraphic hand of the Latin alphabet) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Fraktur Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Fraktur' from https://www.nuget.org/packages/IronOcr.Languages.Fraktur/ to your Visual Studio project.<br />
            Alternatively download the "Fraktur.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Frankish">
            <summary>
            Frankish  OCR language. Performs OCR, reading documents of the Frankish (Frenkisk, Old Franconian) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Frankish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Frankish' from https://www.nuget.org/packages/IronOcr.Languages.Frankish/ to your Visual Studio project.<br />
            Alternatively download the "Frankish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FrankishBest">
            <summary>
            Frankish  OCR language. Performs OCR, reading documents of the Frankish (Frenkisk, Old Franconian) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Frankish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Frankish' from https://www.nuget.org/packages/IronOcr.Languages.Frankish/ to your Visual Studio project.<br />
            Alternatively download the "Frankish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.FrankishFast">
            <summary>
            Frankish  OCR language. Performs OCR, reading documents of the Frankish (Frenkisk, Old Franconian) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Frankish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Frankish' from https://www.nuget.org/packages/IronOcr.Languages.Frankish/ to your Visual Studio project.<br />
            Alternatively download the "Frankish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MiddleFrench">
            <summary>
            Middle French  OCR language. Performs OCR, reading documents of the Middle French [Moyen Français,Middle French (ca. 1400-1600 AD)] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Middle French uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.MiddleFrench' from https://www.nuget.org/packages/IronOcr.Languages.MiddleFrench/ to your Visual Studio project.<br />
            Alternatively download the "MiddleFrench.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MiddleFrenchBest">
            <summary>
            Middle French  OCR language. Performs OCR, reading documents of the Middle French [Moyen Français,Middle French (ca. 1400-1600 AD)] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Middle French uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.MiddleFrench' from https://www.nuget.org/packages/IronOcr.Languages.MiddleFrench/ to your Visual Studio project.<br />
            Alternatively download the "MiddleFrench.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MiddleFrenchFast">
            <summary>
            Middle French  OCR language. Performs OCR, reading documents of the Middle French [Moyen Français,Middle French (ca. 1400-1600 AD)] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Middle French uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.MiddleFrench' from https://www.nuget.org/packages/IronOcr.Languages.MiddleFrench/ to your Visual Studio project.<br />
            Alternatively download the "MiddleFrench.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.WesternFrisian">
            <summary>
            Western Frisian  OCR language. Performs OCR, reading documents of the Western Frisian (Frysk) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Western Frisian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.WesternFrisian' from https://www.nuget.org/packages/IronOcr.Languages.WesternFrisian/ to your Visual Studio project.<br />
            Alternatively download the "WesternFrisian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.WesternFrisianBest">
            <summary>
            Western Frisian  OCR language. Performs OCR, reading documents of the Western Frisian (Frysk) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Western Frisian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.WesternFrisian' from https://www.nuget.org/packages/IronOcr.Languages.WesternFrisian/ to your Visual Studio project.<br />
            Alternatively download the "WesternFrisian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.WesternFrisianFast">
            <summary>
            Western Frisian  OCR language. Performs OCR, reading documents of the Western Frisian (Frysk) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Western Frisian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.WesternFrisian' from https://www.nuget.org/packages/IronOcr.Languages.WesternFrisian/ to your Visual Studio project.<br />
            Alternatively download the "WesternFrisian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianAlphabet">
            <summary>
            Georgian Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Georgian Alphabet (ქართული) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Georgian Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianAlphabetBest">
            <summary>
            Georgian Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Georgian Alphabet (ქართული) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Georgian Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianAlphabetFast">
            <summary>
            Georgian Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Georgian Alphabet (ქართული) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Georgian Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ScottishGaelic">
            <summary>
            Scottish Gaelic  OCR language. Performs OCR, reading documents of the Scottish Gaelic (Gàidhlig) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Scottish Gaelic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.ScottishGaelic' from https://www.nuget.org/packages/IronOcr.Languages.ScottishGaelic/ to your Visual Studio project.<br />
            Alternatively download the "ScottishGaelic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ScottishGaelicBest">
            <summary>
            Scottish Gaelic  OCR language. Performs OCR, reading documents of the Scottish Gaelic (Gàidhlig) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Scottish Gaelic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.ScottishGaelic' from https://www.nuget.org/packages/IronOcr.Languages.ScottishGaelic/ to your Visual Studio project.<br />
            Alternatively download the "ScottishGaelic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ScottishGaelicFast">
            <summary>
            Scottish Gaelic  OCR language. Performs OCR, reading documents of the Scottish Gaelic (Gàidhlig) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Scottish Gaelic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.ScottishGaelic' from https://www.nuget.org/packages/IronOcr.Languages.ScottishGaelic/ to your Visual Studio project.<br />
            Alternatively download the "ScottishGaelic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Irish">
            <summary>
            Irish  OCR language. Performs OCR, reading documents of the Irish (Gaeilge) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Irish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Irish' from https://www.nuget.org/packages/IronOcr.Languages.Irish/ to your Visual Studio project.<br />
            Alternatively download the "Irish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.IrishBest">
            <summary>
            Irish  OCR language. Performs OCR, reading documents of the Irish (Gaeilge) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Irish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Irish' from https://www.nuget.org/packages/IronOcr.Languages.Irish/ to your Visual Studio project.<br />
            Alternatively download the "Irish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.IrishFast">
            <summary>
            Irish  OCR language. Performs OCR, reading documents of the Irish (Gaeilge) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Irish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Irish' from https://www.nuget.org/packages/IronOcr.Languages.Irish/ to your Visual Studio project.<br />
            Alternatively download the "Irish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Galician">
            <summary>
            Galician  OCR language. Performs OCR, reading documents of the Galician (galego) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Galician uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Galician' from https://www.nuget.org/packages/IronOcr.Languages.Galician/ to your Visual Studio project.<br />
            Alternatively download the "Galician.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GalicianBest">
            <summary>
            Galician  OCR language. Performs OCR, reading documents of the Galician (galego) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Galician uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Galician' from https://www.nuget.org/packages/IronOcr.Languages.Galician/ to your Visual Studio project.<br />
            Alternatively download the "Galician.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GalicianFast">
            <summary>
            Galician  OCR language. Performs OCR, reading documents of the Galician (galego) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Galician uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Galician' from https://www.nuget.org/packages/IronOcr.Languages.Galician/ to your Visual Studio project.<br />
            Alternatively download the "Galician.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AncientGreek">
            <summary>
            Ancient Greek  OCR language. Performs OCR, reading documents of the Ancient Greek (Ἑλληνική) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Ancient Greek uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.AncientGreek' from https://www.nuget.org/packages/IronOcr.Languages.AncientGreek/ to your Visual Studio project.<br />
            Alternatively download the "AncientGreek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AncientGreekBest">
            <summary>
            Ancient Greek  OCR language. Performs OCR, reading documents of the Ancient Greek (Ἑλληνική) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Ancient Greek uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.AncientGreek' from https://www.nuget.org/packages/IronOcr.Languages.AncientGreek/ to your Visual Studio project.<br />
            Alternatively download the "AncientGreek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AncientGreekFast">
            <summary>
            Ancient Greek  OCR language. Performs OCR, reading documents of the Ancient Greek (Ἑλληνική) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Ancient Greek uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.AncientGreek' from https://www.nuget.org/packages/IronOcr.Languages.AncientGreek/ to your Visual Studio project.<br />
            Alternatively download the "AncientGreek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GreekAlphabet">
            <summary>
            Greek Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Greek Alphabet (ελληνικά) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Greek Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Greek' from https://www.nuget.org/packages/IronOcr.Languages.Greek/ to your Visual Studio project.<br />
            Alternatively download the "Greek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GreekAlphabetBest">
            <summary>
            Greek Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Greek Alphabet (ελληνικά) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Greek Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Greek' from https://www.nuget.org/packages/IronOcr.Languages.Greek/ to your Visual Studio project.<br />
            Alternatively download the "Greek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GreekAlphabetFast">
            <summary>
            Greek Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Greek Alphabet (ελληνικά) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Greek Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Greek' from https://www.nuget.org/packages/IronOcr.Languages.Greek/ to your Visual Studio project.<br />
            Alternatively download the "Greek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Gujarati">
            <summary>
            Gujarati  OCR language. Performs OCR, reading documents of the Gujarati (ગુજરાતી) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Gujarati uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gujarati' from https://www.nuget.org/packages/IronOcr.Languages.Gujarati/ to your Visual Studio project.<br />
            Alternatively download the "Gujarati.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GujaratiBest">
            <summary>
            Gujarati  OCR language. Performs OCR, reading documents of the Gujarati (ગુજરાતી) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Gujarati uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gujarati' from https://www.nuget.org/packages/IronOcr.Languages.Gujarati/ to your Visual Studio project.<br />
            Alternatively download the "Gujarati.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GujaratiFast">
            <summary>
            Gujarati  OCR language. Performs OCR, reading documents of the Gujarati (ગુજરાતી) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Gujarati uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gujarati' from https://www.nuget.org/packages/IronOcr.Languages.Gujarati/ to your Visual Studio project.<br />
            Alternatively download the "Gujarati.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GujaratiAlphabet">
            <summary>
            Gujarati Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Gujarati Alphabet (ગુજરાતી) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Gujarati Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gujarati' from https://www.nuget.org/packages/IronOcr.Languages.Gujarati/ to your Visual Studio project.<br />
            Alternatively download the "Gujarati.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GujaratiAlphabetBest">
            <summary>
            Gujarati Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Gujarati Alphabet (ગુજરાતી) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Gujarati Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gujarati' from https://www.nuget.org/packages/IronOcr.Languages.Gujarati/ to your Visual Studio project.<br />
            Alternatively download the "Gujarati.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GujaratiAlphabetFast">
            <summary>
            Gujarati Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Gujarati Alphabet (ગુજરાતી) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Gujarati Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gujarati' from https://www.nuget.org/packages/IronOcr.Languages.Gujarati/ to your Visual Studio project.<br />
            Alternatively download the "Gujarati.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GurmukhiAlphabet">
            <summary>
            Gurmukhi Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Gurmukhi Alphabet (Gurmukhī, ਗੁਰਮੁਖੀ, Shahmukhi, گُرمُکھی‎, Sihk Script) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Gurmukhi Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gurmukhi' from https://www.nuget.org/packages/IronOcr.Languages.Gurmukhi/ to your Visual Studio project.<br />
            Alternatively download the "Gurmukhi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GurmukhiAlphabetBest">
            <summary>
            Gurmukhi Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Gurmukhi Alphabet (Gurmukhī, ਗੁਰਮੁਖੀ, Shahmukhi, گُرمُکھی‎, Sihk Script) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Gurmukhi Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gurmukhi' from https://www.nuget.org/packages/IronOcr.Languages.Gurmukhi/ to your Visual Studio project.<br />
            Alternatively download the "Gurmukhi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GurmukhiAlphabetFast">
            <summary>
            Gurmukhi Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Gurmukhi Alphabet (Gurmukhī, ਗੁਰਮੁਖੀ, Shahmukhi, گُرمُکھی‎, Sihk Script) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Gurmukhi Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Gurmukhi' from https://www.nuget.org/packages/IronOcr.Languages.Gurmukhi/ to your Visual Studio project.<br />
            Alternatively download the "Gurmukhi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HangulAlphabet">
            <summary>
            Hangul Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hangul Alphabet (Korean Alphabet,한글,Hangeul,조선글,hosŏn'gŭl) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Hangul Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hangul' from https://www.nuget.org/packages/IronOcr.Languages.Hangul/ to your Visual Studio project.<br />
            Alternatively download the "Hangul.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HangulAlphabetBest">
            <summary>
            Hangul Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hangul Alphabet (Korean Alphabet,한글,Hangeul,조선글,hosŏn'gŭl) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Hangul Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hangul' from https://www.nuget.org/packages/IronOcr.Languages.Hangul/ to your Visual Studio project.<br />
            Alternatively download the "Hangul.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HangulAlphabetFast">
            <summary>
            Hangul Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hangul Alphabet (Korean Alphabet,한글,Hangeul,조선글,hosŏn'gŭl) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Hangul Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hangul' from https://www.nuget.org/packages/IronOcr.Languages.Hangul/ to your Visual Studio project.<br />
            Alternatively download the "Hangul.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HangulVerticalAlphabet">
            <summary>
            Hangul Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hangul Vertical Alphabet (Korean Alphabet,한글,Hangeul,조선글,hosŏn'gŭl) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Hangul Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hangul' from https://www.nuget.org/packages/IronOcr.Languages.Hangul/ to your Visual Studio project.<br />
            Alternatively download the "Hangul.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HangulVerticalAlphabetBest">
            <summary>
            Hangul Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hangul Vertical Alphabet (Korean Alphabet,한글,Hangeul,조선글,hosŏn'gŭl) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Hangul Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hangul' from https://www.nuget.org/packages/IronOcr.Languages.Hangul/ to your Visual Studio project.<br />
            Alternatively download the "Hangul.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HangulVerticalAlphabetFast">
            <summary>
            Hangul Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hangul Vertical Alphabet (Korean Alphabet,한글,Hangeul,조선글,hosŏn'gŭl) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Hangul Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hangul' from https://www.nuget.org/packages/IronOcr.Languages.Hangul/ to your Visual Studio project.<br />
            Alternatively download the "Hangul.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanSimplifiedAlphabet">
            <summary>
            Han Simplified Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Simplified Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Han Simplified Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanSimplifiedAlphabetBest">
            <summary>
            Han Simplified Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Simplified Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Han Simplified Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanSimplifiedAlphabetFast">
            <summary>
            Han Simplified Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Simplified Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Han Simplified Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanSimplifiedVerticalAlphabet">
            <summary>
            Han Simplified Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Simplified Vertical Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Han Simplified Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanSimplifiedVerticalAlphabetBest">
            <summary>
            Han Simplified Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Simplified Vertical Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Han Simplified Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanSimplifiedVerticalAlphabetFast">
            <summary>
            Han Simplified Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Simplified Vertical Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Han Simplified Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanTraditionalAlphabet">
            <summary>
            Han Traditional Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Traditional Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Han Traditional Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanTraditionalAlphabetBest">
            <summary>
            Han Traditional Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Traditional Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Han Traditional Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanTraditionalAlphabetFast">
            <summary>
            Han Traditional Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Traditional Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Han Traditional Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanTraditionalVerticalAlphabet">
            <summary>
            Han Traditional Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Traditional Vertical Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Han Traditional Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanTraditionalVerticalAlphabetBest">
            <summary>
            Han Traditional Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Traditional Vertical Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Han Traditional Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HanTraditionalVerticalAlphabetFast">
            <summary>
            Han Traditional Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Han Traditional Vertical Alphabet (Samhan ,한어, 韓語) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Han Traditional Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Han' from https://www.nuget.org/packages/IronOcr.Languages.Han/ to your Visual Studio project.<br />
            Alternatively download the "Han.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Haitian">
            <summary>
            Haitian  OCR language. Performs OCR, reading documents of the Haitian (Kreyòl ayisyen) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Haitian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Haitian' from https://www.nuget.org/packages/IronOcr.Languages.Haitian/ to your Visual Studio project.<br />
            Alternatively download the "Haitian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HaitianBest">
            <summary>
            Haitian  OCR language. Performs OCR, reading documents of the Haitian (Kreyòl ayisyen) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Haitian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Haitian' from https://www.nuget.org/packages/IronOcr.Languages.Haitian/ to your Visual Studio project.<br />
            Alternatively download the "Haitian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HaitianFast">
            <summary>
            Haitian  OCR language. Performs OCR, reading documents of the Haitian (Kreyòl ayisyen) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Haitian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Haitian' from https://www.nuget.org/packages/IronOcr.Languages.Haitian/ to your Visual Studio project.<br />
            Alternatively download the "Haitian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Hebrew">
            <summary>
            Hebrew  OCR language. Performs OCR, reading documents of the Hebrew (עברית) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Hebrew uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hebrew' from https://www.nuget.org/packages/IronOcr.Languages.Hebrew/ to your Visual Studio project.<br />
            Alternatively download the "Hebrew.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HebrewBest">
            <summary>
            Hebrew  OCR language. Performs OCR, reading documents of the Hebrew (עברית) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Hebrew uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hebrew' from https://www.nuget.org/packages/IronOcr.Languages.Hebrew/ to your Visual Studio project.<br />
            Alternatively download the "Hebrew.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HebrewFast">
            <summary>
            Hebrew  OCR language. Performs OCR, reading documents of the Hebrew (עברית) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Hebrew uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hebrew' from https://www.nuget.org/packages/IronOcr.Languages.Hebrew/ to your Visual Studio project.<br />
            Alternatively download the "Hebrew.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HebrewAlphabet">
            <summary>
            Hebrew Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hebrew Alphabet (עברית) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Hebrew Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hebrew' from https://www.nuget.org/packages/IronOcr.Languages.Hebrew/ to your Visual Studio project.<br />
            Alternatively download the "Hebrew.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HebrewAlphabetBest">
            <summary>
            Hebrew Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hebrew Alphabet (עברית) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Hebrew Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hebrew' from https://www.nuget.org/packages/IronOcr.Languages.Hebrew/ to your Visual Studio project.<br />
            Alternatively download the "Hebrew.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HebrewAlphabetFast">
            <summary>
            Hebrew Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Hebrew Alphabet (עברית) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Hebrew Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hebrew' from https://www.nuget.org/packages/IronOcr.Languages.Hebrew/ to your Visual Studio project.<br />
            Alternatively download the "Hebrew.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Hindi">
            <summary>
            Hindi  OCR language. Performs OCR, reading documents of the Hindi (हिन्दी, हिंदी) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Hindi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hindi' from https://www.nuget.org/packages/IronOcr.Languages.Hindi/ to your Visual Studio project.<br />
            Alternatively download the "Hindi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HindiBest">
            <summary>
            Hindi  OCR language. Performs OCR, reading documents of the Hindi (हिन्दी, हिंदी) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Hindi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hindi' from https://www.nuget.org/packages/IronOcr.Languages.Hindi/ to your Visual Studio project.<br />
            Alternatively download the "Hindi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HindiFast">
            <summary>
            Hindi  OCR language. Performs OCR, reading documents of the Hindi (हिन्दी, हिंदी) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Hindi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hindi' from https://www.nuget.org/packages/IronOcr.Languages.Hindi/ to your Visual Studio project.<br />
            Alternatively download the "Hindi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Croatian">
            <summary>
            Croatian  OCR language. Performs OCR, reading documents of the Croatian (hrvatski jezik) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Croatian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Croatian' from https://www.nuget.org/packages/IronOcr.Languages.Croatian/ to your Visual Studio project.<br />
            Alternatively download the "Croatian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CroatianBest">
            <summary>
            Croatian  OCR language. Performs OCR, reading documents of the Croatian (hrvatski jezik) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Croatian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Croatian' from https://www.nuget.org/packages/IronOcr.Languages.Croatian/ to your Visual Studio project.<br />
            Alternatively download the "Croatian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.CroatianFast">
            <summary>
            Croatian  OCR language. Performs OCR, reading documents of the Croatian (hrvatski jezik) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Croatian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Croatian' from https://www.nuget.org/packages/IronOcr.Languages.Croatian/ to your Visual Studio project.<br />
            Alternatively download the "Croatian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Hungarian">
            <summary>
            Hungarian  OCR language. Performs OCR, reading documents of the Hungarian (magyar) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Hungarian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hungarian' from https://www.nuget.org/packages/IronOcr.Languages.Hungarian/ to your Visual Studio project.<br />
            Alternatively download the "Hungarian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HungarianBest">
            <summary>
            Hungarian  OCR language. Performs OCR, reading documents of the Hungarian (magyar) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Hungarian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hungarian' from https://www.nuget.org/packages/IronOcr.Languages.Hungarian/ to your Visual Studio project.<br />
            Alternatively download the "Hungarian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.HungarianFast">
            <summary>
            Hungarian  OCR language. Performs OCR, reading documents of the Hungarian (magyar) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Hungarian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Hungarian' from https://www.nuget.org/packages/IronOcr.Languages.Hungarian/ to your Visual Studio project.<br />
            Alternatively download the "Hungarian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Armenian">
            <summary>
            Armenian  OCR language. Performs OCR, reading documents of the Armenian (Հայերեն) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Armenian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Armenian' from https://www.nuget.org/packages/IronOcr.Languages.Armenian/ to your Visual Studio project.<br />
            Alternatively download the "Armenian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArmenianBest">
            <summary>
            Armenian  OCR language. Performs OCR, reading documents of the Armenian (Հայերեն) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Armenian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Armenian' from https://www.nuget.org/packages/IronOcr.Languages.Armenian/ to your Visual Studio project.<br />
            Alternatively download the "Armenian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ArmenianFast">
            <summary>
            Armenian  OCR language. Performs OCR, reading documents of the Armenian (Հայերեն) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Armenian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Armenian' from https://www.nuget.org/packages/IronOcr.Languages.Armenian/ to your Visual Studio project.<br />
            Alternatively download the "Armenian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Inuktitut">
            <summary>
            Inuktitut  OCR language. Performs OCR, reading documents of the Inuktitut (ᐃᓄᒃᑎᑐᑦ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Inuktitut uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Inuktitut' from https://www.nuget.org/packages/IronOcr.Languages.Inuktitut/ to your Visual Studio project.<br />
            Alternatively download the "Inuktitut.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.InuktitutBest">
            <summary>
            Inuktitut  OCR language. Performs OCR, reading documents of the Inuktitut (ᐃᓄᒃᑎᑐᑦ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Inuktitut uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Inuktitut' from https://www.nuget.org/packages/IronOcr.Languages.Inuktitut/ to your Visual Studio project.<br />
            Alternatively download the "Inuktitut.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.InuktitutFast">
            <summary>
            Inuktitut  OCR language. Performs OCR, reading documents of the Inuktitut (ᐃᓄᒃᑎᑐᑦ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Inuktitut uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Inuktitut' from https://www.nuget.org/packages/IronOcr.Languages.Inuktitut/ to your Visual Studio project.<br />
            Alternatively download the "Inuktitut.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Indonesian">
            <summary>
            Indonesian  OCR language. Performs OCR, reading documents of the Indonesian (Bahasa Indonesia) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Indonesian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Indonesian' from https://www.nuget.org/packages/IronOcr.Languages.Indonesian/ to your Visual Studio project.<br />
            Alternatively download the "Indonesian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.IndonesianBest">
            <summary>
            Indonesian  OCR language. Performs OCR, reading documents of the Indonesian (Bahasa Indonesia) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Indonesian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Indonesian' from https://www.nuget.org/packages/IronOcr.Languages.Indonesian/ to your Visual Studio project.<br />
            Alternatively download the "Indonesian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.IndonesianFast">
            <summary>
            Indonesian  OCR language. Performs OCR, reading documents of the Indonesian (Bahasa Indonesia) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Indonesian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Indonesian' from https://www.nuget.org/packages/IronOcr.Languages.Indonesian/ to your Visual Studio project.<br />
            Alternatively download the "Indonesian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Icelandic">
            <summary>
            Icelandic  OCR language. Performs OCR, reading documents of the Icelandic (Íslenska) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Icelandic uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Icelandic' from https://www.nuget.org/packages/IronOcr.Languages.Icelandic/ to your Visual Studio project.<br />
            Alternatively download the "Icelandic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.IcelandicBest">
            <summary>
            Icelandic  OCR language. Performs OCR, reading documents of the Icelandic (Íslenska) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Icelandic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Icelandic' from https://www.nuget.org/packages/IronOcr.Languages.Icelandic/ to your Visual Studio project.<br />
            Alternatively download the "Icelandic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.IcelandicFast">
            <summary>
            Icelandic  OCR language. Performs OCR, reading documents of the Icelandic (Íslenska) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Icelandic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Icelandic' from https://www.nuget.org/packages/IronOcr.Languages.Icelandic/ to your Visual Studio project.<br />
            Alternatively download the "Icelandic.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Italian">
            <summary>
            Italian  OCR language. Performs OCR, reading documents of the Italian (italiano) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Italian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Italian' from https://www.nuget.org/packages/IronOcr.Languages.Italian/ to your Visual Studio project.<br />
            Alternatively download the "Italian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ItalianBest">
            <summary>
            Italian  OCR language. Performs OCR, reading documents of the Italian (italiano) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Italian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Italian' from https://www.nuget.org/packages/IronOcr.Languages.Italian/ to your Visual Studio project.<br />
            Alternatively download the "Italian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ItalianFast">
            <summary>
            Italian  OCR language. Performs OCR, reading documents of the Italian (italiano) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Italian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Italian' from https://www.nuget.org/packages/IronOcr.Languages.Italian/ to your Visual Studio project.<br />
            Alternatively download the "Italian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ItalianOld">
            <summary>
            Italian Old  OCR language. Performs OCR, reading documents of the Italian Old (italiano) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Italian Old uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Italian' from https://www.nuget.org/packages/IronOcr.Languages.Italian/ to your Visual Studio project.<br />
            Alternatively download the "Italian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ItalianOldBest">
            <summary>
            Italian Old  OCR language. Performs OCR, reading documents of the Italian Old (italiano) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Italian Old uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Italian' from https://www.nuget.org/packages/IronOcr.Languages.Italian/ to your Visual Studio project.<br />
            Alternatively download the "Italian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ItalianOldFast">
            <summary>
            Italian Old  OCR language. Performs OCR, reading documents of the Italian Old (italiano) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Italian Old uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Italian' from https://www.nuget.org/packages/IronOcr.Languages.Italian/ to your Visual Studio project.<br />
            Alternatively download the "Italian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseAlphabet">
            <summary>
            Japanese Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Japanese Alphabet [日本語 (にほんご)] languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Japanese Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseAlphabetBest">
            <summary>
            Japanese Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Japanese Alphabet [日本語 (にほんご)] languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Japanese Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseAlphabetFast">
            <summary>
            Japanese Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Japanese Alphabet [日本語 (にほんご)] languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Japanese Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseVerticalAlphabet">
            <summary>
            Japanese Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Japanese Vertical Alphabet [日本語 (にほんご)] languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Japanese Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseVerticalAlphabetBest">
            <summary>
            Japanese Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Japanese Vertical Alphabet [日本語 (にほんご)] languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Japanese Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseVerticalAlphabetFast">
            <summary>
            Japanese Vertical Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Japanese Vertical Alphabet [日本語 (にほんご)] languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Japanese Vertical Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Javanese">
            <summary>
            Javanese  OCR language. Performs OCR, reading documents of the Javanese (basa Jawa) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Javanese uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Javanese' from https://www.nuget.org/packages/IronOcr.Languages.Javanese/ to your Visual Studio project.<br />
            Alternatively download the "Javanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JavaneseBest">
            <summary>
            Javanese  OCR language. Performs OCR, reading documents of the Javanese (basa Jawa) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Javanese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Javanese' from https://www.nuget.org/packages/IronOcr.Languages.Javanese/ to your Visual Studio project.<br />
            Alternatively download the "Javanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JavaneseFast">
            <summary>
            Javanese  OCR language. Performs OCR, reading documents of the Javanese (basa Jawa) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Javanese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Javanese' from https://www.nuget.org/packages/IronOcr.Languages.Javanese/ to your Visual Studio project.<br />
            Alternatively download the "Javanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Japanese">
            <summary>
            Japanese  OCR language. Performs OCR, reading documents of the Japanese [日本語 (にほんご)] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Japanese uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseBest">
            <summary>
            Japanese  OCR language. Performs OCR, reading documents of the Japanese [日本語 (にほんご)] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Japanese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseFast">
            <summary>
            Japanese  OCR language. Performs OCR, reading documents of the Japanese [日本語 (にほんご)] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Japanese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseVertical">
            <summary>
            Japanese Vertical  OCR language. Performs OCR, reading documents of the Japanese Vertical [日本語 (にほんご)] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Japanese Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseVerticalBest">
            <summary>
            Japanese Vertical  OCR language. Performs OCR, reading documents of the Japanese Vertical [日本語 (にほんご)] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Japanese Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.JapaneseVerticalFast">
            <summary>
            Japanese Vertical  OCR language. Performs OCR, reading documents of the Japanese Vertical [日本語 (にほんご)] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Japanese Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Japanese' from https://www.nuget.org/packages/IronOcr.Languages.Japanese/ to your Visual Studio project.<br />
            Alternatively download the "Japanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Kannada">
            <summary>
            Kannada  OCR language. Performs OCR, reading documents of the Kannada (ಕನ್ನಡ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Kannada uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kannada' from https://www.nuget.org/packages/IronOcr.Languages.Kannada/ to your Visual Studio project.<br />
            Alternatively download the "Kannada.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KannadaBest">
            <summary>
            Kannada  OCR language. Performs OCR, reading documents of the Kannada (ಕನ್ನಡ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Kannada uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kannada' from https://www.nuget.org/packages/IronOcr.Languages.Kannada/ to your Visual Studio project.<br />
            Alternatively download the "Kannada.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KannadaFast">
            <summary>
            Kannada  OCR language. Performs OCR, reading documents of the Kannada (ಕನ್ನಡ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Kannada uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kannada' from https://www.nuget.org/packages/IronOcr.Languages.Kannada/ to your Visual Studio project.<br />
            Alternatively download the "Kannada.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KannadaAlphabet">
            <summary>
            Kannada Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Kannada Alphabet (ಕನ್ನಡ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Kannada Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kannada' from https://www.nuget.org/packages/IronOcr.Languages.Kannada/ to your Visual Studio project.<br />
            Alternatively download the "Kannada.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KannadaAlphabetBest">
            <summary>
            Kannada Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Kannada Alphabet (ಕನ್ನಡ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Kannada Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kannada' from https://www.nuget.org/packages/IronOcr.Languages.Kannada/ to your Visual Studio project.<br />
            Alternatively download the "Kannada.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KannadaAlphabetFast">
            <summary>
            Kannada Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Kannada Alphabet (ಕನ್ನಡ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Kannada Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kannada' from https://www.nuget.org/packages/IronOcr.Languages.Kannada/ to your Visual Studio project.<br />
            Alternatively download the "Kannada.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Georgian">
            <summary>
            Georgian  OCR language. Performs OCR, reading documents of the Georgian (ქართული) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Georgian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianBest">
            <summary>
            Georgian  OCR language. Performs OCR, reading documents of the Georgian (ქართული) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Georgian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianFast">
            <summary>
            Georgian  OCR language. Performs OCR, reading documents of the Georgian (ქართული) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Georgian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianOld">
            <summary>
            Georgian Old  OCR language. Performs OCR, reading documents of the Georgian Old (ქართული) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Georgian Old uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianOldBest">
            <summary>
            Georgian Old  OCR language. Performs OCR, reading documents of the Georgian Old (ქართული) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Georgian Old uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.GeorgianOldFast">
            <summary>
            Georgian Old  OCR language. Performs OCR, reading documents of the Georgian Old (ქართული) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Georgian Old uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Georgian' from https://www.nuget.org/packages/IronOcr.Languages.Georgian/ to your Visual Studio project.<br />
            Alternatively download the "Georgian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Kazakh">
            <summary>
            Kazakh  OCR language. Performs OCR, reading documents of the Kazakh (қазақ тілі) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Kazakh uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kazakh' from https://www.nuget.org/packages/IronOcr.Languages.Kazakh/ to your Visual Studio project.<br />
            Alternatively download the "Kazakh.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KazakhBest">
            <summary>
            Kazakh  OCR language. Performs OCR, reading documents of the Kazakh (қазақ тілі) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Kazakh uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kazakh' from https://www.nuget.org/packages/IronOcr.Languages.Kazakh/ to your Visual Studio project.<br />
            Alternatively download the "Kazakh.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KazakhFast">
            <summary>
            Kazakh  OCR language. Performs OCR, reading documents of the Kazakh (қазақ тілі) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Kazakh uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kazakh' from https://www.nuget.org/packages/IronOcr.Languages.Kazakh/ to your Visual Studio project.<br />
            Alternatively download the "Kazakh.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Khmer">
            <summary>
            Khmer  OCR language. Performs OCR, reading documents of the Khmer (ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Khmer uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Khmer' from https://www.nuget.org/packages/IronOcr.Languages.Khmer/ to your Visual Studio project.<br />
            Alternatively download the "Khmer.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KhmerBest">
            <summary>
            Khmer  OCR language. Performs OCR, reading documents of the Khmer (ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Khmer uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Khmer' from https://www.nuget.org/packages/IronOcr.Languages.Khmer/ to your Visual Studio project.<br />
            Alternatively download the "Khmer.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KhmerFast">
            <summary>
            Khmer  OCR language. Performs OCR, reading documents of the Khmer (ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Khmer uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Khmer' from https://www.nuget.org/packages/IronOcr.Languages.Khmer/ to your Visual Studio project.<br />
            Alternatively download the "Khmer.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KhmerAlphabet">
            <summary>
            Khmer Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Khmer Alphabet (ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Khmer Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Khmer' from https://www.nuget.org/packages/IronOcr.Languages.Khmer/ to your Visual Studio project.<br />
            Alternatively download the "Khmer.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KhmerAlphabetBest">
            <summary>
            Khmer Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Khmer Alphabet (ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Khmer Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Khmer' from https://www.nuget.org/packages/IronOcr.Languages.Khmer/ to your Visual Studio project.<br />
            Alternatively download the "Khmer.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KhmerAlphabetFast">
            <summary>
            Khmer Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Khmer Alphabet (ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Khmer Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Khmer' from https://www.nuget.org/packages/IronOcr.Languages.Khmer/ to your Visual Studio project.<br />
            Alternatively download the "Khmer.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Kyrgyz">
            <summary>
            Kyrgyz  OCR language. Performs OCR, reading documents of the Kyrgyz (Кыргызча, Кыргыз тили) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Kyrgyz uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kyrgyz' from https://www.nuget.org/packages/IronOcr.Languages.Kyrgyz/ to your Visual Studio project.<br />
            Alternatively download the "Kyrgyz.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KyrgyzBest">
            <summary>
            Kyrgyz  OCR language. Performs OCR, reading documents of the Kyrgyz (Кыргызча, Кыргыз тили) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Kyrgyz uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kyrgyz' from https://www.nuget.org/packages/IronOcr.Languages.Kyrgyz/ to your Visual Studio project.<br />
            Alternatively download the "Kyrgyz.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KyrgyzFast">
            <summary>
            Kyrgyz  OCR language. Performs OCR, reading documents of the Kyrgyz (Кыргызча, Кыргыз тили) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Kyrgyz uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Kyrgyz' from https://www.nuget.org/packages/IronOcr.Languages.Kyrgyz/ to your Visual Studio project.<br />
            Alternatively download the "Kyrgyz.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.NorthernKurdish">
            <summary>
            Northern Kurdish  OCR language. Performs OCR, reading documents of the Northern Kurdish (Kurmanji, کورمانجی ,Kurmancî‎) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Northern Kurdish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.NorthernKurdish' from https://www.nuget.org/packages/IronOcr.Languages.NorthernKurdish/ to your Visual Studio project.<br />
            Alternatively download the "NorthernKurdish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.NorthernKurdishBest">
            <summary>
            Northern Kurdish  OCR language. Performs OCR, reading documents of the Northern Kurdish (Kurmanji, کورمانجی ,Kurmancî‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Northern Kurdish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.NorthernKurdish' from https://www.nuget.org/packages/IronOcr.Languages.NorthernKurdish/ to your Visual Studio project.<br />
            Alternatively download the "NorthernKurdish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.NorthernKurdishFast">
            <summary>
            Northern Kurdish  OCR language. Performs OCR, reading documents of the Northern Kurdish (Kurmanji, کورمانجی ,Kurmancî‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Northern Kurdish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.NorthernKurdish' from https://www.nuget.org/packages/IronOcr.Languages.NorthernKurdish/ to your Visual Studio project.<br />
            Alternatively download the "NorthernKurdish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Korean">
            <summary>
            Korean  OCR language. Performs OCR, reading documents of the Korean [한국어 (韓國語), 조선어 (朝鮮語)] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Korean uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Korean' from https://www.nuget.org/packages/IronOcr.Languages.Korean/ to your Visual Studio project.<br />
            Alternatively download the "Korean.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KoreanBest">
            <summary>
            Korean  OCR language. Performs OCR, reading documents of the Korean [한국어 (韓國語), 조선어 (朝鮮語)] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Korean uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Korean' from https://www.nuget.org/packages/IronOcr.Languages.Korean/ to your Visual Studio project.<br />
            Alternatively download the "Korean.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KoreanFast">
            <summary>
            Korean  OCR language. Performs OCR, reading documents of the Korean [한국어 (韓國語), 조선어 (朝鮮語)] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Korean uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Korean' from https://www.nuget.org/packages/IronOcr.Languages.Korean/ to your Visual Studio project.<br />
            Alternatively download the "Korean.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KoreanVertical">
            <summary>
            Korean Vertical  OCR language. Performs OCR, reading documents of the Korean Vertical [한국어 (韓國語), 조선어 (朝鮮語)] language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Korean Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Korean' from https://www.nuget.org/packages/IronOcr.Languages.Korean/ to your Visual Studio project.<br />
            Alternatively download the "Korean.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KoreanVerticalBest">
            <summary>
            Korean Vertical  OCR language. Performs OCR, reading documents of the Korean Vertical [한국어 (韓國語), 조선어 (朝鮮語)] language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Korean Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Korean' from https://www.nuget.org/packages/IronOcr.Languages.Korean/ to your Visual Studio project.<br />
            Alternatively download the "Korean.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.KoreanVerticalFast">
            <summary>
            Korean Vertical  OCR language. Performs OCR, reading documents of the Korean Vertical [한국어 (韓國語), 조선어 (朝鮮語)] language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Korean Vertical uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Korean' from https://www.nuget.org/packages/IronOcr.Languages.Korean/ to your Visual Studio project.<br />
            Alternatively download the "Korean.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Lao">
            <summary>
            Lao  OCR language. Performs OCR, reading documents of the Lao (ພາສາລາວ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Lao uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lao' from https://www.nuget.org/packages/IronOcr.Languages.Lao/ to your Visual Studio project.<br />
            Alternatively download the "Lao.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LaoBest">
            <summary>
            Lao  OCR language. Performs OCR, reading documents of the Lao (ພາສາລາວ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Lao uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lao' from https://www.nuget.org/packages/IronOcr.Languages.Lao/ to your Visual Studio project.<br />
            Alternatively download the "Lao.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LaoFast">
            <summary>
            Lao  OCR language. Performs OCR, reading documents of the Lao (ພາສາລາວ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Lao uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lao' from https://www.nuget.org/packages/IronOcr.Languages.Lao/ to your Visual Studio project.<br />
            Alternatively download the "Lao.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LaoAlphabet">
            <summary>
            Lao Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Lao Alphabet (ພາສາລາວ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Lao Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lao' from https://www.nuget.org/packages/IronOcr.Languages.Lao/ to your Visual Studio project.<br />
            Alternatively download the "Lao.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LaoAlphabetBest">
            <summary>
            Lao Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Lao Alphabet (ພາສາລາວ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Lao Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lao' from https://www.nuget.org/packages/IronOcr.Languages.Lao/ to your Visual Studio project.<br />
            Alternatively download the "Lao.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LaoAlphabetFast">
            <summary>
            Lao Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Lao Alphabet (ພາສາລາວ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Lao Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lao' from https://www.nuget.org/packages/IronOcr.Languages.Lao/ to your Visual Studio project.<br />
            Alternatively download the "Lao.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Latin">
            <summary>
            Latin  OCR language. Performs OCR, reading documents of the Latin (latine, lingua latina) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Latin uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Latin' from https://www.nuget.org/packages/IronOcr.Languages.Latin/ to your Visual Studio project.<br />
            Alternatively download the "Latin.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LatinBest">
            <summary>
            Latin  OCR language. Performs OCR, reading documents of the Latin (latine, lingua latina) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Latin uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Latin' from https://www.nuget.org/packages/IronOcr.Languages.Latin/ to your Visual Studio project.<br />
            Alternatively download the "Latin.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LatinFast">
            <summary>
            Latin  OCR language. Performs OCR, reading documents of the Latin (latine, lingua latina) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Latin uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Latin' from https://www.nuget.org/packages/IronOcr.Languages.Latin/ to your Visual Studio project.<br />
            Alternatively download the "Latin.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LatinAlphabet">
            <summary>
            Latin Alphabetic Script  OCR dictionary. Reads the letters of the Latin / Romain / 'English' alphabet as is commonly used in English and other European languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Latin Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.LatinAlphabet' from https://www.nuget.org/packages/IronOcr.Languages.LatinAlphabet/ to your Visual Studio project.<br />
            Alternatively download the "LatinAlphabet.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LatinAlphabetBest">
            <summary>
            Latin Alphabetic Script  OCR dictionary. Reads the letters of the Latin / Romain / 'English' alphabet as is commonly used in English and other European languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Latin Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.LatinAlphabet' from https://www.nuget.org/packages/IronOcr.Languages.LatinAlphabet/ to your Visual Studio project.<br />
            Alternatively download the "LatinAlphabet.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LatinAlphabetFast">
            <summary>
            Latin Alphabetic Script  OCR dictionary. Reads the letters of the Latin / Romain / 'English' alphabet as is commonly used in English and other European languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Latin Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.LatinAlphabet' from https://www.nuget.org/packages/IronOcr.Languages.LatinAlphabet/ to your Visual Studio project.<br />
            Alternatively download the "LatinAlphabet.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Latvian">
            <summary>
            Latvian  OCR language. Performs OCR, reading documents of the Latvian (latviešu valoda) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Latvian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Latvian' from https://www.nuget.org/packages/IronOcr.Languages.Latvian/ to your Visual Studio project.<br />
            Alternatively download the "Latvian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LatvianBest">
            <summary>
            Latvian  OCR language. Performs OCR, reading documents of the Latvian (latviešu valoda) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Latvian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Latvian' from https://www.nuget.org/packages/IronOcr.Languages.Latvian/ to your Visual Studio project.<br />
            Alternatively download the "Latvian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LatvianFast">
            <summary>
            Latvian  OCR language. Performs OCR, reading documents of the Latvian (latviešu valoda) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Latvian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Latvian' from https://www.nuget.org/packages/IronOcr.Languages.Latvian/ to your Visual Studio project.<br />
            Alternatively download the "Latvian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Lithuanian">
            <summary>
            Lithuanian  OCR language. Performs OCR, reading documents of the Lithuanian (lietuvių kalba) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Lithuanian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lithuanian' from https://www.nuget.org/packages/IronOcr.Languages.Lithuanian/ to your Visual Studio project.<br />
            Alternatively download the "Lithuanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LithuanianBest">
            <summary>
            Lithuanian  OCR language. Performs OCR, reading documents of the Lithuanian (lietuvių kalba) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Lithuanian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lithuanian' from https://www.nuget.org/packages/IronOcr.Languages.Lithuanian/ to your Visual Studio project.<br />
            Alternatively download the "Lithuanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LithuanianFast">
            <summary>
            Lithuanian  OCR language. Performs OCR, reading documents of the Lithuanian (lietuvių kalba) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Lithuanian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Lithuanian' from https://www.nuget.org/packages/IronOcr.Languages.Lithuanian/ to your Visual Studio project.<br />
            Alternatively download the "Lithuanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Luxembourgish">
            <summary>
            Luxembourgish  OCR language. Performs OCR, reading documents of the Luxembourgish (Lëtzebuergesch) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Luxembourgish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Luxembourgish' from https://www.nuget.org/packages/IronOcr.Languages.Luxembourgish/ to your Visual Studio project.<br />
            Alternatively download the "Luxembourgish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LuxembourgishBest">
            <summary>
            Luxembourgish  OCR language. Performs OCR, reading documents of the Luxembourgish (Lëtzebuergesch) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Luxembourgish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Luxembourgish' from https://www.nuget.org/packages/IronOcr.Languages.Luxembourgish/ to your Visual Studio project.<br />
            Alternatively download the "Luxembourgish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.LuxembourgishFast">
            <summary>
            Luxembourgish  OCR language. Performs OCR, reading documents of the Luxembourgish (Lëtzebuergesch) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Luxembourgish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Luxembourgish' from https://www.nuget.org/packages/IronOcr.Languages.Luxembourgish/ to your Visual Studio project.<br />
            Alternatively download the "Luxembourgish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Malayalam">
            <summary>
            Malayalam  OCR language. Performs OCR, reading documents of the Malayalam (മലയാളം) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Malayalam uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malayalam' from https://www.nuget.org/packages/IronOcr.Languages.Malayalam/ to your Visual Studio project.<br />
            Alternatively download the "Malayalam.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalayalamBest">
            <summary>
            Malayalam  OCR language. Performs OCR, reading documents of the Malayalam (മലയാളം) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Malayalam uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malayalam' from https://www.nuget.org/packages/IronOcr.Languages.Malayalam/ to your Visual Studio project.<br />
            Alternatively download the "Malayalam.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalayalamFast">
            <summary>
            Malayalam  OCR language. Performs OCR, reading documents of the Malayalam (മലയാളം) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Malayalam uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malayalam' from https://www.nuget.org/packages/IronOcr.Languages.Malayalam/ to your Visual Studio project.<br />
            Alternatively download the "Malayalam.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalayalamAlphabet">
            <summary>
            Malayalam Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Malayalam Alphabet (മലയാളം) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Malayalam Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malayalam' from https://www.nuget.org/packages/IronOcr.Languages.Malayalam/ to your Visual Studio project.<br />
            Alternatively download the "Malayalam.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalayalamAlphabetBest">
            <summary>
            Malayalam Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Malayalam Alphabet (മലയാളം) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Malayalam Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malayalam' from https://www.nuget.org/packages/IronOcr.Languages.Malayalam/ to your Visual Studio project.<br />
            Alternatively download the "Malayalam.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalayalamAlphabetFast">
            <summary>
            Malayalam Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Malayalam Alphabet (മലയാളം) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Malayalam Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malayalam' from https://www.nuget.org/packages/IronOcr.Languages.Malayalam/ to your Visual Studio project.<br />
            Alternatively download the "Malayalam.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Marathi">
            <summary>
            Marathi  OCR language. Performs OCR, reading documents of the Marathi (मराठी) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Marathi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Marathi' from https://www.nuget.org/packages/IronOcr.Languages.Marathi/ to your Visual Studio project.<br />
            Alternatively download the "Marathi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MarathiBest">
            <summary>
            Marathi  OCR language. Performs OCR, reading documents of the Marathi (मराठी) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Marathi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Marathi' from https://www.nuget.org/packages/IronOcr.Languages.Marathi/ to your Visual Studio project.<br />
            Alternatively download the "Marathi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MarathiFast">
            <summary>
            Marathi  OCR language. Performs OCR, reading documents of the Marathi (मराठी) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Marathi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Marathi' from https://www.nuget.org/packages/IronOcr.Languages.Marathi/ to your Visual Studio project.<br />
            Alternatively download the "Marathi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MICR">
            <summary>
            MICR  OCR language. Performs OCR, reading documents of the MICR (Magnetic Ink Character Recognition, MICR Cheque Encoding) language with an understanding of spelling and linguistic context. 
            <para>This MICR OCR language pack  uses only an OEM (shape recognition evolved from Tesseract 3) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.MICR' from https://www.nuget.org/packages/IronOcr.Languages.MICR/ to your Visual Studio project.<br />
            Alternatively download the "MICR.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Macedonian">
            <summary>
            Macedonian  OCR language. Performs OCR, reading documents of the Macedonian (македонски јазик) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Macedonian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Macedonian' from https://www.nuget.org/packages/IronOcr.Languages.Macedonian/ to your Visual Studio project.<br />
            Alternatively download the "Macedonian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MacedonianBest">
            <summary>
            Macedonian  OCR language. Performs OCR, reading documents of the Macedonian (македонски јазик) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Macedonian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Macedonian' from https://www.nuget.org/packages/IronOcr.Languages.Macedonian/ to your Visual Studio project.<br />
            Alternatively download the "Macedonian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MacedonianFast">
            <summary>
            Macedonian  OCR language. Performs OCR, reading documents of the Macedonian (македонски јазик) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Macedonian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Macedonian' from https://www.nuget.org/packages/IronOcr.Languages.Macedonian/ to your Visual Studio project.<br />
            Alternatively download the "Macedonian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Maltese">
            <summary>
            Maltese  OCR language. Performs OCR, reading documents of the Maltese (Malti) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Maltese uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Maltese' from https://www.nuget.org/packages/IronOcr.Languages.Maltese/ to your Visual Studio project.<br />
            Alternatively download the "Maltese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalteseBest">
            <summary>
            Maltese  OCR language. Performs OCR, reading documents of the Maltese (Malti) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Maltese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Maltese' from https://www.nuget.org/packages/IronOcr.Languages.Maltese/ to your Visual Studio project.<br />
            Alternatively download the "Maltese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalteseFast">
            <summary>
            Maltese  OCR language. Performs OCR, reading documents of the Maltese (Malti) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Maltese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Maltese' from https://www.nuget.org/packages/IronOcr.Languages.Maltese/ to your Visual Studio project.<br />
            Alternatively download the "Maltese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Mongolian">
            <summary>
            Mongolian  OCR language. Performs OCR, reading documents of the Mongolian (монгол) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Mongolian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Mongolian' from https://www.nuget.org/packages/IronOcr.Languages.Mongolian/ to your Visual Studio project.<br />
            Alternatively download the "Mongolian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MongolianBest">
            <summary>
            Mongolian  OCR language. Performs OCR, reading documents of the Mongolian (монгол) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Mongolian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Mongolian' from https://www.nuget.org/packages/IronOcr.Languages.Mongolian/ to your Visual Studio project.<br />
            Alternatively download the "Mongolian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MongolianFast">
            <summary>
            Mongolian  OCR language. Performs OCR, reading documents of the Mongolian (монгол) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Mongolian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Mongolian' from https://www.nuget.org/packages/IronOcr.Languages.Mongolian/ to your Visual Studio project.<br />
            Alternatively download the "Mongolian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Maori">
            <summary>
            Maori  OCR language. Performs OCR, reading documents of the Maori (te reo Māori) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Maori uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Maori' from https://www.nuget.org/packages/IronOcr.Languages.Maori/ to your Visual Studio project.<br />
            Alternatively download the "Maori.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MaoriBest">
            <summary>
            Maori  OCR language. Performs OCR, reading documents of the Maori (te reo Māori) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Maori uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Maori' from https://www.nuget.org/packages/IronOcr.Languages.Maori/ to your Visual Studio project.<br />
            Alternatively download the "Maori.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MaoriFast">
            <summary>
            Maori  OCR language. Performs OCR, reading documents of the Maori (te reo Māori) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Maori uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Maori' from https://www.nuget.org/packages/IronOcr.Languages.Maori/ to your Visual Studio project.<br />
            Alternatively download the "Maori.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Malay">
            <summary>
            Malay  OCR language. Performs OCR, reading documents of the Malay (bahasa Melayu, بهاس ملايو‎) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Malay uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malay' from https://www.nuget.org/packages/IronOcr.Languages.Malay/ to your Visual Studio project.<br />
            Alternatively download the "Malay.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalayBest">
            <summary>
            Malay  OCR language. Performs OCR, reading documents of the Malay (bahasa Melayu, بهاس ملايو‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Malay uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malay' from https://www.nuget.org/packages/IronOcr.Languages.Malay/ to your Visual Studio project.<br />
            Alternatively download the "Malay.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MalayFast">
            <summary>
            Malay  OCR language. Performs OCR, reading documents of the Malay (bahasa Melayu, بهاس ملايو‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Malay uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Malay' from https://www.nuget.org/packages/IronOcr.Languages.Malay/ to your Visual Studio project.<br />
            Alternatively download the "Malay.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Myanmar">
            <summary>
            Myanmar  OCR language. Performs OCR, reading documents of the Myanmar (Burmese ,ဗမာစာ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Myanmar uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Myanmar' from https://www.nuget.org/packages/IronOcr.Languages.Myanmar/ to your Visual Studio project.<br />
            Alternatively download the "Myanmar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MyanmarBest">
            <summary>
            Myanmar  OCR language. Performs OCR, reading documents of the Myanmar (Burmese ,ဗမာစာ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Myanmar uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Myanmar' from https://www.nuget.org/packages/IronOcr.Languages.Myanmar/ to your Visual Studio project.<br />
            Alternatively download the "Myanmar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MyanmarFast">
            <summary>
            Myanmar  OCR language. Performs OCR, reading documents of the Myanmar (Burmese ,ဗမာစာ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Myanmar uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Myanmar' from https://www.nuget.org/packages/IronOcr.Languages.Myanmar/ to your Visual Studio project.<br />
            Alternatively download the "Myanmar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MyanmarAlphabet">
            <summary>
            Myanmar Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Myanmar Alphabet (Burmese ,ဗမာစာ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Myanmar Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Myanmar' from https://www.nuget.org/packages/IronOcr.Languages.Myanmar/ to your Visual Studio project.<br />
            Alternatively download the "Myanmar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MyanmarAlphabetBest">
            <summary>
            Myanmar Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Myanmar Alphabet (Burmese ,ဗမာစာ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Myanmar Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Myanmar' from https://www.nuget.org/packages/IronOcr.Languages.Myanmar/ to your Visual Studio project.<br />
            Alternatively download the "Myanmar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.MyanmarAlphabetFast">
            <summary>
            Myanmar Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Myanmar Alphabet (Burmese ,ဗမာစာ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Myanmar Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Myanmar' from https://www.nuget.org/packages/IronOcr.Languages.Myanmar/ to your Visual Studio project.<br />
            Alternatively download the "Myanmar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Nepali">
            <summary>
            Nepali  OCR language. Performs OCR, reading documents of the Nepali (नेपाली) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Nepali uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Nepali' from https://www.nuget.org/packages/IronOcr.Languages.Nepali/ to your Visual Studio project.<br />
            Alternatively download the "Nepali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.NepaliBest">
            <summary>
            Nepali  OCR language. Performs OCR, reading documents of the Nepali (नेपाली) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Nepali uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Nepali' from https://www.nuget.org/packages/IronOcr.Languages.Nepali/ to your Visual Studio project.<br />
            Alternatively download the "Nepali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.NepaliFast">
            <summary>
            Nepali  OCR language. Performs OCR, reading documents of the Nepali (नेपाली) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Nepali uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Nepali' from https://www.nuget.org/packages/IronOcr.Languages.Nepali/ to your Visual Studio project.<br />
            Alternatively download the "Nepali.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Dutch">
            <summary>
            Dutch  OCR language. Performs OCR, reading documents of the Dutch (Nederlands, Vlaams) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Dutch uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Dutch' from https://www.nuget.org/packages/IronOcr.Languages.Dutch/ to your Visual Studio project.<br />
            Alternatively download the "Dutch.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DutchBest">
            <summary>
            Dutch  OCR language. Performs OCR, reading documents of the Dutch (Nederlands, Vlaams) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Dutch uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Dutch' from https://www.nuget.org/packages/IronOcr.Languages.Dutch/ to your Visual Studio project.<br />
            Alternatively download the "Dutch.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.DutchFast">
            <summary>
            Dutch  OCR language. Performs OCR, reading documents of the Dutch (Nederlands, Vlaams) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Dutch uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Dutch' from https://www.nuget.org/packages/IronOcr.Languages.Dutch/ to your Visual Studio project.<br />
            Alternatively download the "Dutch.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Norwegian">
            <summary>
            Norwegian  OCR language. Performs OCR, reading documents of the Norwegian (Norsk) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Norwegian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Norwegian' from https://www.nuget.org/packages/IronOcr.Languages.Norwegian/ to your Visual Studio project.<br />
            Alternatively download the "Norwegian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.NorwegianBest">
            <summary>
            Norwegian  OCR language. Performs OCR, reading documents of the Norwegian (Norsk) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Norwegian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Norwegian' from https://www.nuget.org/packages/IronOcr.Languages.Norwegian/ to your Visual Studio project.<br />
            Alternatively download the "Norwegian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.NorwegianFast">
            <summary>
            Norwegian  OCR language. Performs OCR, reading documents of the Norwegian (Norsk) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Norwegian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Norwegian' from https://www.nuget.org/packages/IronOcr.Languages.Norwegian/ to your Visual Studio project.<br />
            Alternatively download the "Norwegian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Occitan">
            <summary>
            Occitan  OCR language. Performs OCR, reading documents of the Occitan (occitan, lenga d'òc) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Occitan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Occitan' from https://www.nuget.org/packages/IronOcr.Languages.Occitan/ to your Visual Studio project.<br />
            Alternatively download the "Occitan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.OccitanBest">
            <summary>
            Occitan  OCR language. Performs OCR, reading documents of the Occitan (occitan, lenga d'òc) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Occitan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Occitan' from https://www.nuget.org/packages/IronOcr.Languages.Occitan/ to your Visual Studio project.<br />
            Alternatively download the "Occitan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.OccitanFast">
            <summary>
            Occitan  OCR language. Performs OCR, reading documents of the Occitan (occitan, lenga d'òc) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Occitan uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Occitan' from https://www.nuget.org/packages/IronOcr.Languages.Occitan/ to your Visual Studio project.<br />
            Alternatively download the "Occitan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Oriya">
            <summary>
            Oriya  OCR language. Performs OCR, reading documents of the Oriya (ଓଡ଼ିଆ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Oriya uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Oriya' from https://www.nuget.org/packages/IronOcr.Languages.Oriya/ to your Visual Studio project.<br />
            Alternatively download the "Oriya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.OriyaBest">
            <summary>
            Oriya  OCR language. Performs OCR, reading documents of the Oriya (ଓଡ଼ିଆ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Oriya uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Oriya' from https://www.nuget.org/packages/IronOcr.Languages.Oriya/ to your Visual Studio project.<br />
            Alternatively download the "Oriya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.OriyaFast">
            <summary>
            Oriya  OCR language. Performs OCR, reading documents of the Oriya (ଓଡ଼ିଆ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Oriya uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Oriya' from https://www.nuget.org/packages/IronOcr.Languages.Oriya/ to your Visual Studio project.<br />
            Alternatively download the "Oriya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.OriyaAlphabet">
            <summary>
            Oriya Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Oriya Alphabet (ଓଡ଼ିଆ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Oriya Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Oriya' from https://www.nuget.org/packages/IronOcr.Languages.Oriya/ to your Visual Studio project.<br />
            Alternatively download the "Oriya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.OriyaAlphabetBest">
            <summary>
            Oriya Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Oriya Alphabet (ଓଡ଼ିଆ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Oriya Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Oriya' from https://www.nuget.org/packages/IronOcr.Languages.Oriya/ to your Visual Studio project.<br />
            Alternatively download the "Oriya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.OriyaAlphabetFast">
            <summary>
            Oriya Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Oriya Alphabet (ଓଡ଼ିଆ) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Oriya Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Oriya' from https://www.nuget.org/packages/IronOcr.Languages.Oriya/ to your Visual Studio project.<br />
            Alternatively download the "Oriya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Panjabi">
            <summary>
            Panjabi  OCR language. Performs OCR, reading documents of the Panjabi (ਪੰਜਾਬੀ, پنجابی‎) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Panjabi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Panjabi' from https://www.nuget.org/packages/IronOcr.Languages.Panjabi/ to your Visual Studio project.<br />
            Alternatively download the "Panjabi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PanjabiBest">
            <summary>
            Panjabi  OCR language. Performs OCR, reading documents of the Panjabi (ਪੰਜਾਬੀ, پنجابی‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Panjabi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Panjabi' from https://www.nuget.org/packages/IronOcr.Languages.Panjabi/ to your Visual Studio project.<br />
            Alternatively download the "Panjabi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PanjabiFast">
            <summary>
            Panjabi  OCR language. Performs OCR, reading documents of the Panjabi (ਪੰਜਾਬੀ, پنجابی‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Panjabi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Panjabi' from https://www.nuget.org/packages/IronOcr.Languages.Panjabi/ to your Visual Studio project.<br />
            Alternatively download the "Panjabi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Polish">
            <summary>
            Polish  OCR language. Performs OCR, reading documents of the Polish (język polski, polszczyzna) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Polish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Polish' from https://www.nuget.org/packages/IronOcr.Languages.Polish/ to your Visual Studio project.<br />
            Alternatively download the "Polish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PolishBest">
            <summary>
            Polish  OCR language. Performs OCR, reading documents of the Polish (język polski, polszczyzna) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Polish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Polish' from https://www.nuget.org/packages/IronOcr.Languages.Polish/ to your Visual Studio project.<br />
            Alternatively download the "Polish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PolishFast">
            <summary>
            Polish  OCR language. Performs OCR, reading documents of the Polish (język polski, polszczyzna) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Polish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Polish' from https://www.nuget.org/packages/IronOcr.Languages.Polish/ to your Visual Studio project.<br />
            Alternatively download the "Polish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Portuguese">
            <summary>
            Portuguese  OCR language. Performs OCR, reading documents of the Portuguese (português) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Portuguese uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Portuguese' from https://www.nuget.org/packages/IronOcr.Languages.Portuguese/ to your Visual Studio project.<br />
            Alternatively download the "Portuguese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PortugueseBest">
            <summary>
            Portuguese  OCR language. Performs OCR, reading documents of the Portuguese (português) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Portuguese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Portuguese' from https://www.nuget.org/packages/IronOcr.Languages.Portuguese/ to your Visual Studio project.<br />
            Alternatively download the "Portuguese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PortugueseFast">
            <summary>
            Portuguese  OCR language. Performs OCR, reading documents of the Portuguese (português) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Portuguese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Portuguese' from https://www.nuget.org/packages/IronOcr.Languages.Portuguese/ to your Visual Studio project.<br />
            Alternatively download the "Portuguese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Pashto">
            <summary>
            Pashto  OCR language. Performs OCR, reading documents of the Pashto (پښتو) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Pashto uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Pashto' from https://www.nuget.org/packages/IronOcr.Languages.Pashto/ to your Visual Studio project.<br />
            Alternatively download the "Pashto.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PashtoBest">
            <summary>
            Pashto  OCR language. Performs OCR, reading documents of the Pashto (پښتو) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Pashto uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Pashto' from https://www.nuget.org/packages/IronOcr.Languages.Pashto/ to your Visual Studio project.<br />
            Alternatively download the "Pashto.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.PashtoFast">
            <summary>
            Pashto  OCR language. Performs OCR, reading documents of the Pashto (پښتو) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Pashto uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Pashto' from https://www.nuget.org/packages/IronOcr.Languages.Pashto/ to your Visual Studio project.<br />
            Alternatively download the "Pashto.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Quechua">
            <summary>
            Quechua  OCR language. Performs OCR, reading documents of the Quechua (Runa Simi, Kichwa) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Quechua uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Quechua' from https://www.nuget.org/packages/IronOcr.Languages.Quechua/ to your Visual Studio project.<br />
            Alternatively download the "Quechua.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.QuechuaBest">
            <summary>
            Quechua  OCR language. Performs OCR, reading documents of the Quechua (Runa Simi, Kichwa) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Quechua uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Quechua' from https://www.nuget.org/packages/IronOcr.Languages.Quechua/ to your Visual Studio project.<br />
            Alternatively download the "Quechua.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.QuechuaFast">
            <summary>
            Quechua  OCR language. Performs OCR, reading documents of the Quechua (Runa Simi, Kichwa) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Quechua uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Quechua' from https://www.nuget.org/packages/IronOcr.Languages.Quechua/ to your Visual Studio project.<br />
            Alternatively download the "Quechua.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Romanian">
            <summary>
            Romanian  OCR language. Performs OCR, reading documents of the Romanian (limba română) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Romanian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Romanian' from https://www.nuget.org/packages/IronOcr.Languages.Romanian/ to your Visual Studio project.<br />
            Alternatively download the "Romanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.RomanianBest">
            <summary>
            Romanian  OCR language. Performs OCR, reading documents of the Romanian (limba română) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Romanian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Romanian' from https://www.nuget.org/packages/IronOcr.Languages.Romanian/ to your Visual Studio project.<br />
            Alternatively download the "Romanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.RomanianFast">
            <summary>
            Romanian  OCR language. Performs OCR, reading documents of the Romanian (limba română) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Romanian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Romanian' from https://www.nuget.org/packages/IronOcr.Languages.Romanian/ to your Visual Studio project.<br />
            Alternatively download the "Romanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Russian">
            <summary>
            Russian  OCR language. Performs OCR, reading documents of the Russian (русский язык) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Russian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Russian' from https://www.nuget.org/packages/IronOcr.Languages.Russian/ to your Visual Studio project.<br />
            Alternatively download the "Russian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.RussianBest">
            <summary>
            Russian  OCR language. Performs OCR, reading documents of the Russian (русский язык) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Russian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Russian' from https://www.nuget.org/packages/IronOcr.Languages.Russian/ to your Visual Studio project.<br />
            Alternatively download the "Russian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.RussianFast">
            <summary>
            Russian  OCR language. Performs OCR, reading documents of the Russian (русский язык) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Russian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Russian' from https://www.nuget.org/packages/IronOcr.Languages.Russian/ to your Visual Studio project.<br />
            Alternatively download the "Russian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Sanskrit">
            <summary>
            Sanskrit  OCR language. Performs OCR, reading documents of the Sanskrit (संस्कृतम्) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Sanskrit uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sanskrit' from https://www.nuget.org/packages/IronOcr.Languages.Sanskrit/ to your Visual Studio project.<br />
            Alternatively download the "Sanskrit.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SanskritBest">
            <summary>
            Sanskrit  OCR language. Performs OCR, reading documents of the Sanskrit (संस्कृतम्) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Sanskrit uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sanskrit' from https://www.nuget.org/packages/IronOcr.Languages.Sanskrit/ to your Visual Studio project.<br />
            Alternatively download the "Sanskrit.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SanskritFast">
            <summary>
            Sanskrit  OCR language. Performs OCR, reading documents of the Sanskrit (संस्कृतम्) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Sanskrit uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sanskrit' from https://www.nuget.org/packages/IronOcr.Languages.Sanskrit/ to your Visual Studio project.<br />
            Alternatively download the "Sanskrit.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Sinhala">
            <summary>
            Sinhala  OCR language. Performs OCR, reading documents of the Sinhala (සිංහල) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Sinhala uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sinhala' from https://www.nuget.org/packages/IronOcr.Languages.Sinhala/ to your Visual Studio project.<br />
            Alternatively download the "Sinhala.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SinhalaBest">
            <summary>
            Sinhala  OCR language. Performs OCR, reading documents of the Sinhala (සිංහල) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Sinhala uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sinhala' from https://www.nuget.org/packages/IronOcr.Languages.Sinhala/ to your Visual Studio project.<br />
            Alternatively download the "Sinhala.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SinhalaFast">
            <summary>
            Sinhala  OCR language. Performs OCR, reading documents of the Sinhala (සිංහල) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Sinhala uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sinhala' from https://www.nuget.org/packages/IronOcr.Languages.Sinhala/ to your Visual Studio project.<br />
            Alternatively download the "Sinhala.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SinhalaAlphabet">
            <summary>
            Sinhala Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Sinhala Alphabet (සිංහල) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Sinhala Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sinhala' from https://www.nuget.org/packages/IronOcr.Languages.Sinhala/ to your Visual Studio project.<br />
            Alternatively download the "Sinhala.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SinhalaAlphabetBest">
            <summary>
            Sinhala Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Sinhala Alphabet (සිංහල) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Sinhala Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sinhala' from https://www.nuget.org/packages/IronOcr.Languages.Sinhala/ to your Visual Studio project.<br />
            Alternatively download the "Sinhala.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SinhalaAlphabetFast">
            <summary>
            Sinhala Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Sinhala Alphabet (සිංහල) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Sinhala Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sinhala' from https://www.nuget.org/packages/IronOcr.Languages.Sinhala/ to your Visual Studio project.<br />
            Alternatively download the "Sinhala.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Slovak">
            <summary>
            Slovak  OCR language. Performs OCR, reading documents of the Slovak (slovenčina, slovenský jazyk) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Slovak uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Slovak' from https://www.nuget.org/packages/IronOcr.Languages.Slovak/ to your Visual Studio project.<br />
            Alternatively download the "Slovak.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SlovakBest">
            <summary>
            Slovak  OCR language. Performs OCR, reading documents of the Slovak (slovenčina, slovenský jazyk) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Slovak uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Slovak' from https://www.nuget.org/packages/IronOcr.Languages.Slovak/ to your Visual Studio project.<br />
            Alternatively download the "Slovak.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SlovakFast">
            <summary>
            Slovak  OCR language. Performs OCR, reading documents of the Slovak (slovenčina, slovenský jazyk) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Slovak uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Slovak' from https://www.nuget.org/packages/IronOcr.Languages.Slovak/ to your Visual Studio project.<br />
            Alternatively download the "Slovak.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SlovakFraktur">
            <summary>
            Slovak Fraktur  OCR language. Performs OCR, reading documents of the Slovak Fraktur (slovenčina, slovenský jazyk) language with an understanding of spelling and linguistic context. 
            <para>This Slovak Fraktur OCR language pack  uses only an OEM (shape recognition evolved from Tesseract 3) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Slovak' from https://www.nuget.org/packages/IronOcr.Languages.Slovak/ to your Visual Studio project.<br />
            Alternatively download the "Slovak.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Slovene">
            <summary>
            Slovene  OCR language. Performs OCR, reading documents of the Slovene (slovenski jezik, slovenščina) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Slovene uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Slovene' from https://www.nuget.org/packages/IronOcr.Languages.Slovene/ to your Visual Studio project.<br />
            Alternatively download the "Slovene.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SloveneBest">
            <summary>
            Slovene  OCR language. Performs OCR, reading documents of the Slovene (slovenski jezik, slovenščina) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Slovene uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Slovene' from https://www.nuget.org/packages/IronOcr.Languages.Slovene/ to your Visual Studio project.<br />
            Alternatively download the "Slovene.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SloveneFast">
            <summary>
            Slovene  OCR language. Performs OCR, reading documents of the Slovene (slovenski jezik, slovenščina) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Slovene uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Slovene' from https://www.nuget.org/packages/IronOcr.Languages.Slovene/ to your Visual Studio project.<br />
            Alternatively download the "Slovene.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Sindhi">
            <summary>
            Sindhi  OCR language. Performs OCR, reading documents of the Sindhi (सिन्धी, سنڌي، سندھی‎) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Sindhi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sindhi' from https://www.nuget.org/packages/IronOcr.Languages.Sindhi/ to your Visual Studio project.<br />
            Alternatively download the "Sindhi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SindhiBest">
            <summary>
            Sindhi  OCR language. Performs OCR, reading documents of the Sindhi (सिन्धी, سنڌي، سندھی‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Sindhi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sindhi' from https://www.nuget.org/packages/IronOcr.Languages.Sindhi/ to your Visual Studio project.<br />
            Alternatively download the "Sindhi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SindhiFast">
            <summary>
            Sindhi  OCR language. Performs OCR, reading documents of the Sindhi (सिन्धी, سنڌي، سندھی‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Sindhi uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sindhi' from https://www.nuget.org/packages/IronOcr.Languages.Sindhi/ to your Visual Studio project.<br />
            Alternatively download the "Sindhi.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Spanish">
            <summary>
            Spanish  OCR language. Performs OCR, reading documents of the Spanish (español, castellano) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Spanish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Spanish' from https://www.nuget.org/packages/IronOcr.Languages.Spanish/ to your Visual Studio project.<br />
            Alternatively download the "Spanish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SpanishBest">
            <summary>
            Spanish  OCR language. Performs OCR, reading documents of the Spanish (español, castellano) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Spanish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Spanish' from https://www.nuget.org/packages/IronOcr.Languages.Spanish/ to your Visual Studio project.<br />
            Alternatively download the "Spanish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SpanishFast">
            <summary>
            Spanish  OCR language. Performs OCR, reading documents of the Spanish (español, castellano) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Spanish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Spanish' from https://www.nuget.org/packages/IronOcr.Languages.Spanish/ to your Visual Studio project.<br />
            Alternatively download the "Spanish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SpanishOld">
            <summary>
            Spanish Old  OCR language. Performs OCR, reading documents of the Spanish Old (español, castellano) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Spanish Old uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Spanish' from https://www.nuget.org/packages/IronOcr.Languages.Spanish/ to your Visual Studio project.<br />
            Alternatively download the "Spanish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SpanishOldBest">
            <summary>
            Spanish Old  OCR language. Performs OCR, reading documents of the Spanish Old (español, castellano) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Spanish Old uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Spanish' from https://www.nuget.org/packages/IronOcr.Languages.Spanish/ to your Visual Studio project.<br />
            Alternatively download the "Spanish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SpanishOldFast">
            <summary>
            Spanish Old  OCR language. Performs OCR, reading documents of the Spanish Old (español, castellano) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Spanish Old uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Spanish' from https://www.nuget.org/packages/IronOcr.Languages.Spanish/ to your Visual Studio project.<br />
            Alternatively download the "Spanish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Albanian">
            <summary>
            Albanian  OCR language. Performs OCR, reading documents of the Albanian (gjuha shqipe) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Albanian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Albanian' from https://www.nuget.org/packages/IronOcr.Languages.Albanian/ to your Visual Studio project.<br />
            Alternatively download the "Albanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AlbanianBest">
            <summary>
            Albanian  OCR language. Performs OCR, reading documents of the Albanian (gjuha shqipe) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Albanian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Albanian' from https://www.nuget.org/packages/IronOcr.Languages.Albanian/ to your Visual Studio project.<br />
            Alternatively download the "Albanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.AlbanianFast">
            <summary>
            Albanian  OCR language. Performs OCR, reading documents of the Albanian (gjuha shqipe) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Albanian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Albanian' from https://www.nuget.org/packages/IronOcr.Languages.Albanian/ to your Visual Studio project.<br />
            Alternatively download the "Albanian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Serbian">
            <summary>
            Serbian  OCR language. Performs OCR, reading documents of the Serbian (српски језик) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Serbian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Serbian' from https://www.nuget.org/packages/IronOcr.Languages.Serbian/ to your Visual Studio project.<br />
            Alternatively download the "Serbian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SerbianBest">
            <summary>
            Serbian  OCR language. Performs OCR, reading documents of the Serbian (српски језик) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Serbian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Serbian' from https://www.nuget.org/packages/IronOcr.Languages.Serbian/ to your Visual Studio project.<br />
            Alternatively download the "Serbian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SerbianFast">
            <summary>
            Serbian  OCR language. Performs OCR, reading documents of the Serbian (српски језик) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Serbian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Serbian' from https://www.nuget.org/packages/IronOcr.Languages.Serbian/ to your Visual Studio project.<br />
            Alternatively download the "Serbian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SerbianLatin">
            <summary>
            Serbian Latin  OCR language. Performs OCR, reading documents of the Serbian (српски језик) language , using the Latin alphabet (abc...), with an understanding of spelling and linguistic context. 
            <para>This Default variant of Serbian Latin uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Serbian' from https://www.nuget.org/packages/IronOcr.Languages.Serbian/ to your Visual Studio project.<br />
            Alternatively download the "Serbian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SerbianLatinBest">
            <summary>
            Serbian Latin  OCR language. Performs OCR, reading documents of the Serbian (српски језик) language , using the Latin alphabet (abc...), with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Serbian Latin uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Serbian' from https://www.nuget.org/packages/IronOcr.Languages.Serbian/ to your Visual Studio project.<br />
            Alternatively download the "Serbian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SerbianLatinFast">
            <summary>
            Serbian Latin  OCR language. Performs OCR, reading documents of the Serbian (српски језик) language , using the Latin alphabet (abc...), with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Serbian Latin uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Serbian' from https://www.nuget.org/packages/IronOcr.Languages.Serbian/ to your Visual Studio project.<br />
            Alternatively download the "Serbian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Sundanese">
            <summary>
            Sundanese  OCR language. Performs OCR, reading documents of the Sundanese (Basa Sunda) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Sundanese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sundanese' from https://www.nuget.org/packages/IronOcr.Languages.Sundanese/ to your Visual Studio project.<br />
            Alternatively download the "Sundanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SundaneseBest">
            <summary>
            Sundanese  OCR language. Performs OCR, reading documents of the Sundanese (Basa Sunda) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Sundanese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sundanese' from https://www.nuget.org/packages/IronOcr.Languages.Sundanese/ to your Visual Studio project.<br />
            Alternatively download the "Sundanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SundaneseFast">
            <summary>
            Sundanese  OCR language. Performs OCR, reading documents of the Sundanese (Basa Sunda) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Sundanese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Sundanese' from https://www.nuget.org/packages/IronOcr.Languages.Sundanese/ to your Visual Studio project.<br />
            Alternatively download the "Sundanese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Swahili">
            <summary>
            Swahili  OCR language. Performs OCR, reading documents of the Swahili (Kiswahili) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Swahili uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Swahili' from https://www.nuget.org/packages/IronOcr.Languages.Swahili/ to your Visual Studio project.<br />
            Alternatively download the "Swahili.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SwahiliBest">
            <summary>
            Swahili  OCR language. Performs OCR, reading documents of the Swahili (Kiswahili) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Swahili uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Swahili' from https://www.nuget.org/packages/IronOcr.Languages.Swahili/ to your Visual Studio project.<br />
            Alternatively download the "Swahili.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SwahiliFast">
            <summary>
            Swahili  OCR language. Performs OCR, reading documents of the Swahili (Kiswahili) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Swahili uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Swahili' from https://www.nuget.org/packages/IronOcr.Languages.Swahili/ to your Visual Studio project.<br />
            Alternatively download the "Swahili.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Swedish">
            <summary>
            Swedish  OCR language. Performs OCR, reading documents of the Swedish (Svenska) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Swedish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Swedish' from https://www.nuget.org/packages/IronOcr.Languages.Swedish/ to your Visual Studio project.<br />
            Alternatively download the "Swedish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SwedishBest">
            <summary>
            Swedish  OCR language. Performs OCR, reading documents of the Swedish (Svenska) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Swedish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Swedish' from https://www.nuget.org/packages/IronOcr.Languages.Swedish/ to your Visual Studio project.<br />
            Alternatively download the "Swedish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SwedishFast">
            <summary>
            Swedish  OCR language. Performs OCR, reading documents of the Swedish (Svenska) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Swedish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Swedish' from https://www.nuget.org/packages/IronOcr.Languages.Swedish/ to your Visual Studio project.<br />
            Alternatively download the "Swedish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Syriac">
            <summary>
            Syriac  OCR language. Performs OCR, reading documents of the Syriac (Syrian, Syriac Aramaic,ܠܫܢܐ ܣܘܪܝܝܐ‎, Leššānā Suryāyā) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Syriac uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Syriac' from https://www.nuget.org/packages/IronOcr.Languages.Syriac/ to your Visual Studio project.<br />
            Alternatively download the "Syriac.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SyriacBest">
            <summary>
            Syriac  OCR language. Performs OCR, reading documents of the Syriac (Syrian, Syriac Aramaic,ܠܫܢܐ ܣܘܪܝܝܐ‎, Leššānā Suryāyā) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Syriac uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Syriac' from https://www.nuget.org/packages/IronOcr.Languages.Syriac/ to your Visual Studio project.<br />
            Alternatively download the "Syriac.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SyriacFast">
            <summary>
            Syriac  OCR language. Performs OCR, reading documents of the Syriac (Syrian, Syriac Aramaic,ܠܫܢܐ ܣܘܪܝܝܐ‎, Leššānā Suryāyā) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Syriac uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Syriac' from https://www.nuget.org/packages/IronOcr.Languages.Syriac/ to your Visual Studio project.<br />
            Alternatively download the "Syriac.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SyriacAlphabet">
            <summary>
            Syriac Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Syriac Alphabet (Syrian, Syriac Aramaic,ܠܫܢܐ ܣܘܪܝܝܐ‎, Leššānā Suryāyā) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Syriac Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Syriac' from https://www.nuget.org/packages/IronOcr.Languages.Syriac/ to your Visual Studio project.<br />
            Alternatively download the "Syriac.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SyriacAlphabetBest">
            <summary>
            Syriac Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Syriac Alphabet (Syrian, Syriac Aramaic,ܠܫܢܐ ܣܘܪܝܝܐ‎, Leššānā Suryāyā) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Syriac Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Syriac' from https://www.nuget.org/packages/IronOcr.Languages.Syriac/ to your Visual Studio project.<br />
            Alternatively download the "Syriac.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.SyriacAlphabetFast">
            <summary>
            Syriac Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Syriac Alphabet (Syrian, Syriac Aramaic,ܠܫܢܐ ܣܘܪܝܝܐ‎, Leššānā Suryāyā) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Syriac Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Syriac' from https://www.nuget.org/packages/IronOcr.Languages.Syriac/ to your Visual Studio project.<br />
            Alternatively download the "Syriac.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Tamil">
            <summary>
            Tamil  OCR language. Performs OCR, reading documents of the Tamil (தமிழ்) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Tamil uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tamil' from https://www.nuget.org/packages/IronOcr.Languages.Tamil/ to your Visual Studio project.<br />
            Alternatively download the "Tamil.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TamilBest">
            <summary>
            Tamil  OCR language. Performs OCR, reading documents of the Tamil (தமிழ்) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Tamil uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tamil' from https://www.nuget.org/packages/IronOcr.Languages.Tamil/ to your Visual Studio project.<br />
            Alternatively download the "Tamil.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TamilFast">
            <summary>
            Tamil  OCR language. Performs OCR, reading documents of the Tamil (தமிழ்) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Tamil uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tamil' from https://www.nuget.org/packages/IronOcr.Languages.Tamil/ to your Visual Studio project.<br />
            Alternatively download the "Tamil.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TamilAlphabet">
            <summary>
            Tamil Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Tamil Alphabet (தமிழ்) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Tamil Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tamil' from https://www.nuget.org/packages/IronOcr.Languages.Tamil/ to your Visual Studio project.<br />
            Alternatively download the "Tamil.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TamilAlphabetBest">
            <summary>
            Tamil Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Tamil Alphabet (தமிழ்) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Tamil Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tamil' from https://www.nuget.org/packages/IronOcr.Languages.Tamil/ to your Visual Studio project.<br />
            Alternatively download the "Tamil.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TamilAlphabetFast">
            <summary>
            Tamil Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Tamil Alphabet (தமிழ்) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Tamil Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tamil' from https://www.nuget.org/packages/IronOcr.Languages.Tamil/ to your Visual Studio project.<br />
            Alternatively download the "Tamil.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Tatar">
            <summary>
            Tatar  OCR language. Performs OCR, reading documents of the Tatar (татар теле, tatar tele) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Tatar uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tatar' from https://www.nuget.org/packages/IronOcr.Languages.Tatar/ to your Visual Studio project.<br />
            Alternatively download the "Tatar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TatarBest">
            <summary>
            Tatar  OCR language. Performs OCR, reading documents of the Tatar (татар теле, tatar tele) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Tatar uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tatar' from https://www.nuget.org/packages/IronOcr.Languages.Tatar/ to your Visual Studio project.<br />
            Alternatively download the "Tatar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TatarFast">
            <summary>
            Tatar  OCR language. Performs OCR, reading documents of the Tatar (татар теле, tatar tele) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Tatar uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tatar' from https://www.nuget.org/packages/IronOcr.Languages.Tatar/ to your Visual Studio project.<br />
            Alternatively download the "Tatar.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Telugu">
            <summary>
            Telugu  OCR language. Performs OCR, reading documents of the Telugu (తెలుగు) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Telugu uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Telugu' from https://www.nuget.org/packages/IronOcr.Languages.Telugu/ to your Visual Studio project.<br />
            Alternatively download the "Telugu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TeluguBest">
            <summary>
            Telugu  OCR language. Performs OCR, reading documents of the Telugu (తెలుగు) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Telugu uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Telugu' from https://www.nuget.org/packages/IronOcr.Languages.Telugu/ to your Visual Studio project.<br />
            Alternatively download the "Telugu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TeluguFast">
            <summary>
            Telugu  OCR language. Performs OCR, reading documents of the Telugu (తెలుగు) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Telugu uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Telugu' from https://www.nuget.org/packages/IronOcr.Languages.Telugu/ to your Visual Studio project.<br />
            Alternatively download the "Telugu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TeluguAlphabet">
            <summary>
            Telugu Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Telugu Alphabet (తెలుగు) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Telugu Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Telugu' from https://www.nuget.org/packages/IronOcr.Languages.Telugu/ to your Visual Studio project.<br />
            Alternatively download the "Telugu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TeluguAlphabetBest">
            <summary>
            Telugu Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Telugu Alphabet (తెలుగు) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Telugu Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Telugu' from https://www.nuget.org/packages/IronOcr.Languages.Telugu/ to your Visual Studio project.<br />
            Alternatively download the "Telugu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TeluguAlphabetFast">
            <summary>
            Telugu Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Telugu Alphabet (తెలుగు) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Telugu Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Telugu' from https://www.nuget.org/packages/IronOcr.Languages.Telugu/ to your Visual Studio project.<br />
            Alternatively download the "Telugu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Tajik">
            <summary>
            Tajik  OCR language. Performs OCR, reading documents of the Tajik (тоҷикӣ, toğikī, تاجیکی‎) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Tajik uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tajik' from https://www.nuget.org/packages/IronOcr.Languages.Tajik/ to your Visual Studio project.<br />
            Alternatively download the "Tajik.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TajikBest">
            <summary>
            Tajik  OCR language. Performs OCR, reading documents of the Tajik (тоҷикӣ, toğikī, تاجیکی‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Tajik uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tajik' from https://www.nuget.org/packages/IronOcr.Languages.Tajik/ to your Visual Studio project.<br />
            Alternatively download the "Tajik.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TajikFast">
            <summary>
            Tajik  OCR language. Performs OCR, reading documents of the Tajik (тоҷикӣ, toğikī, تاجیکی‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Tajik uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tajik' from https://www.nuget.org/packages/IronOcr.Languages.Tajik/ to your Visual Studio project.<br />
            Alternatively download the "Tajik.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Tagalog">
            <summary>
            Tagalog  OCR language. Performs OCR, reading documents of the Tagalog (Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔) language with an understanding of spelling and linguistic context. 
            <para>This Tagalog OCR language pack  uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tagalog' from https://www.nuget.org/packages/IronOcr.Languages.Tagalog/ to your Visual Studio project.<br />
            Alternatively download the "Tagalog.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Thai">
            <summary>
            Thai  OCR language. Performs OCR, reading documents of the Thai (ไทย) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Thai uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thai' from https://www.nuget.org/packages/IronOcr.Languages.Thai/ to your Visual Studio project.<br />
            Alternatively download the "Thai.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaiBest">
            <summary>
            Thai  OCR language. Performs OCR, reading documents of the Thai (ไทย) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Thai uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thai' from https://www.nuget.org/packages/IronOcr.Languages.Thai/ to your Visual Studio project.<br />
            Alternatively download the "Thai.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaiFast">
            <summary>
            Thai  OCR language. Performs OCR, reading documents of the Thai (ไทย) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Thai uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thai' from https://www.nuget.org/packages/IronOcr.Languages.Thai/ to your Visual Studio project.<br />
            Alternatively download the "Thai.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaanaAlphabet">
            <summary>
            Thaana Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Thaana Alphabet (Taana , Tāna , ތާނަ‎) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Thaana Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thaana' from https://www.nuget.org/packages/IronOcr.Languages.Thaana/ to your Visual Studio project.<br />
            Alternatively download the "Thaana.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaanaAlphabetBest">
            <summary>
            Thaana Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Thaana Alphabet (Taana , Tāna , ތާނަ‎) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Thaana Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thaana' from https://www.nuget.org/packages/IronOcr.Languages.Thaana/ to your Visual Studio project.<br />
            Alternatively download the "Thaana.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaanaAlphabetFast">
            <summary>
            Thaana Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Thaana Alphabet (Taana , Tāna , ތާނަ‎) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Thaana Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thaana' from https://www.nuget.org/packages/IronOcr.Languages.Thaana/ to your Visual Studio project.<br />
            Alternatively download the "Thaana.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaiAlphabet">
            <summary>
            Thai Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Thai Alphabet (ไทย) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Thai Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thai' from https://www.nuget.org/packages/IronOcr.Languages.Thai/ to your Visual Studio project.<br />
            Alternatively download the "Thai.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaiAlphabetBest">
            <summary>
            Thai Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Thai Alphabet (ไทย) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Thai Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thai' from https://www.nuget.org/packages/IronOcr.Languages.Thai/ to your Visual Studio project.<br />
            Alternatively download the "Thai.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.ThaiAlphabetFast">
            <summary>
            Thai Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Thai Alphabet (ไทย) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Thai Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Thai' from https://www.nuget.org/packages/IronOcr.Languages.Thai/ to your Visual Studio project.<br />
            Alternatively download the "Thai.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TibetanAlphabet">
            <summary>
            Tibetan Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Tibetan Alphabet (Tibetan Standard, Tibetan, Central ཡིག་) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Tibetan Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tibetan' from https://www.nuget.org/packages/IronOcr.Languages.Tibetan/ to your Visual Studio project.<br />
            Alternatively download the "Tibetan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TibetanAlphabetBest">
            <summary>
            Tibetan Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Tibetan Alphabet (Tibetan Standard, Tibetan, Central ཡིག་) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Tibetan Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tibetan' from https://www.nuget.org/packages/IronOcr.Languages.Tibetan/ to your Visual Studio project.<br />
            Alternatively download the "Tibetan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TibetanAlphabetFast">
            <summary>
            Tibetan Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Tibetan Alphabet (Tibetan Standard, Tibetan, Central ཡིག་) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Tibetan Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tibetan' from https://www.nuget.org/packages/IronOcr.Languages.Tibetan/ to your Visual Studio project.<br />
            Alternatively download the "Tibetan.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Tigrinya">
            <summary>
            Tigrinya  OCR language. Performs OCR, reading documents of the Tigrinya (ትግርኛ) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Tigrinya uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tigrinya' from https://www.nuget.org/packages/IronOcr.Languages.Tigrinya/ to your Visual Studio project.<br />
            Alternatively download the "Tigrinya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TigrinyaBest">
            <summary>
            Tigrinya  OCR language. Performs OCR, reading documents of the Tigrinya (ትግርኛ) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Tigrinya uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tigrinya' from https://www.nuget.org/packages/IronOcr.Languages.Tigrinya/ to your Visual Studio project.<br />
            Alternatively download the "Tigrinya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TigrinyaFast">
            <summary>
            Tigrinya  OCR language. Performs OCR, reading documents of the Tigrinya (ትግርኛ) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Tigrinya uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tigrinya' from https://www.nuget.org/packages/IronOcr.Languages.Tigrinya/ to your Visual Studio project.<br />
            Alternatively download the "Tigrinya.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Tonga">
            <summary>
            Tonga  OCR language. Performs OCR, reading documents of the Tonga (faka Tonga) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Tonga uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tonga' from https://www.nuget.org/packages/IronOcr.Languages.Tonga/ to your Visual Studio project.<br />
            Alternatively download the "Tonga.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TongaBest">
            <summary>
            Tonga  OCR language. Performs OCR, reading documents of the Tonga (faka Tonga) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Tonga uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tonga' from https://www.nuget.org/packages/IronOcr.Languages.Tonga/ to your Visual Studio project.<br />
            Alternatively download the "Tonga.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TongaFast">
            <summary>
            Tonga  OCR language. Performs OCR, reading documents of the Tonga (faka Tonga) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Tonga uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Tonga' from https://www.nuget.org/packages/IronOcr.Languages.Tonga/ to your Visual Studio project.<br />
            Alternatively download the "Tonga.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Turkish">
            <summary>
            Turkish  OCR language. Performs OCR, reading documents of the Turkish (Türkçe) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Turkish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Turkish' from https://www.nuget.org/packages/IronOcr.Languages.Turkish/ to your Visual Studio project.<br />
            Alternatively download the "Turkish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TurkishBest">
            <summary>
            Turkish  OCR language. Performs OCR, reading documents of the Turkish (Türkçe) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Turkish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Turkish' from https://www.nuget.org/packages/IronOcr.Languages.Turkish/ to your Visual Studio project.<br />
            Alternatively download the "Turkish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.TurkishFast">
            <summary>
            Turkish  OCR language. Performs OCR, reading documents of the Turkish (Türkçe) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Turkish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Turkish' from https://www.nuget.org/packages/IronOcr.Languages.Turkish/ to your Visual Studio project.<br />
            Alternatively download the "Turkish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Uyghur">
            <summary>
            Uyghur  OCR language. Performs OCR, reading documents of the Uyghur (Uyƣurqə, ئۇيغۇرچە‎) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Uyghur uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uyghur' from https://www.nuget.org/packages/IronOcr.Languages.Uyghur/ to your Visual Studio project.<br />
            Alternatively download the "Uyghur.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UyghurBest">
            <summary>
            Uyghur  OCR language. Performs OCR, reading documents of the Uyghur (Uyƣurqə, ئۇيغۇرچە‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Uyghur uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uyghur' from https://www.nuget.org/packages/IronOcr.Languages.Uyghur/ to your Visual Studio project.<br />
            Alternatively download the "Uyghur.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UyghurFast">
            <summary>
            Uyghur  OCR language. Performs OCR, reading documents of the Uyghur (Uyƣurqə, ئۇيغۇرچە‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Uyghur uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uyghur' from https://www.nuget.org/packages/IronOcr.Languages.Uyghur/ to your Visual Studio project.<br />
            Alternatively download the "Uyghur.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Ukrainian">
            <summary>
            Ukrainian  OCR language. Performs OCR, reading documents of the Ukrainian (українська мова) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Ukrainian uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Ukrainian' from https://www.nuget.org/packages/IronOcr.Languages.Ukrainian/ to your Visual Studio project.<br />
            Alternatively download the "Ukrainian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UkrainianBest">
            <summary>
            Ukrainian  OCR language. Performs OCR, reading documents of the Ukrainian (українська мова) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Ukrainian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Ukrainian' from https://www.nuget.org/packages/IronOcr.Languages.Ukrainian/ to your Visual Studio project.<br />
            Alternatively download the "Ukrainian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UkrainianFast">
            <summary>
            Ukrainian  OCR language. Performs OCR, reading documents of the Ukrainian (українська мова) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Ukrainian uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Ukrainian' from https://www.nuget.org/packages/IronOcr.Languages.Ukrainian/ to your Visual Studio project.<br />
            Alternatively download the "Ukrainian.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Urdu">
            <summary>
            Urdu  OCR language. Performs OCR, reading documents of the Urdu (اردو) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Urdu uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Urdu' from https://www.nuget.org/packages/IronOcr.Languages.Urdu/ to your Visual Studio project.<br />
            Alternatively download the "Urdu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UrduBest">
            <summary>
            Urdu  OCR language. Performs OCR, reading documents of the Urdu (اردو) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Urdu uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Urdu' from https://www.nuget.org/packages/IronOcr.Languages.Urdu/ to your Visual Studio project.<br />
            Alternatively download the "Urdu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UrduFast">
            <summary>
            Urdu  OCR language. Performs OCR, reading documents of the Urdu (اردو) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Urdu uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Urdu' from https://www.nuget.org/packages/IronOcr.Languages.Urdu/ to your Visual Studio project.<br />
            Alternatively download the "Urdu.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Uzbek">
            <summary>
            Uzbek  OCR language. Performs OCR, reading documents of the Uzbek (O‘zbek, Ўзбек, أۇزبېك‎) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Uzbek uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uzbek' from https://www.nuget.org/packages/IronOcr.Languages.Uzbek/ to your Visual Studio project.<br />
            Alternatively download the "Uzbek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UzbekBest">
            <summary>
            Uzbek  OCR language. Performs OCR, reading documents of the Uzbek (O‘zbek, Ўзбек, أۇزبېك‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Uzbek uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uzbek' from https://www.nuget.org/packages/IronOcr.Languages.Uzbek/ to your Visual Studio project.<br />
            Alternatively download the "Uzbek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UzbekFast">
            <summary>
            Uzbek  OCR language. Performs OCR, reading documents of the Uzbek (O‘zbek, Ўзбек, أۇزبېك‎) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Uzbek uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uzbek' from https://www.nuget.org/packages/IronOcr.Languages.Uzbek/ to your Visual Studio project.<br />
            Alternatively download the "Uzbek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UzbekCyrillic">
            <summary>
            Uzbek Cyrillic  OCR language. Performs OCR, reading documents of the Uzbek (O‘zbek, Ўзбек, أۇزبېك‎) language ,using the Cyrillic alphabet, with an understanding of spelling and linguistic context. 
            <para>This Default variant of Uzbek Cyrillic uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uzbek' from https://www.nuget.org/packages/IronOcr.Languages.Uzbek/ to your Visual Studio project.<br />
            Alternatively download the "Uzbek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UzbekCyrillicBest">
            <summary>
            Uzbek Cyrillic  OCR language. Performs OCR, reading documents of the Uzbek (O‘zbek, Ўзбек, أۇزبېك‎) language ,using the Cyrillic alphabet, with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Uzbek Cyrillic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uzbek' from https://www.nuget.org/packages/IronOcr.Languages.Uzbek/ to your Visual Studio project.<br />
            Alternatively download the "Uzbek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.UzbekCyrillicFast">
            <summary>
            Uzbek Cyrillic  OCR language. Performs OCR, reading documents of the Uzbek (O‘zbek, Ўзбек, أۇزبېك‎) language ,using the Cyrillic alphabet, with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Uzbek Cyrillic uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Uzbek' from https://www.nuget.org/packages/IronOcr.Languages.Uzbek/ to your Visual Studio project.<br />
            Alternatively download the "Uzbek.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Vietnamese">
            <summary>
            Vietnamese  OCR language. Performs OCR, reading documents of the Vietnamese (Tiếng Việt) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Vietnamese uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Vietnamese' from https://www.nuget.org/packages/IronOcr.Languages.Vietnamese/ to your Visual Studio project.<br />
            Alternatively download the "Vietnamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.VietnameseBest">
            <summary>
            Vietnamese  OCR language. Performs OCR, reading documents of the Vietnamese (Tiếng Việt) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Vietnamese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Vietnamese' from https://www.nuget.org/packages/IronOcr.Languages.Vietnamese/ to your Visual Studio project.<br />
            Alternatively download the "Vietnamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.VietnameseFast">
            <summary>
            Vietnamese  OCR language. Performs OCR, reading documents of the Vietnamese (Tiếng Việt) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Vietnamese uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Vietnamese' from https://www.nuget.org/packages/IronOcr.Languages.Vietnamese/ to your Visual Studio project.<br />
            Alternatively download the "Vietnamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.VietnameseAlphabet">
            <summary>
            Vietnamese Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Vietnamese Alphabet (Tiếng Việt) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This Default variant of Vietnamese Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Vietnamese' from https://www.nuget.org/packages/IronOcr.Languages.Vietnamese/ to your Visual Studio project.<br />
            Alternatively download the "Vietnamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.VietnameseAlphabetBest">
            <summary>
            Vietnamese Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Vietnamese Alphabet (Tiếng Việt) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Best' (detailed) variant of Vietnamese Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Vietnamese' from https://www.nuget.org/packages/IronOcr.Languages.Vietnamese/ to your Visual Studio project.<br />
            Alternatively download the "Vietnamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.VietnameseAlphabetFast">
            <summary>
            Vietnamese Alphabetic Script  OCR dictionary. Performs OCR, identifying characters of Vietnamese Alphabet (Tiếng Việt) languages.
            <para>Alphabetic script OCR dictionaries such as this contain detailed information about the shapes letters of an alphabet, but do not utilize any other information about a language such as word-frequency and do not understand linguistic context.  This has both advantages and disadvantages.</para><para>This 'Fast' variant of Vietnamese Alphabet uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Vietnamese' from https://www.nuget.org/packages/IronOcr.Languages.Vietnamese/ to your Visual Studio project.<br />
            Alternatively download the "Vietnamese.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Yiddish">
            <summary>
            Yiddish  OCR language. Performs OCR, reading documents of the Yiddish (ייִדיש) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Yiddish uses both an LTSM (Long Term Short Term neural network) and an OEM (shape recognition evolved from Tesseract 3) OCR strategies which can mesh them together to produce results which are both fast and accurate.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Yiddish' from https://www.nuget.org/packages/IronOcr.Languages.Yiddish/ to your Visual Studio project.<br />
            Alternatively download the "Yiddish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.YiddishBest">
            <summary>
            Yiddish  OCR language. Performs OCR, reading documents of the Yiddish (ייִדיש) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Yiddish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Yiddish' from https://www.nuget.org/packages/IronOcr.Languages.Yiddish/ to your Visual Studio project.<br />
            Alternatively download the "Yiddish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.YiddishFast">
            <summary>
            Yiddish  OCR language. Performs OCR, reading documents of the Yiddish (ייִדיש) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Yiddish uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Yiddish' from https://www.nuget.org/packages/IronOcr.Languages.Yiddish/ to your Visual Studio project.<br />
            Alternatively download the "Yiddish.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Yoruba">
            <summary>
            Yoruba  OCR language. Performs OCR, reading documents of the Yoruba (Yorùbá) language with an understanding of spelling and linguistic context. 
            <para>This Default variant of Yoruba uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Yoruba' from https://www.nuget.org/packages/IronOcr.Languages.Yoruba/ to your Visual Studio project.<br />
            Alternatively download the "Yoruba.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.YorubaBest">
            <summary>
            Yoruba  OCR language. Performs OCR, reading documents of the Yoruba (Yorùbá) language with an understanding of spelling and linguistic context. 
            <para>This 'Best' (detailed) variant of Yoruba uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for detail over speed.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Yoruba' from https://www.nuget.org/packages/IronOcr.Languages.Yoruba/ to your Visual Studio project.<br />
            Alternatively download the "Yoruba.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.YorubaFast">
            <summary>
            Yoruba  OCR language. Performs OCR, reading documents of the Yoruba (Yorùbá) language with an understanding of spelling and linguistic context. 
            <para>This 'Fast' variant of Yoruba uses only an LTSM (Long Term Short Term neural network) Tesseract OCR engine which has been optimised for speed with a small cost to accuracy.</para><para>To use this language please install the Nuget Package 'IronOcr.Languages.Yoruba' from https://www.nuget.org/packages/IronOcr.Languages.Yoruba/ to your Visual Studio project.<br />
            Alternatively download the "Yoruba.ocrdata" language file from https://ironsoftware.com/csharp/ocr/languages/ and add it to your project with the property <c>CopyToOutputDirectory = CopyIfNewer</c></para></summary>
        </member>
        <member name="F:IronOcr.OcrLanguage.Custom">
            <summary>
             A custom .traineddata language file is in use.  Use the <see cref="M:IronOcr.IronTesseract.UseCustomTesseractLanguageFile(System.String)" /> method to achieve this state.
            </summary>
        </member>
        <member name="T:IronOcr.License">
            <summary>
            Allows IronOCR license keys to be applied globally across an application.
            </summary>
        </member>
        <member name="P:IronOcr.License.IsLicensed">
            <summary>
            Removes watermarks. Determines whether this instance of IronOCR is
            licensed.
            <para>Will return <c>false</c> unless a <see cref="P:IronOcr.License.LicenseKey" />
            is set to a valid trial or full license key in 
            <see cref="P:IronOcr.License.LicenseKey" /> property, <c>Web.Config</c>,
            <c>App.Config</c> or <c>appsettings.json</c> in .Net Core.
            </para><para>
            See https://ironsoftware.com/csharp/ocr/licensing/ and 
            https://ironsoftware.com/csharp/ocr/docs/license/license-keys/
            </para></summary>
            <returns>
                <c>true</c> if the license key given is valid.</returns>
        </member>
        <member name="P:IronOcr.License.LicenseKey">
            <summary>
            Get Licensed at https://ironsoftware.com/csharp/ocr/licensing/
            <para>
            For .Net framework applications, a license key can alternatively be
            added to <c>Web.Config</c> or <c>App.Config</c> XML file using
            <c>&lt;add key="IronOcr.LicenseKey" value="IRONOCR-LICENSE-KEY"/&gt;</c>
            within the appSettings node.
            See https://ironsoftware.com/csharp/ocr/docs/license/license-keys/
            </para><para>
            For .Net Core applications, a license key  may be added to 
            <c>appsettings.json</c> where the key name is <c>"IronOcr.LicenseKey"</c>
            and the value is a valid IronOcr trial or full license key.
            </para><para>
            See https://ironsoftware.com/csharp/ocr/licensing/ for licensing 
            options.
            </para></summary>
        </member>
        <member name="M:IronOcr.License.IsValidLicense(System.String)">
            <summary>
            Determines whether a string license key is valid.
            <para>
            See https://ironsoftware.com/csharp/ocr/licensing/ for trial,
            development and commercial deployment licensing options.
            </para></summary>
            <param name="licenseKey">IronOcr license key as a string</param>
            <returns>
                <c>true</c> if the license key given is valid.</returns>
        </member>
        <member name="T:IronOcr.OcrInput">
            <summary>
                <see cref="T:IronOcr.OcrInput" /> provides a robust class for preparing one or more Image Files, PDFs, IronSoftware.Drawing.AnyBitmap, SixLabors.ImageSharp.Image, System.Drawing.Bitmap, other famous image library Objects, Streams and Binary Image data for OCR.
            Instances of <see cref="T:IronOcr.OcrInput" />  can be read by the <see cref="T:IronOcr.IronTesseract" /> class.
            <para>We recognise that much of the quality of  OCR results depends on preparing images to be read.  This class allows developers to enhance their scanned documents provide faster, more accurate OCR results using filters such as: <see cref="M:IronOcr.OcrInput.EnhanceResolution(System.Int32)" />, <see cref="M:IronOcr.OcrInput.DeNoise(System.Boolean)" />, <see cref="M:IronOcr.OcrInput.ToGrayScale" />, <see cref="M:IronOcr.OcrInput.Deskew(IronOcr.OcrLanguage,System.Int32,IronOcr.OrientationConfidence)" />,  <see cref="M:IronOcr.OcrInput.Rotate(System.Double)" /> and  <see cref="M:IronOcr.OcrInput.Sharpen" />.</para><para>Supports for multi-paged OCR input. </para></summary>
        </member>
        <member name="P:IronOcr.OcrInput.SkipDisposal">
            <summary>
            Skips disposal to ensure pix memory still being used by other OcrInput objects is still valid
            </summary>
            <remarks>Set to True when making an internal copy of another OcrInput object which shares PixPlus with this object</remarks>
        </member>
        <member name="F:IronOcr.OcrInput.TargetDPI">
            <summary>
            The resolution that low resolution images will be enhanced to. To disable upscaling, set this to 0 (will affect read quality).
            <para>TargetDPI also determines the resolution at which PDF documents will be sampled.</para></summary>
        </member>
        <member name="T:IronOcr.OcrInput.ImageType">
            <summary>
            Type of Image to save as.
            Common examples are <see cref="F:IronOcr.OcrInput.ImageType.PNG" />, <see cref="F:IronOcr.OcrInput.ImageType.JPG" />, and <see cref="F:IronOcr.OcrInput.ImageType.GIF" />.
            </summary>
        </member>
        <member name="F:IronOcr.OcrInput.ImageType.PNG">
            <summary>
            PNG is short for Portable Network Graphic, a type of raster image file.
            </summary>
        </member>
        <member name="F:IronOcr.OcrInput.ImageType.JPG">
            <summary>
            JPG is a digital image format which contains compressed image data.
            </summary>
        </member>
        <member name="F:IronOcr.OcrInput.ImageType.GIF">
            <summary>
            GIF stands for Graphics Interchange Format. GIF is a raster file format designed for relatively basic images that appear mainly on the internet. Each file can support up to 8 bits per pixel and can contain 256 indexed colors.
            </summary>
        </member>
        <member name="F:IronOcr.OcrInput.ImageType.TIFF">
            <summary>
            TIFF stands for Tag Image File Format, TIFF is a file used to store raster graphics and image information.
            </summary>
        </member>
        <member name="F:IronOcr.OcrInput.ImageType.BMP">
            <summary>
            A BMP file contains uncompressed data, making it ideal for storing and displaying high-quality digital images.
            </summary>
        </member>
        <member name="P:IronOcr.OcrInput.Title">
            <summary>
            A title for the OcrInput document. This is relevant as it becomes metadata when exporting searchable PDFs and HOCR files from <see cref="T:IronOcr.IronTesseract" /> results.
            <para>See <see cref="M:IronOcr.OcrResult.SaveAsSearchablePdf(System.String)" /> and <see cref="M:IronOcr.OcrResult.SaveAsHocrFile(System.String)" /></para></summary>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Object[])">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object to which images and PDF pages may be added.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Inputs">Any number of images as File Paths, Streams, Byte Arrays, <see cref="T:IronSoftware.Drawing.AnyBitmap" /> and <see cref="T:SixLabors.ImageSharp.Image" />.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with an Image file or PDF document.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="FilePath">Path to an Image or PDF file.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with an Image file.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="FilePath">Path to an Image or PDF file.</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Optional target DPI for the input content</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with multiple Image files.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="FilePaths">An IEnumerable of paths to  Image or PDF files.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{System.String},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with multiple Image files with a common ContentArea.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="FilePaths">An IEnumerable of paths to  Image or PDF files.</param>
            <param name="ContentArea">Specifies a region of each image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Byte[])">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with an Image file as binary data.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bytes">Bytes of an Image or PDF file.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Byte[],IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with an Image file as binary data.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bytes">Bytes of an Image or PDF file.</param>
            <param name="ContentArea">Specifies a region of each image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with the binary data of multiple Images with a common ContentArea.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bytes">An IEnumerable of  byte arrays containing Image or PDF files.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with the binary data of multiple Images with a common ContentArea.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bytes">An IEnumerable of  byte arrays containing Image or PDF files.</param>
            <param name="ContentArea">Specifies a region of each image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with  image data as a Stream.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Stream">Steam containing an Image or PDF file.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.IO.Stream,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with  image data as a Stream.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Stream">Steam containing an Image or PDF file.</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with multiple images as Streams.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Streams">Steam containing an Image or PDF file.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with multiple images as Streams sharing a common ContentArea.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Streams">Steam containing an Image or PDF file.</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(IronSoftware.Drawing.AnyBitmap)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bitmap">A <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with a <see cref="T:IronSoftware.Drawing.AnyBitmap" />.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bitmap">A <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap})">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with multiple <see cref="T:IronSoftware.Drawing.AnyBitmap" />.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bitmaps">An IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with multiple <see cref="T:IronSoftware.Drawing.AnyBitmap" /> sharing a common ContentArea.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Bitmaps">An IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(SixLabors.ImageSharp.Image)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with a <see cref="T:SixLabors.ImageSharp.Image" />.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Image">
                <see cref="T:SixLabors.ImageSharp.Image" />
            </param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(SixLabors.ImageSharp.Image,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with a specified region of a <see cref="T:SixLabors.ImageSharp.Image" />.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Image">
                <see cref="T:SixLabors.ImageSharp.Image" />
            </param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{SixLabors.ImageSharp.Image})">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with any number of <see cref="T:SixLabors.ImageSharp.Image" />.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Images">Any Number of <see cref="T:SixLabors.ImageSharp.Image" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(System.Collections.Generic.IEnumerable{SixLabors.ImageSharp.Image},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Create a new <see cref="T:IronOcr.OcrInput" /> object populated with any number of <see cref="T:SixLabors.ImageSharp.Image" /> Image sharing a common ContentArea.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para></summary>
            <param name="Images">Any Number of <see cref="T:SixLabors.ImageSharp.Image" /></param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.#ctor(IronSoftware.Drawing.CropRectangle,System.Object[])">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with one or more images sharing a common crop area.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts any number of images as File Paths, Streams, Byte Arrays, <see cref="T:IronSoftware.Drawing.AnyBitmap" />, <see cref="T:SixLabors.ImageSharp.Image" />, System.Drawing.Bitmap, or System.Drawing.Image. Each will become a <see cref="T:IronOcr.OcrInput.Page" />. </para></summary>
            <param name="Inputs">Any number of images as File Paths, Streams, Byte Arrays, <see cref="T:SixLabors.ImageSharp.Image" />, System.Drawing.Bitmap, or System.Drawing.Image.</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdf(System.String,System.Int32,System.String)">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with a PDF.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfPath">File path to the PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdf(System.String,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with a PDF.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfPath">File path to the PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdfPages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with multiple pages from a PDF.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfPath">File path to the PDF</param>
            <param name="Pages">List which pages of the PDF will be read.  Zero based (first page is number 0)</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdfPage(System.String,System.Int32,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with a single page of a PDF.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfPath">File path to the PDF</param>
            <param name="Page">Which page of the PDF to read.  Zero based (first page is number 0)</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdf(System.Byte[],System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with a PDF as binary data.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfBytes">The PDF document as binary data in memory.</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdfPages(System.Byte[],System.Collections.Generic.IEnumerable{System.Int32},System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with multiple pages from a PDF as binary data.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfBytes">The PDF document as binary data in memory.</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Pages">List which pages of the PDF which will be read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdfPage(System.Byte[],System.Int32,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with a single page from a PDF as binary data.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfBytes">The PDF document as binary data in memory.</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Page">The page number within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdf(System.IO.Stream,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with a PDF as a Stream.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfStream">The PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdfPages(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Int32},System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with multiple selected pages from a PDF as a Stream.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfStream">The PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Pages">The pages of the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.FromPdfPage(System.IO.Stream,System.Int32,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Create a new  <see cref="T:IronOcr.OcrInput" /> object populated with a single page from a PDF as a Stream.
            <para>This class is IDisposable and is best initiated with a 'using' statement.</para><para>This constructor accepts pdf as File Paths, Streams, or Byte Arrays. Each will become a <see cref="T:IronOcr.OcrInput.Page" />.</para></summary>
            <param name="PdfStream">The PDF document as a <see cref="T:System.IO.Stream" />.</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Page">The page number within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdf(System.String,System.Int32,System.String)">
            <summary>
            Adds all pages of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfPath">String file path to the PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdf(System.String,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds all pages of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfPath">String file path to the PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdfPage(System.String,System.Int32,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds one page of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfPath">String file path to the PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Page">The page number within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdfPages(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds selected pages from a PDF document into this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfPath">String file path to the PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Pages,,">The page numbers  within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdf(System.IO.Stream,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds all pages of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfStream">
                <see cref="T:System.IO.Stream" />  containing a PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdfPage(System.IO.Stream,System.Int32,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds one page of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfStream">
                <see cref="T:System.IO.Stream" />  containing a PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Page">The page number within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdfPages(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Int32},System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds selected pages of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfStream">
                <see cref="T:System.IO.Stream" />  containing a PDF</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Pages">The page numbers within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdf(System.Byte[],System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds all pages of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfBytes">Binary data of a PDF file</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdfPage(System.Byte[],System.Int32,System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds one page of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfBytes">Binary data of a PDF file</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Page">The page number within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddPdfPages(System.Byte[],System.Collections.Generic.IEnumerable{System.Int32},System.String,IronSoftware.Drawing.CropRectangle,System.Nullable{System.Int32})">
            <summary>
            Adds selected pages of a PDF document to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="PdfBytes">Binary data of a PDF file</param>
            <param name="Password">Optional Password to unlock an encrypted or protected PDF</param>
            <param name="ContentArea">Specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels. Setting a ContentArea can improve OCR speed.</param>
            <param name="DPI">Resolution at which to sample the PDF. If null or zero will use <see cref="F:IronOcr.OcrInput.TargetDPI" /></param>
            <param name="Pages">The page numbers within the PDF to read. Zero based (first page is number 0)</param>
        </member>
        <member name="M:IronOcr.OcrInput.SaveAsImages(System.String,IronOcr.OcrInput.ImageType)">
            <summary>
            Exports an <see cref="T:IronOcr.OcrInput" /> object as Images
            </summary>
            <param name="Prefix">Will save images at {Prefix}_(page_number).{Extension}. May include a fully qualified file path.</param>
            <param name="Extension">Output file extension in lower-case.</param>
            <returns>Array of saved image file names. Can be multiple if <see cref="T:IronOcr.OcrInput" /> used has multiple pages.</returns>
            <exception cref="T:System.Exception">Throws an exception if there are no pages. See <see cref="T:IronOcr.OcrInput.Page" /></exception>
        </member>
        <member name="M:IronOcr.OcrInput.HighlightTextAndSaveAsImages(IronOcr.IronTesseract,System.String,IronOcr.ResultHighlightType)">
            <summary>
                <para>Based on the <see cref="T:IronOcr.ResultHighlightType" />, will draw red boxes around characters/words/lines/paragraphs detected, and save to a PNG image.</para>
                <para>For best results, perform all filters before calling.</para>
            </summary>
            <param name="tesseract">IronTesseract instance used to scan the OcrInput.</param>
            <param name="filename">File will be saved as : 'filename_page_0.png'. You may use an absolute or relative path.</param>
            <param name="type">Choose whether each box represents a character, word, line, paragraph.</param>
        </member>
        <member name="M:IronOcr.OcrInput.StampCropRectangleAndSaveAs(IronSoftware.Drawing.CropRectangle,IronSoftware.Drawing.Color,System.String,IronOcr.OcrInput.ImageType)">
            <summary>
            Saves a copy of the image with a rectangle applied and to visualize and debug where CropRectangle will be applied when using <see cref="T:IronSoftware.Drawing.CropRectangle" /> on your image.
            </summary>
            <param name="cropRectangle">Use a <see cref="T:IronSoftware.Drawing.CropRectangle" /> to debug the area that will be scanned on an image.</param>
            <param name="rectangleColor">Color of rectangle drawn. Red is recommended for easy contrast.</param>
            <param name="Prefix">Will save images at {Prefix}_(page_number).{Extension}. May include a fully qualified file path.</param>
            <param name="extension">Output file extension in lower-case.</param>
            <returns>Array of saved image file names. Can be multiple if <see cref="T:IronOcr.OcrInput" /> used has multiple pages.</returns>
            <exception cref="T:System.Exception">Throws an exception if there are no pages. See <see cref="T:IronOcr.OcrInput.Page" /></exception>
        </member>
        <member name="M:IronOcr.OcrInput.Dispose(System.Boolean)">
            <summary>
            OcrInput is IDisposable.  For best practice and to avoid memory leaks, remember to dispose, or initialize instances with a "using" statement.
            </summary>
        </member>
        <member name="M:IronOcr.OcrInput.Dispose">
            <summary>
            OcrInput is IDisposable.  For best practice and to avoid memory leaks, remember to dispose, or initialize instances with a "using" statement.
            </summary>
        </member>
        <member name="M:IronOcr.OcrInput.Finalize">
            <summary>
            OcrInput has a safe finaliser that cleans up undisposed native images in memory.
            </summary>
        </member>
        <member name="M:IronOcr.OcrInput.ApplyMultipleFilters(IronOcr.OcrFilters,System.Double,System.Int32,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Apply multiple imaging filters using the specified paramaeters
            </summary>
            <param name="filters">Filters to apply</param>
            <param name="Rotation">Rotation amount. Required when using the Rotation filter. <see cref="F:IronOcr.OcrFilters.Rotate" /></param>
            <param name="MaxDeskewAngle">Optional MaxDeskewAngle amount when using the Deskew filter. Defaults to 45 degrees.<see cref="F:IronOcr.OcrFilters.Deskew" /></param>
            <param name="MaxWidth">Maximum width. Required when using the Scale filter. <see cref="F:IronOcr.OcrFilters.Scale" /></param>
            <param name="MaxHeight">Maximum height. Required when using the Scale filter. <see cref="F:IronOcr.OcrFilters.Scale" /></param>
            <param name="Use3x3">Optional morphology when using the Despeckle (DeNoise), Dilate, or Erode filter. <see cref="F:IronOcr.OcrFilters.DeNoise" />, <see cref="F:IronOcr.OcrFilters.Dilate" />, or <see cref="F:IronOcr.OcrFilters.Erode" /></param>
            <param name="thresholdLimit">Optional Threshold limit (0.0-1.0) to consider for binarization when using the Bradley Adaptive Threshold.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <remarks>This method serves as an alternative way to apply multiple filters. Filters are applied in what is typically the optimal order.</remarks>
        </member>
        <member name="M:IronOcr.OcrInput.Rotate(System.Double)">
            <summary>
            Rotates images by a number of degrees clockwise. For anti-clockwise, use negative numbers. Also see <see cref="M:IronOcr.OcrInput.Deskew(System.Int32)" /></summary>
            <param name="Degrees">A number of clockwise degrees.</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Binarize">
            <summary>
            This image filter turns every pixel black or white with no middle ground. May Improve OCR performance cases of very low contrast of text to background.
            </summary>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.ToGrayScale">
            <summary>
            This image filter turns every pixel into a shade of grayscale. Unlikely to improve OCR accuracy but may improve speed.
            </summary>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Sharpen">
            <summary>
            Sharpens blurred OCR Documents.  Applies a Gaussian sharpening filter to image.
            </summary>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.ReplaceColor(IronSoftware.Drawing.Color,IronSoftware.Drawing.Color,System.Int32)">
            <summary>
            Replace current color to new color in Image
            </summary>
            <param name="currentColor">Current <see cref="T:IronSoftware.Drawing.Color" /></param>
            <param name="newColor">New <see cref="T:IronSoftware.Drawing.Color" /></param>
            <param name="tolerance">Tolerance Value</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.SelectTextColor(IronSoftware.Drawing.Color,System.Int32)">
            <summary>
            Binarize an image to read pixels of a color (with threshold) as text and ignore other colors as background.
            <para>This is useful if you image has many colors and a normal binarize will not work. It will turn all text of the color specified into black and the rest of the image to white.</para></summary>
            <param name="selectColor">
                <see cref="T:IronSoftware.Drawing.Color" /> of text to isolate from background.</param>
            <param name="tolerance">[0,255]; Acceptable range of the difference between PixelColor and selectColor for each R, G, and B value</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.SelectTextColors(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.Color},System.Int32)">
            <summary>
            Binarize an image to read pixels of only selected colors (with thresholds) as text and ignore other colors as background.
            <para>This is useful if you image has many colors and a normal binarize will not work. It will turn all text of the color specified into black and the rest of the image to white.</para></summary>
            <param name="selectColors">
                <see cref="T:IronSoftware.Drawing.Color" /> of text to isolate from background.</param>
            <param name="tolerance">[0,255]; Acceptable range of the difference between PixelColor and selectColor for each R, G, and B value</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Contrast(System.Single)">
            <summary>
            Increases contrast automatically. This filter often improves OCR speed and accuracy in low contrast scans. Flattens Alpha channels to white.
            </summary>
            <param name="amount">
            Amount which is used to adjust contrast. A value of 0 will create an image that is completely gray. A value of 1 leaves the input unchanged.
            <para>Amount values greater than 0 increase contrast making light areas lighter and dark areas darker.</para><para>Amount values less than 0 decrease contrast - decreasing variety of contrast.</para></param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.DeNoise(System.Boolean)">
            <summary>
            Removes digital noise.  This filter should only be used where noise is expected. Flattens Alpha channels to white.
            </summary>
            <param name="use3x3">2x2 is default morphology</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
            <seealso cref="M:IronOcr.OcrInput.Despeckle(System.Boolean)" />
        </member>
        <member name="M:IronOcr.OcrInput.Despeckle(System.Boolean)">
            <summary>
            DeSpeckle as an alias of DeNoise.
            <para>Alias of <see cref="M:IronOcr.OcrInput.DeNoise(System.Boolean)" /> to make this method easily to find in Intensense.</para></summary>
            <param name="use3x3">2x2 is default morphology</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Invert(System.Boolean)">
            <summary>
            Inverts every color. E.g. White becomes black : black becomes white.
            </summary>
            <param name="GrayScale">Optionally remove all color channels and return a GrayScale image.</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Dilate(System.Boolean)">
            <summary>
            Advanced Morphology. Dilation is the opposite of Erosion, instead of shrinking it expands the foreground object.
            <para>Opposite of <see cref="M:IronOcr.OcrInput.Erode(System.Boolean)" />.</para></summary>
            <param name="use3x3">2x2 is default morphology</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Erode(System.Boolean)">
            <summary>
            Advanced Morphology. Erosion is the morphological operation used to diminish the size of the foreground object.
            <para>Opposite of <see cref="M:IronOcr.OcrInput.Erode(System.Boolean)" />.</para></summary>
            <param name="use3x3">2x2 is default morphology</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Open(System.Boolean)">
            <summary>
            Advanced Morphology. 
            <para>Opening is just another name of erosion followed by dilation. It is useful in removing noise.</para></summary>
            <param name="use3x3">2x2 is default morphology</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Close(System.Boolean)">
            <summary>
            Advanced Morphology.
            <para>Closing is reverse of Opening, Dilation followed by Erosion. It is useful in closing small holes inside the foreground objects.</para></summary>
            <param name="use3x3">2x2 is default morphology</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.HoughTransformStraighten(System.Int32)">
            <summary>
            Uses a Hough Transform to rotate and image to the nearest 90 degrees of straightness. This is very useful for OCR because Tesseract tolerance for skewed scans can be as low as 5 degrees.
            <para>A Synonym of <see cref="M:IronOcr.OcrInput.Deskew(System.Int32)" /></para></summary>
            <param name="MaxDeskewAngle">Maximum angle of skew to correct for. Higher values can lead to more opportunity for correction, but may be slower and more prone to error including upside down pages.</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
            <seealso cref="P:IronOcr.OcrResult.Page.Rotation" />
        </member>
        <member name="M:IronOcr.OcrInput.Deskew(System.Int32)">
            <summary>
            Rotates an image so it is the right way up and orthogonal. This is very useful for OCR because Tesseract tolerance for skewed scans can be as low as 5 degrees.
            <para>This also helps when producing searchable PDF documents from IronTesseract because the pages will likely all be the right way up.</para><para>This version uses only  Hough transform to make minor correction. Example:  pages that where  put in a scanner at a slight angle.</para></summary>
            <param name="MaxDeskewAngle">Maximum angle of skew to correct for. Higher values can lead to more opportunity for correction, but may be slower and more prone to error including upside down pages.</param>
            <returns>Returns a boolean result of whether or not IronOCR was able to detect image orientation. True = Deskew was applied. False = Failed to detect image orientation and image remains unchanged.</returns>
            <seealso cref="P:IronOcr.OcrResult.Page.Rotation" />
        </member>
        <member name="M:IronOcr.OcrInput.Scale(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Scales the OCRInput pages up in size.
            </summary>
            <param name="MaxHeight">Maximum height in pixels.</param>
            <param name="MaxWidth">Maximum width in pixels.</param>
            <param name="ScaleCropArea">Should associated crop areas also be scaled proportionally (recommended true)</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.WithTitle(System.String)">
            <summary>
            Adds a Title to the OcrInput Document.  This title will be used when calling <see cref="M:IronOcr.OcrResult.SaveAsHocrFile(System.String)" /> and <see cref="M:IronOcr.OcrResult.SaveAsSearchablePdf(System.String)" /></summary>
            <param name="Title">The document title as a string.</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Scale(System.Int32,System.Boolean)">
            <summary>
            Scales OCRInput pages proportionally.
            </summary>
            <param name="Percentage">The percentage scale.  100 = no effect.</param>
            <param name="ScaleCropArea">Should associated crop areas also be scaled proportionally (recommended true)</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.EnhanceResolution(System.Int32)">
            <summary>
            Enhances the resolution of low quality images.  This filter is not often needed because <see cref="F:IronOcr.OcrInput.TargetDPI" /> will automatically catch and resolve low resolution inputs.
            <para>May not work for all images if their metadata is corrupted.</para></summary>
            <param name="TargetDPI">The target DPI to resample to.</param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.AdaptiveThreshold(System.Nullable{System.Single})">
            <summary>
            Applies Bradley Adaptive Threshold to the image.
            <para>Adaptive thresholding is the method where the threshold value is calculated for smaller regions and therefore, there will be different threshold values for different regions.</para></summary>
            <param name="thresholdLimit">
            Threshold limit (0.0-1.0) to consider for binarization.
            <para>0.0 to consider threshold is completely white</para><para>1.0 to consider threshold is completely black</para></param>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.OrientPagesWithOSD(IronOcr.OcrLanguage,IronOcr.OrientationConfidence)">
            <exclude />
        </member>
        <member name="M:IronOcr.OcrInput.OrientPagesWithOSD(IronOcr.IronTesseract,IronOcr.OrientationConfidence)">
            <exclude />
        </member>
        <member name="M:IronOcr.OcrInput.Deskew(System.Int32,System.Boolean)">
            <exclude />
        </member>
        <member name="M:IronOcr.OcrInput.Deskew(IronOcr.OcrLanguage,System.Int32,IronOcr.OrientationConfidence)">
            <exclude />
        </member>
        <member name="M:IronOcr.OcrInput.Deskew(IronOcr.IronTesseract,System.Int32,IronOcr.OrientationConfidence)">
            <exclude />
        </member>
        <member name="M:IronOcr.OcrInput.DeepCleanBackgroundNoise">
            <summary>
            Heavy background noise removal. Only use this filter in case extreme document background noise is known, because this filter will also risk reducing OCR accuracy of clean documents, and is very CPU expensive.
            </summary>
            <returns>This <see cref="T:IronOcr.OcrInput" /> object allowing for LINQ style fluent notation.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.FindTextRegion(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Use computer vision to detect regions which contain text elements on each page
            </summary>
            <param name="Scale">(Only used during text region detection) Resolution scale factor. Image width and height will be multiplied by this value.</param>
            <param name="DilationAmount">(Only used during text region detection) Dilation amount, in pixels. Text areas width and height will be increased by this value.</param>
            <param name="Binarize">(Only used during text region detection) True to convert the image to black and white, False otherwise</param>
            <param name="Invert">(Only used during text region detection) True to invert image colors when binarizing, False otherwise</param>
        </member>
        <member name="M:IronOcr.OcrInput.FindMultipleTextRegions(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Use computer vision to detect areas which contain text elements and divide the input into separate images based on text regions.
            </summary>
            <returns>List of rectangles which contain text elements</returns>
            <param name="Scale">(Only used during text region detection) Resolution scale factor. Image width and height will be multiplied by this value.</param>
            <param name="DilationAmount">(Only used during text region detection) Dilation amount, in pixels. Text areas width and height will be increased by this value.</param>
            <param name="Binarize">(Only used during text region detection) True to convert the image to black and white, False otherwise</param>
            <param name="Invert">(Only used during text region detection) True to invert image colors during binarization, False otherwise</param>
            <remarks>Useful for generating several OCR results from a single image/page</remarks>
        </member>
        <member name="M:IronOcr.OcrInput.PageCount">
            <summary>
            The number of <see cref="T:IronOcr.OcrInput.Page" />s currently present in this <see cref="T:IronOcr.OcrInput" /></summary>
            <returns />
        </member>
        <member name="P:IronOcr.OcrInput.Pages">
            <summary>
            Access to every <see cref="T:IronOcr.OcrInput.Page" /> within this <see cref="T:IronOcr.OcrInput" /></summary>
        </member>
        <member name="T:IronOcr.OcrInput.Page">
            <summary>
            A full page (one image) within an <see cref="T:IronOcr.OcrInput" /> object.
            </summary>
        </member>
        <member name="P:IronOcr.OcrInput.Page.Width">
            <summary>
            Width in Pixels
            </summary>
        </member>
        <member name="P:IronOcr.OcrInput.Page.HorizontalDPI">
            <summary>
            Resolution in DPI on X axis
            </summary>
        </member>
        <member name="P:IronOcr.OcrInput.Page.VerticalDPI">
            <summary>
            Resolution in DPI on Y axis
            </summary>
        </member>
        <member name="P:IronOcr.OcrInput.Page.Height">
            <summary>
            Height in Pixels
            </summary>
        </member>
        <member name="P:IronOcr.OcrInput.Page.Index">
            <summary>
            Zero based page number
            </summary>
        </member>
        <member name="M:IronOcr.OcrInput.Page.Remove">
            <summary>
            Removes a page from this <see cref="T:IronOcr.OcrInput" /></summary>
        </member>
        <member name="P:IronOcr.OcrInput.Page.ContentArea">
            <summary>
             Crop area of this page.  If not null, text will only be read from within the ContentArea rectangle.
            </summary>
        </member>
        <member name="M:IronOcr.OcrInput.Page.ToBitmap">
            <summary>
            Outputs this page as a <see cref="T:IronSoftware.Drawing.AnyBitmap" /></summary>
            <returns>A native bitmap image.</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Page.DrawRectangleOnPage(IronSoftware.Drawing.CropRectangle,IronSoftware.Drawing.Color)">
            <summary>
            Draw a Rectangle on a <see cref="T:IronOcr.OcrInput.Page" />.
            </summary>
            <param name="CropRect">Crop Rectangle</param>
            <param name="rectangleColor">Color for pen of rectangle border</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Page.GetCropRectangleImage">
            <summary>
            Draw a Rectangle on a <see cref="T:IronOcr.OcrInput.Page" />.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Page.GetTextRegions(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Use computer vision to detect areas which contain text elements and return a list of rectangles.
            </summary>
            <returns>List of rectangles which contain text elements</returns>
            <param name="Scale">(Only used during text region detection) Resolution scale factor. Image width and height will be multiplied by this value.</param>
            <param name="DilationAmount">(Only used during text region detection) Dilation amount, in pixels. Text areas width and height will be increased by this value.</param>
            <param name="Binarize">(Only used during text region detection) True to convert the image to black and white, False otherwise</param>
            <param name="Invert">(Only used during text region detection) True to invert image colors when binarizing, False otherwise</param>
            <remarks>Useful for generating several OCR results from a single image/page</remarks>
        </member>
        <member name="M:IronOcr.OcrInput.Page.FindTextRegion(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Use computer vision to detect regions which contain text elements and instruct Tesseract to only search for text within the area in which text was detected.
            </summary>
            <param name="Scale">(Only used during text region detection) Resolution scale factor. Image width and height will be multiplied by this value.</param>
            <param name="DilationAmount">(Only used during text region detection) Dilation amount, in pixels. Text areas width and height will be increased by this value.</param>
            <param name="Binarize">(Only used during text region detection) True to convert the image to black and white, False otherwise</param>
            <param name="Invert">(Only used during text region detection) True to invert image colors when binarizing, False otherwise</param>
            <returns>Rectangle which contains text elements</returns>
        </member>
        <member name="M:IronOcr.OcrInput.Page.FindMultipleTextRegions(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Use computer vision to detect areas which contain text elements and divide the page into separate images based on text regions.
            </summary>
            <returns>List of rectangles which contain text elements</returns>
            <param name="Scale">(Only used during text region detection) Resolution scale factor. Image width and height will be multiplied by this value.</param>
            <param name="DilationAmount">(Only used during text region detection) Dilation amount, in pixels. Text areas width and height will be increased by this value.</param>
            <param name="Binarize">(Only used during text region detection) True to convert the image to black and white, False otherwise</param>
            <param name="Invert">(Only used during text region detection) True to invert image colors when binarizing, False otherwise</param>
            <returns>A list of pages - one for each text region</returns>
            <remarks>Useful for generating several OCR results from a single image/page</remarks>
        </member>
        <member name="M:IronOcr.OcrInput.Page.SaveAsImage(System.String)">
            <summary>
            Saves this page as a Bitmap file to a specified path.
            <param name="Path">A file path.</param></summary>
        </member>
        <member name="M:IronOcr.OcrInput.Page.SaveAsImage(System.String,IronSoftware.Drawing.AnyBitmap.ImageFormat)">
            <summary>
            Saves this page as an image file of specified format.
            <param name="Path">A file path.</param><param name="Format">The desired image file format.</param></summary>
        </member>
        <member name="F:IronOcr.OcrInput.OriginalPdfPageDimensions">
            <summary>
            Page dimensions of the original PDF pages used to de-upscale the pages back from Tesseract after a read.
            </summary>
        </member>
        <member name="M:IronOcr.OcrInput.AddRange(IronOcr.OcrInput)">
            <summary>
            Combines 2 instances of <see cref="T:IronOcr.OcrInput" />, appending pages to the end of this OcrInput document.
            </summary>
            <param name="Range">An Ocr Input to be appended to this instance.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds an IEnumerable of Images to  this <see cref="T:IronOcr.OcrInput" />.
            <para>Supports FilePaths, SixLabors.ImageSharp.Image, IronSoftware.Drawing.AnyBitmap, Streams &amp; ByteArray.</para></summary>
            <param name="Images">Adds an IEnumerable of objects representing images. Supports FilePaths, SixLabors.ImageSharp.Image, IronSoftware.Drawing.AnyBitmap, Streams &amp; byte[].</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddRange(System.Collections.Generic.IEnumerable{System.Object},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds an IEnumerable of Images to this <see cref="T:IronOcr.OcrInput" />.
            <para>Supports FilePaths, SixLabors.ImageSharp.Image, IronSoftware.Drawing.AnyBitmap, Streams &amp; ByteArray.</para></summary>
            <param name="Images">Adds an IEnumerable of objects representing images. Supports FilePaths, SixLabors.ImageSharp.Image, IronSoftware.Drawing.AnyBitmap, Streams &amp; byte[].</param>
            <param name="ContentArea">Specifies a region of the images to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(SixLabors.ImageSharp.Image)">
            <summary>
            Adds a SixLabors.ImageSharp.Image to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="Image">A managed Image object.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(SixLabors.ImageSharp.Image,IronSoftware.Drawing.CropRectangle[])">
            <summary>
            Adds a SixLabors.ImageSharp.Image to this <see cref="T:IronOcr.OcrInput" /> with many content area regions. If an empty array is supplied, will use whole image instead.
            <p>Note: Output PDF of SaveAsSearchablePdf when using multiple Crop Rectangles will generate one page per Rectangle/&gt;</p></summary>
            <param name="Image">A managed Image object.</param>
            <param name="Rectangles">Array of crop rectangles of various content regions.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle[])">
            <summary>
            Adds a <see cref="T:IronSoftware.Drawing.AnyBitmap" /> to this <see cref="T:IronOcr.OcrInput" /> with many content area regions. If an empty array is supplied, will use whole image instead.
            <p>Note: Output PDF of SaveAsSearchablePdf when using multiple Crop Rectangles will generate one page per Rectangle/&gt;</p></summary>
            <param name="Bitmap">A managed <see cref="T:IronSoftware.Drawing.AnyBitmap" /> object.</param>
            <param name="Rectangles">Array of crop rectangles of various content regions.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(SixLabors.ImageSharp.Image,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a SixLabors.ImageSharp.Image to this <see cref="T:IronOcr.OcrInput" />.
            Adds a <see cref="T:SixLabors.ImageSharp.Image" /> to  this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="Image">A managed Image object.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(IronSoftware.Drawing.AnyBitmap)">
            <summary>
            Adds a <see cref="T:IronSoftware.Drawing.AnyBitmap" /> to  this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="Bitmap">A managed <see cref="T:IronSoftware.Drawing.AnyBitmap" /> object.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a <see cref="T:IronSoftware.Drawing.AnyBitmap" /> to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="Bitmap">A managed <see cref="T:IronSoftware.Drawing.AnyBitmap" /> object.</param>
            <param name="ContentArea">Optionally specifies a region of the bitmap to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(System.String)">
            <summary>
            Adds an image file to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="ImagePath">File path to an image file.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(System.String,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds an image file to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="ImagePath">File path to an image file.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(System.IO.Stream)">
            <summary>
            Adds a <see cref="T:System.IO.Stream" /> containing the raw data of an image to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="ImageStream">A Stream containing an image.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(System.IO.Stream,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a <see cref="T:System.IO.Stream" /> containing the raw data of an image to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="ImageStream">A Stream containing an image.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(System.Byte[])">
            <summary>
            Adds a byte array containing the binary data of an image to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="ImageBytes">A byte[] containing an image.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddImage(System.Byte[],IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a byte array containing the binary data of an image to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="ImageBytes">A byte[] containing an image.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddMultiFrameTiff(System.String)">
            <summary>
            Adds a Multi-frame TIFF file to the OcrInput document.
            <para>Each Frame will become a page of this OcrInput</para></summary>
            <param name="ImagePath">A file path to a TIFF image.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddMultiFrameTiff(System.String,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a Multi-frame TIFF file to the OcrInput document.
            <para>Each Frame will become a page of this OcrInput</para></summary>
            <param name="ImagePath">A file path to a TIFF image.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddMultiFrameTiff(System.IO.Stream)">
            <summary>
            Adds a Stream containing the binary data of a TIFF image with multiple pages to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="TiffStream">A <see cref="T:System.IO.Stream" /> containing a TIFF file .</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddMultiFrameTiff(System.IO.Stream,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a Stream containing the binary data of a TIFF image with multiple pages to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="TiffStream">A <see cref="T:System.IO.Stream" /> containing a TIFF file .</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddMultiFrameTiff(System.Byte[])">
            <summary>
            Adds a byte[] containing the binary data of a TIFF image with multiple pages to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="TiffBytes">A byte[] containing a TIFF file.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddMultiFrameTiff(System.Byte[],IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a byte[] containing the binary data of a TIFF image with multiple pages to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="TiffBytes">A byte[] containing a TIFF file.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddFrameFromTiff(System.String,System.Int32,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a single frame (a page) from a Multi-frame TIFF file to the OcrInput document.  The Tiff may be input as a file, byte array or stream.
            <para>Each Frame will become a page of this OcrInput</para></summary>
            <param name="TiffPath">A file path to a TIFF image.</param>
            <param name="FrameIndex">Zero based frame number.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddFrameFromTiff(System.Byte[],System.Int32,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a single frame (a page) from a Multi-frame TIFF file to the OcrInput document.  The Tiff may be input as a file, byte array or stream.
            <para>Each Frame will become a page of this OcrInput</para></summary>
            <param name="TiffBytes">A byte[] containing a TIFF file.</param>
            <param name="FrameIndex">Zero based frame number.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.AddFrameFromTiff(System.IO.Stream,System.Int32,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a single frame (a page) from a Multi-frame TIFF file to the OcrInput document.  The Tiff may be input as a file, byte array or stream.
            <para>Each Frame will become a page of this OcrInput</para></summary>
            <param name="TiffStream">A Stream containing a TIFF file.</param>
            <param name="FrameIndex">Zero based frame number.</param>
            <param name="ContentArea">Optionally specifies a region of the image to extract text from as a <see cref="T:IronSoftware.Drawing.CropRectangle" /> with X, Y Width and Height in pixels.  Setting a ContentArea can improve OCR speed.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.String,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds an image to this this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imageFilePath">File path to an image file.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Area of the image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.Collections.Generic.IEnumerable{System.String},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds images to this this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imageFilePaths">IEnumerable of image file paths.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Area of the every image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.IO.Stream,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a <see cref="T:System.IO.Stream" /> containing the raw data of an image to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="sourceStream">A Stream containing an image. Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Area of the image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.Collections.Generic.IEnumerable{System.IO.Stream},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds an IEnumerable of <see cref="T:System.IO.Stream" /> of image raw data to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="sourceStreams">A IEnumerable of Streams containing raw data of images. Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Area of the every image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.Byte[],IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a byte array containing the binary data of an image to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imageAsByteArray">A byte[] containing an image.  Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Area of the image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.Collections.Generic.IEnumerable{System.Byte[]},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a IEnumerable of byte array containing the binary data of images to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imagesAsByteArrays">A IEnumerable of byte[] containing image data. Supported formats include JPEG, TIFF, GIF, PNG, PDF, BMP.</param>
            <param name="ContentArea">Area of the every image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a <see cref="T:IronSoftware.Drawing.AnyBitmap" /> to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imageAsBitmap">A managed <see cref="T:IronSoftware.Drawing.AnyBitmap" /> object.</param>
            <param name="ContentArea">Area of the image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(SixLabors.ImageSharp.Image,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a <see cref="T:SixLabors.ImageSharp.Image" /> to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="image">A managed Image object.</param>
            <param name="ContentArea">Area of the image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.Collections.Generic.IEnumerable{SixLabors.ImageSharp.Image},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds an IEnumerable of SixLabors.ImageSharp.Images to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="images">IEnumerable of managed Image objects.</param>
            <param name="ContentArea">Area of the every image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.Collections.Generic.IEnumerable{IronSoftware.Drawing.AnyBitmap},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a IEnumerable of <see cref="T:IronSoftware.Drawing.AnyBitmap" /> to this <see cref="T:IronOcr.OcrInput" />. 
            </summary>
            <param name="imageAsBitmaps">An IEnumerable of managed <see cref="T:IronSoftware.Drawing.AnyBitmap" /> objects.</param>
            <param name="ContentArea">Area of the every image to use with IronOCR.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(IronOcr.OcrInput,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds all pages of an OcrInput to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imageAsOcrInput">OcrInput object to be added to this OcrInput.</param>
            <param name="ContentArea">Area to use of each page of the OcrInput object.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(IronOcr.OcrInput.Page,IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a OcrInput <see cref="T:IronOcr.OcrInput.Page" /> to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imageAsOcrInputPage">Page to be added.</param>
            <param name="ContentArea">Area of the page to be added.</param>
        </member>
        <member name="M:IronOcr.OcrInput.Add(System.Collections.Generic.IEnumerable{IronOcr.OcrInput.Page},IronSoftware.Drawing.CropRectangle)">
            <summary>
            Adds a IEnumerable of OcrInput <see cref="T:IronOcr.OcrInput.Page" /> to this <see cref="T:IronOcr.OcrInput" />.
            </summary>
            <param name="imagesAsOcrInputPages">Pages to be added.</param>
            <param name="ContentArea">Area of every page to be added.</param>
        </member>
        <member name="T:IronOcr.OcrFilters">
            <summary>
            A collection of OCR Image filter for processing Images.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.None">
            <summary>
            No filter for processing images.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Rotate">
            <summary>
            Rotates images by a number of degrees clockwise. For anti-clockwise, use negative numbers.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Deskew">
            <summary>
            Rotates an image so it is the right way up and orthogonal . This is very useful for OCR because Tesseract tolerance for skewed scans can be as low as 5 degrees.
            <para>This also helps when producing searchable PDF documents from IronTesseract because the pages will likely all be the right way up.</para><para>This version uses only  Hough transform to make minor correction. Example:  pages that where  put in a scanner at a slight angle.</para></summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Invert">
            <summary>
            Inverts every color. E.g. White becomes black : black becomes white.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.DeNoise">
            <summary>
            Removes digital noise. This filter should only be used where noise is expected. Flattens Alpha channels to white.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Scale">
            <summary>
            Scales images up in size by specify width and height.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Sharpen">
            <summary>
            Sharpens blurred OCR Documents.  Applies a Gaussian sharpening filter to image.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Contrast">
            <summary>
            Increases contrast automatically. This filter often improves OCR speed and accuracy in low contrast scans.
            <para>Amount which is used to adjust contrast. A value of 0 will create an image that is completely gray. A value of 1 leaves the input unchanged.</para><para>Amount values greater than 0 increase contrast making light areas lighter and dark areas darker.</para><para>Amount values less than 0 decrease contrast - decreasing variety of contrast.</para></summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Dilate">
            <summary>
            Advanced Morphology. Opposite of <see cref="F:IronOcr.OcrFilters.Erode" />.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Erode">
            <summary>
            Advanced Morphology. Opposite of <see cref="F:IronOcr.OcrFilters.Dilate" />.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Binarize">
            <summary>
            This image filter turns every pixel black or white with no middle ground. May Improve OCR performance cases of very low contrast of text to background.
            </summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Open">
            <summary>
            Advanced Morphology. Opposite of <see cref="F:IronOcr.OcrFilters.Close" /><para>Opening is just another name of erosion followed by dilation. It is useful in removing noise.</para></summary>
        </member>
        <member name="F:IronOcr.OcrFilters.Close">
            <summary>
            Advanced Morphology. Opposite of <see cref="F:IronOcr.OcrFilters.Open" /><para>Closing is reverse of Opening, Dilation followed by Erosion. It is useful in closing small holes inside the foreground objects.</para></summary>
        </member>
        <member name="F:IronOcr.OcrFilters.AdaptiveThreshold">
            <summary>
            Applies Bradley Adaptive Threshold to the image.
            </summary>
        </member>
        <member name="T:IronOcr.OrientationConfidence">
            A class that defines and measures confidence thresholds for Hough Transforms used in <see cref="M:IronOcr.OcrInput.Deskew(System.Int32)" /> method calls.
        </member>
        <member name="P:IronOcr.OrientationConfidence.MinConfidence">
            <summary>
             A confidence threshold.  If this criteria is not met, pages will not be rotated by OSD.  MinConfidence of zero means OSD id full automatic and trusted.
            </summary>
        </member>
        <member name="P:IronOcr.OrientationConfidence.ActualConfidence">
            <summary>
            An array of the actual Teseract  OSD confidences returned, one per page. If these values are lower than <see cref="P:IronOcr.OrientationConfidence.MinConfidence" />, then the page will not be rotated.
            </summary>
        </member>
        <member name="T:IronOcr.OcrInputFilterWizard">
            <summary>
                <para>OcrInputFilterWizard provides a brute-force filter assessment tool to try filter combinations within IronOCR to get the highest IronTesseract confidence.</para>
                <para>Simply call the <see cref="M:IronOcr.OcrInputFilterWizard.Run(System.String,System.String@,System.Double@,IronOcr.IronTesseract)" /> method with a image filepath, and optionally a Tesseract.</para>
                <para>Out variables include the result of the best combination's read, and the best confidence.</para>
                <para>Example use: var results = OcrInputFilterWizard.Run("img.png", out string text, out double confidence);</para>
            </summary>
        </member>
        <member name="M:IronOcr.OcrInputFilterWizard.Run(System.String,System.String@,System.Double@,IronOcr.IronTesseract)">
            <summary>
                <para>This method applies a brute-force filter assessment tool to try filter combinations within IronOCR to get the highest IronTesseract confidence.</para>
                <para>Out variables include the result of the best combination's read text, and the best confidence.</para>
                <para>Example use: OcrInputFilterWizard.Run("img.png", out string text, out double confidence);</para>
                <para>Please note that this is a debug method which is CPU-intensive. When using a large PDF it may be wise to only scan a single page rather than the whole document.</para>
            </summary>
            <param name="filePath">Relative or Absolute filepath to image to run wizard on.</param>
            <param name="bestReadResult">Out-variable of the best filter combination Tesseract string read result.</param>
            <param name="ironOcrConfidence">Out-variable of confidence of the best read result from Tesseract itself.</param>
            <param name="tesseract">Optional Tesseract to include. Can be used if multiple languages need to be read.</param>
            <returns>Code to use to reproduce the best confidence result as a multi-line string.</returns>
        </member>
        <member name="M:IronOcr.OcrInputFilterWizard.Run(System.String,System.String@,IronOcr.IronTesseract)">
            <summary>
                <para>This method applies a brute-force filter assessment tool to try filter combinations within IronOCR to get the highest IronTesseract confidence.</para>
                <para>Out variables include the result of the best combination's read text.</para>
                <para>Example use: OcrInputFilterWizard.Run("img.png", out string bestReadResult);</para>
                <para>Please note that this is a debug method which is CPU-intensive. When using a large PDF it may be wise to only scan a single page rather than the whole document.</para>
            </summary>
            <param name="filePath">Relative or Absolute filepath to image to run wizard on.</param>
            <param name="bestReadResult">Out-variable of the best filter combination Tesseract string read result.</param>
            <param name="tesseract">Optional Tesseract to include. Can be used if multiple languages need to be read.</param>
            <returns>Code to use to reproduce the best confidence result as a multi-line string.</returns>
        </member>
        <member name="M:IronOcr.OcrInputFilterWizard.Run(System.String,System.Double@,IronOcr.IronTesseract)">
            <summary>
                <para>This method applies a brute-force filter assessment tool to try filter combinations within IronOCR to get the highest IronTesseract confidence.</para>
                <para>Out variables include the result of the best confidence.</para>
                <para>Example use: OcrInputFilterWizard.Run("img.png", out double confidence);</para>
                <para>Please note that this is a debug method which is CPU-intensive. When using a large PDF it may be wise to only scan a single page rather than the whole document.</para>
            </summary>
            <param name="filePath">Relative or Absolute filepath to image to run wizard on.</param>
            <param name="ironOcrConfidence">Out-variable of confidence of the best read result from Tesseract itself.</param>
            <param name="tesseract">Optional Tesseract to include. Can be used if multiple languages need to be read.</param>
            <returns>Code to use to reproduce the best confidence result as a multi-line string.</returns>
        </member>
        <member name="M:IronOcr.OcrInputFilterWizard.Run(System.String,IronOcr.IronTesseract)">
            <summary>
                <para>This method applies a brute-force filter assessment tool to try filter combinations within IronOCR to get the highest IronTesseract confidence.</para>
                <para>Example use: OcrInputFilterWizard.Run("img.png");</para>
                <para>Please note that this is a debug method which is CPU-intensive. When using a large PDF it may be wise to only scan a single page rather than the whole document.</para>
            </summary>
            <param name="filePath">Relative or Absolute filepath to image to run wizard on.</param>
            <param name="tesseract">Optional Tesseract to include. Can be used if multiple languages need to be read.</param>
            <returns>Code to use to reproduce the best confidence result as a multi-line string.</returns>
        </member>
        <member name="M:IronOcr.OcrReadTask.Cancel">
            <summary>
            Abort the associated Ocr reading
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult">
            <summary>
             A full document object model (DOM) for results when <see cref="T:IronOcr.IronTesseract" /> reads an image or <see cref="T:IronOcr.OcrInput" />.
            <para>Gives access to Text, Pages, Words, Paragraphs, Lines, Words, Characters,  Images, Barcodes, Coordinates, Font information in granular detail.</para></summary>
        </member>
        <member name="T:IronOcr.OcrResult.Barcode">
            <summary>
            Represents a barcode discovered during OCR.  See <see cref="F:IronOcr.TesseractConfiguration.ReadBarCodes" /> which must be set true to use this feature.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Barcode.BarcodeNumber">
            <summary>
            One based number of this barcode within the <see cref="T:IronOcr.OcrResult" /> document.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Barcode.Value">
            <summary>
            Text value of the barcode.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Barcode.Format">
            <summary>
            Barcode format / type.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Barcode.Text">
            <summary>
            Text value of the barcode. Synonym of <see cref="P:IronOcr.OcrResult.Barcode.Value" />.
            </summary>
        </member>
        <member name="M:IronOcr.OcrResult.Barcode.ToString">
            <summary>
            Text value of the barcode. Synonym of <see cref="P:IronOcr.OcrResult.Barcode.Value" />.
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.Block">
            <summary>
            Represents a block of text containing zero or more paragraphs.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Block.Paragraphs">
            <summary>
            Every paragraph of text within this block.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Block.Lines">
            <summary>
            Every line of text within this block.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Block.Words">
            <summary>
            Every word of text within this block - in order.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Block.Characters">
            <summary>
            Every character of text within this block - in order.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Block.BlockNumber">
            <summary>
            A unique ID for this Block within its <see cref="T:IronOcr.OcrResult" /> object.  The first block will be numbered 1.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Block.BlockType">
            <summary>
             A string representation of the type of block.
            <para>See https://github.com/charlesw/tesseract/blob/master/src/Tesseract/PolyBlockType.cs</para></summary>
        </member>
        <member name="T:IronOcr.OcrResult.Character">
            <summary>
            Represents a single character (char) of text.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Character.Block">
            <summary>
            The block of text containing this character.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Character.Paragraph">
            <summary>
            The paragraph of text containing this character.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Character.Line">
            <summary>
            The line of text containing this character.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Character.Word">
            <summary>
            The word containing this character.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Character.Font">
            <summary>
            Detailed font information for this character.  May only be visible using <see cref="F:IronOcr.TesseractEngineMode.TesseractOnly" />.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Character.CharacterNumber">
            <summary>
            A unique ID number for this character within the document. The first character will be 1.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Character.Choices">
            <summary>
            A list of alternative words choices and their statistical relevance. 
            </summary>
        </member>
        <member name="M:IronOcr.OcrResult.Character.ToChar">
            <summary>
            Converts this object to a <see cref="T:System.Char" /></summary>
            <returns>A single character</returns>
        </member>
        <member name="T:IronOcr.OcrResult.Choice">
            <summary />
        </member>
        <member name="F:IronOcr.OcrResult.Choice.Text">
            <summary>
            The text for this word choice.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Choice.Confidence">
            <summary>
             Statistical Confidence as a percentage.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Cancelled">
            <summary>
            Indicates that the Ocr reading was cancelled by the user or after a timeout
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.TesseractVersion">
            <summary>
            The <see cref="T:IronOcr.TesseractVersion" /> used to generate this <see cref="T:IronOcr.OcrResult" />. 
            </summary>
            <seealso cref="T:IronOcr.TesseractVersion" />
        </member>
        <member name="P:IronOcr.OcrResult.Text">
            <summary>
            Returns the entire Text content of this OCR document.  4 <see cref="P:System.Environment.NewLine" /> characters will separate pages.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Confidence">
            <summary>
            OCR statistical accuracy confidence as an average of every character. <para> 1 = 100%, 0 = 0%</para></summary>
        </member>
        <member name="P:IronOcr.OcrResult.Pages">
            <summary>
             Represents every page within this <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
        </member>
        <member name="M:IronOcr.OcrResult.SaveAsTextFile(System.String)">
            <summary>
             Exports a .txt version of the Tesseract results objects document. This is a plain text file. 
             <para> 4 Environment.Newlines between pages. 2 Environment.Newlines between paragraphs.</para></summary>
            <param name="Path">The file path the text file will be saved to.</param>
        </member>
        <member name="M:IronOcr.OcrResult.SaveAsSearchablePdfBytes">
            <summary>
             Exports a searchable PDF version of the OCR input document as a byte array.    Works for all input formats including PDFs &amp; Images.
            </summary>
        </member>
        <member name="M:IronOcr.OcrResult.SaveAsSearchablePdfStream">
            <summary>
            Exports a searchable PDF version of the OCR input document as a Stream.    Works for all input formats including PDFs &amp; Images.
            </summary>
        </member>
        <member name="M:IronOcr.OcrResult.SaveAsSearchablePdf(System.String)">
            <summary>
             Exports a searchable PDF version of the OCR input document.    Works for all input formats including PDFs &amp; Images.
            </summary>
            <param name="Path">The file path the PDF will be saved to.</param>
        </member>
        <member name="M:IronOcr.OcrResult.SaveAsHocrString">
            <summary>
             Exports an hOCR version of the Tesseract results object document as a string. This is an XHTML file which can be read as XML or HTML.
             <para>https://en.wikipedia.org/wiki/HOCR</para></summary>
        </member>
        <member name="M:IronOcr.OcrResult.SaveAsHocrFile(System.String)">
            <summary>
             Exports an hOCR version of the Tesseract results object document. This is an XHTML file which can be read as XML or HTML.
             <para>https://en.wikipedia.org/wiki/HOCR</para></summary>
            <param name="Path">The file path the xhtml file will be saved to.</param>
        </member>
        <member name="P:IronOcr.OcrResult.Barcodes">
            <summary>
            Represents every barcode  discovered in this OCR document.  Developers must set <see cref="F:IronOcr.TesseractConfiguration.ReadBarCodes" /> = True for this feature to be active.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Blocks">
            <summary>
            Represents every block of text discovered in this OCR document in order of appearance. A Block is a collection of 1 or more paragraphs located closely  together.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Paragraphs">
            <summary>
            Represents every paragraph of text discovered in this OCR document in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Lines">
            <summary>
            Represents every line of text discovered in this OCR document in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Words">
            <summary>
            Represents every word discovered in this OCR document in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Characters">
            <summary>
            Represents every symbol (char) discovered in this OCR document in order of appearance.
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.Line">
            <summary>
            A line of text within an <see cref="F:IronOcr.OcrResult.Line.Paragraph" /></summary>
        </member>
        <member name="F:IronOcr.OcrResult.Line.Block">
            <summary>
            The <see cref="F:IronOcr.OcrResult.Line.Block" /> of text which contains this line.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Line.Paragraph">
            <summary>
            The <see cref="F:IronOcr.OcrResult.Line.Paragraph" /> which contains this line of text.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Line.Words">
            <summary>
            Every <see cref="T:IronOcr.OcrResult.Word" /> contained within this Line. In order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Line.Characters">
            <summary>
            Every symbol (char) contained within this Line. In order of appearance.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Line.BaselineAngle">
            <summary>
            Angle at which this line of text slopes.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Line.BaselineOffset">
            <summary>
            pixel offset defining how this line of text slopes.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Line.LineNumber">
            <summary>
            One based line number (identified) within this <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.OcrFont">
            <summary>
            Detailed font information returned when using  Tesseract OEM engine modes.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.IsSmallCaps">
            <summary>
            Is the text in "Small Caps" (half height capital letters). 
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.IsBold">
            <summary>
            Is the text Bold.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.IsItalic">
            <summary>
            Is the text Italic.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.IsSerif">
            <summary>
            Is the text Serif (like Times-New Roman).
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.IsUnderlined">
            <summary>
            Is the text Underlined.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.IsFixedWidth">
            <summary>
            Is the text FixedWidth (monospaced like Courier). 
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.IsCaligraphic">
            <summary>
            Is the text in a calligraphic or "Fruktur" style. 
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.FontName">
            <summary>
            Best guess at the closest known typeface name.  
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrFont.FontSize">
            <summary>
            Best guess at the font height in points.  
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.OcrResultElement">
            <summary>
            Lowest level of abstract OcrResult DOM element.  All result objects extend from this including <see cref="T:IronOcr.OcrResult.Barcode" />, <see cref="T:IronOcr.OcrResult.Character" />,  <see cref="T:IronOcr.OcrResult.Word" />,  <see cref="T:IronOcr.OcrResult.Line" />,  <see cref="T:IronOcr.OcrResult.Paragraph" /> ...
            </summary>
        </member>
        <member name="M:IronOcr.OcrResult.OcrResultElement.ToBitmap(IronOcr.OcrInput)">
            <summary>
            Returns an image of this element.
            </summary>
            <param name="Input">The OcrInput document that was read by <see cref="T:IronOcr.IronTesseract" /></param>
            <returns>A <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</returns>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultElement.Width">
            <summary>
            Width in Pixels
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultElement.Height">
            <summary>
            Height in Pixels
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultElement.X">
            <summary>
            Position of this OCR Results object on the source image (page) in pixels counted from the left edge.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultElement.Y">
            <summary>
            Position of this OCR Results object on the source image (page) in pixels counted down from the top edge.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultElement.Location">
            <summary>
            Returns a <see cref="T:IronSoftware.Drawing.CropRectangle" /> of the location and size of this element within an OCR page.  Units are pixels and reference locations on the source image.
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.OcrResultTextElement">
            <summary>
            An abstract class representing discovered OCR DOM text elements such as <see cref="T:IronOcr.OcrResult.Character" />,  <see cref="T:IronOcr.OcrResult.Word" />,  <see cref="T:IronOcr.OcrResult.Line" />,  <see cref="T:IronOcr.OcrResult.Paragraph" /> ...
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultTextElement.TextDirection">
            <summary>
            The direction text was read in: such as 'Left to Right' or 'Top to Bottom'.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultTextElement.Text">
            <summary>
            The full text of this OcrResultElement as a string.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.OcrResultTextElement.Confidence">
            <summary>
            OCR statistical accuracy confidence as an average of every character within this object. <para> 1 = 100%, 0 = 0%</para></summary>
        </member>
        <member name="M:IronOcr.OcrResult.OcrResultTextElement.ToString">
            <summary>
            Full OCR text discovered within this object. <para> A synonym of <see cref="P:IronOcr.OcrResult.OcrResultTextElement.Text" /></para>.
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.Page">
            <summary>
            Represents a single page within an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Rotation">
            <summary>
            The number of degrees the original page has been rotated to produce this result.  
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Barcodes">
            <summary>
            Represents every barcode discovered in this Page.  Developers must set <see cref="F:IronOcr.TesseractConfiguration.ReadBarCodes" /> = True for this feature to be active.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.WordCount">
            <summary>
            The number of words on this page.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.PageNumber">
            <summary>
            A 1 based unique identifier for this page within an <see cref="T:IronOcr.OcrResult" /> object.  The first page is number 1.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Page.PdfExtractedText">
            <summary>
            When Reading PDFs.  Gives an alternative value to <see cref="P:IronOcr.OcrResult.Text" /> which comes from machine decoding PDF document strings only.  Can not read text from images.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Confidence">
            <summary>
            OCR statistical accuracy confidence as an average of every character. <para> 1 = 100%, 0 = 0%</para></summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Blocks">
            <summary>
            Represents every block of text discovered within this <see cref="T:IronOcr.OcrResult.Page" /> in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Paragraphs">
            <summary>
            Represents every paragraph of text discovered within this <see cref="T:IronOcr.OcrResult.Page" /> in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Lines">
            <summary>
            Represents every line of text discovered within this <see cref="T:IronOcr.OcrResult.Page" /> in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Words">
            <summary>
            Represents every word discovered within this <see cref="T:IronOcr.OcrResult.Page" /> in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.Characters">
            <summary>
            Represents every symbol (char) discovered within this <see cref="T:IronOcr.OcrResult.Page" /> in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Page.ContentArea">
            <summary>
            Represents the rectangular area of this <see cref="T:IronOcr.OcrResult.Page" />  page on which OCR has been applied. Dimensions are in Pixels.
            <para>Default value is the entire size of the Page.  Relates to <see cref="M:IronOcr.OcrInput.AddImage(IronSoftware.Drawing.AnyBitmap,IronSoftware.Drawing.CropRectangle)" /></para></summary>
        </member>
        <member name="M:IronOcr.OcrResult.Page.ContentAreaToBitmap(IronOcr.OcrInput)">
            <summary>
            Returns an image of the <see cref="P:IronOcr.OcrResult.Page.ContentArea" /> of this <see cref="T:IronOcr.OcrResult.Page" />.
            </summary>
            <param name="Input">The OcrInput document that was read by <see cref="T:IronOcr.IronTesseract" /></param>
            <returns>A <see cref="T:IronSoftware.Drawing.AnyBitmap" />.</returns>
        </member>
        <member name="T:IronOcr.OcrResult.Paragraph">
            <summary>
            Represents a paragraph of text with an <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Paragraph.Block">
            <summary>
            Represents the Block of text that contains this paragraph.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Paragraph.Lines">
            <summary>
            Represents every line of text in this paragraph.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Paragraph.Words">
            <summary>
            Represents every word in this paragraph, in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Paragraph.Characters">
            <summary>
            Represents every character  in this paragraph, in order of appearance.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Paragraph.ParagraphNumber">
            <summary>
            1 based unique numerical identifier for this paragraph within the <see cref="T:IronOcr.OcrResult" /> document.
            </summary>
        </member>
        <member name="M:IronOcr.OcrResult.ToJson">
            <summary>
            Serializes the <see cref="T:IronOcr.OcrResult" /> object to a JSON string.
            </summary>
            <remarks>Use the method <see cref="M:IronOcr.OcrResult.FromJson(System.String)" /> for deserializing the JSON to the <see cref="T:IronOcr.OcrResult" /> object.
            </remarks>
            <returns>
            The JSON string representation of the <see cref="T:IronOcr.OcrResult" />.
            </returns>
        </member>
        <member name="M:IronOcr.OcrResult.FromJson(System.String)">
            <summary>
            Deserializes the JSON to the <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <param name="json">A JSON string representation of the <see cref="T:IronOcr.OcrResult" />.</param>
            <returns>The deserialized <see cref="T:IronOcr.OcrResult" /> object from the JSON string.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> is null</exception>
        </member>
        <member name="M:IronOcr.OcrResult.SaveJsonAs(System.String)">
            <summary>
            Serializes the <see cref="T:IronOcr.OcrResult" /> object to a JSON file..
            </summary>
            <remarks>Use the method <see cref="M:IronOcr.OcrResult.ToJson" /> instead if you want to get the string instead of saving to disk.
            </remarks>
        </member>
        <member name="M:IronOcr.OcrResult.FromJsonFile(System.String)">
            <summary>
            Deserializes the JSON file to the <see cref="T:IronOcr.OcrResult" /> object.
            </summary>
            <remarks>Use the method <see cref="M:IronOcr.OcrResult.FromJson(System.String)" /> instead if you want deserialize from a JSON string.
            </remarks>
        </member>
        <member name="P:IronOcr.OcrResult.EngineModeUsed">
            <summary>
            The <see cref="T:IronOcr.TesseractEngineMode" /> used to generate this <see cref="T:IronOcr.OcrResult" />. 
            </summary>
            <seealso cref="T:IronOcr.TesseractEngineMode" />
        </member>
        <member name="T:IronOcr.OcrResult.TextFlow">
            <summary>
            Describes text direction
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.TextFlow.LeftToRight">
            <summary>
            LTR Languages such as English.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.TextFlow.RightToLeft">
            <summary>
            RTL Languages such as Arabic.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.TextFlow.TopToBottom">
            <summary>
            Vertical languages such as found in some forms of East Asian script.
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.Word">
            <summary>
            Represents a Word discovered during OCR.  
            </summary>
            <seealso cref="T:IronOcr.OcrResult" />
        </member>
        <member name="F:IronOcr.OcrResult.Word.Block">
            <summary>
            The <see cref="F:IronOcr.OcrResult.Word.Block" /> containing this Word.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Word.Paragraph">
            <summary>
            The <see cref="F:IronOcr.OcrResult.Word.Paragraph" /> containing this Word.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.Word.Line">
            <summary>
            The <see cref="F:IronOcr.OcrResult.Word.Line" /> containing this Word.
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Word.Characters">
            <summary>
            A list of every symbol (char) within this word in order. 
            </summary>
        </member>
        <member name="P:IronOcr.OcrResult.Word.WordNumber">
            <summary>
            1 based number to identify this word within the <see cref="T:IronOcr.OcrResult" /></summary>
        </member>
        <member name="P:IronOcr.OcrResult.Word.Font">
            <summary>
            Legacy. Null unless the Tesseract 3 Engine Mode "TesseractMode" is used.
            </summary>
        </member>
        <member name="T:IronOcr.OcrResult.BarcodeEncoding">
            <summary>
            Barcode Encoding Types.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Codabar">
            <summary>
                Codabar 1D barcode format.  Codabar is a linear barcode symbology developed in 1972 by Pitney Bowes Corp
              <para>Please Note: Codabar encodes numerical data (digits) only.</para></summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Code39">
            <summary>
                Code 39 1D barcode format. Code 39 is a variable length, discrete barcode symbology. The Code 39 specification defines 43 characters, consisting of uppercase letters (A through Z).
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Code93">
            <summary>
                Code 93 1D barcode format. Code 93 is a barcode symbology designed in 1982 by Intermec to provide a higher density and data security enhancement to Code 39.
                <para>Code 93 Supports encoding of only the following ASCII characters: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 - . $ / + % SPACE</para></summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Code128">
            <summary>
                Code 128 1D format. Code 128 is a high-density linear barcode symbology defined in ISO/IEC 15417:2007. It is used for alphanumeric or numeric-only barcodes.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.EAN8">
            <summary>
                EAN-8 1D barcode format. An EAN-8 is an EAN/UPC symbology barcode and is derived from the longer International Article Number (EAN-13) code.
               <para>Please Note: EAN-8 may only encode numerical (digits) content of length 7 or 8 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.EAN13">
            <summary>
                EAN-13 1D format. The International Article Number (also known as European Article Number or EAN) is a standard describing a barcode symbology and numbering system used in global trade to identify a specific retail product type, in a specific packaging configuration, from a specific manufacturer.Titf
                <para>Please Note: EAN-13 may only encode numerical (digits) content of length 12 or 13 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.ITF">
            <summary>
                 ITF (Interleaved Two of Five) 1D format.  ITF-14 is the GS1 implementation of an Interleaved 2 of 5 (ITF) bar code to encode a Global Trade Item Number. ITF-14 symbols are generally used on packaging levels of a product, such as a case box of 24 cans of soup. The ITF-14 will always encode 14 digits.s
               <para>Please Note: ITF encodes numerical data only. If the number if digits is not even, a '0' will automatically be prepended.</para></summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.UPCA">
            <summary>
                 UPC-A 1D format. The Universal Product Code (UPC) is a barcode symbology that is widely used in the United States, Canada, United Kingdom, Australia, New Zealand, in Europe and other countries for tracking trade items in stores. UPC (technically refers to UPC-A) consists of 12 numeric digits, that are uniquely assigned to each trade item. Along with the related EAN barcode, the UPC is the barcode mainly used for scanning of trade items at the point of sale, per GS1 specifications.
                 <para>Please Note: UPCA may only encode numerical (digits) content of length 12 or 13 digits long.   Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically.</para></summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.UPCE">
            <summary>
                 UPC-E 1D format. To allow the use of UPC barcodes on smaller packages, where a full 12-digit barcode may not fit, a 'zero-suppressed' version of UPC was developed, called UPC-E, in which the number system digit, all trailing zeros in the manufacturer code, and all leading zeros in the product code, are suppressed (omitted).MSI
                 <para>Please Note: UPCE may only encode numerical (digits) content of between 8 and more than 13 digits long.</para></summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.MSI">
            <summary>
                MSI 1D format.  MSI is a barcode symbology developed by the MSI Data Corporation, based on the original Plessey Code symbology.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Plessey">
            <summary>
                Plessey 1D format.  Plessey Code is a 1D linear barcode symbology based on pulse width modulation, developed in 1971 by The Plessey Company PLC, a British-based company.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Databar">
            <summary> 
                "RSS Expanded" or "GS1 Databar" barcode formats.   Includes 1D barcode and stacked 2D variants of this barcode format.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Rss14">
            <summary> 
                Reduce Space Symbology 14 barcode format. May represent a 1D barcode or Stacked 2D barcode.   RSS 14 barcode (Reduce Space Symbology) encodes the full 14-digit EAN.UCC item identification in a symbol that can be omni-directionally scanned by suitably configured point-of-sale laser scanners. It is the latest barcode type for space-constrained identification from EAN International and the Uniform Code Council, Inc.. RSS barcodes have been identified to target the grocery industry and in healthcare, where items are too small to allow for other barcode symbologies.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.PDF417">
            <summary> 
                PDF417 format.  PDF417 is a stacked linear barcode symbol format used in a variety of applications, primarily transport, identification cards, and inventory management. PDF stands for Portable Data File. The 417 signifies that each pattern in the code consists of 4 bars and spaces, and that each pattern is 17 units long. The PDF417 symbology was invented by Dr. Ynjiun P. Wang at Symbol Technologies in 1991. (Wang 1993) It is ISO standard 15438.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Aztec">
            <summary> 
                Aztec 2D barcode format.  Aztec Code is a type of 2D barcode invented by Andrew Longacre, Jr. and Robert Hussey in 1995. Named after the resemblance of the central finder pattern to an Aztec pyramid, Aztec code has the potential to use less space than other matrix barcodes because it does not require a surrounding blank "quiet zone".s
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.DataMatrix">
            <summary> 
                Data Matrix 2D barcode format. An example of a Data Matrix code, encoding the text: "Wikipedia, the free encyclopedia" A Data Matrix is a two-dimensional barcode consisting of black and white "cells" or modules arranged in either a square or rectangular pattern, also known as a matrix. The information to be encoded can be text or numeric data. Usual data size is from a few bytes up to 1556 bytes.
              </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.MaxiCode">
            <summary> 
                 MaxiCode 2D barcode format.  MaxiCode is a public domain, machine-readable symbol system originally created and used by United Parcel Service. Suitable for tracking and managing the shipment of packages, it resembles a barcode, but uses dots arranged in a hexagonal grid instead .
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.QRCode">
            <summary> 
                QR Code 2D barcode format.  QR code (abbreviated from Quick Response Code) is the trademark for a type of matrix barcode (or two-dimensional barcode) first designed in 1994 for the automotive industry in Japan. A barcode is a machine-readable optical label that contains information about the item to which it is attached. A QR code uses four standardized encoding modes (numeric, alphanumeric, byte/binary, and kanji) to efficiently store data; extensions may also be used.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.IntelligentMail">
            <summary> 
                Intelligent Mail 2D barcode format.  The Intelligent Mail Barcode (Also known as "IM Barcode" or "USPS OneCode Barcodes" or "IMB") is a 65-bar barcode for use on mail in the United States. The term "Intelligent Mail" refers to services offered by the United States Postal Service for domestic mail delivery. The IM barcode is intended to provide greater information and functionality than its predecessors POSTNET and PLANET.
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.PharmaCode">
            <summary>
            Pharmaceutical Binary Code. A reading fault tolerant binary barcode standard used in the medical industry.   https://en.wikipedia.org/wiki/Pharmacode
            </summary>
        </member>
        <member name="F:IronOcr.OcrResult.BarcodeEncoding.Other">
            <summary>
            Unspecified Barcode Encoding
            </summary>
        </member>
        <member name="T:IronOcr.OpenCvClient">
            <summary>
            Client layer for OpenCV interop
            </summary>
        </member>
        <member name="P:IronOcr.OpenCvClient.Instance">
            <summary>
            OpenCvClient Instance
            </summary>
        </member>
        <member name="M:IronOcr.OpenCvClient.Finalize">
            <summary>
            Dispose OpenCvClient
            </summary>
        </member>
        <member name="M:IronOcr.OpenCvClient.OpenCvClientInit">
            <summary>
            Initilize OpenCvClient
            </summary>
        </member>
        <member name="M:IronOcr.OpenCvClient.Dispose">
            <summary>
            Dispose OpenCvClient
            </summary>
        </member>
        <member name="M:IronOcr.OpenCvClient.FindTextRegion(SixLabors.ImageSharp.Image,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Find first region of Text in image using OpenCV
            </summary>
            <param name="bitmap">Source image.</param>
            <param name="scale">Resolution scale factor. Image width and height will be multiplied by this value.</param>
            <param name="dilation_amount">Dilation amount, in pixels. Text areas width and height will be increased by this value.</param>
            <param name="binarize">True to convert the image to black and white, False otherwise</param>
            <param name="invert">True to invert image colors when binarizing, False otherwise</param>
        </member>
        <member name="M:IronOcr.OpenCvClient.FindTextRegions(SixLabors.ImageSharp.Image,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Find all regions of Text in image using OpenCV
            </summary>
            <param name="bitmap">Source image.</param>
            <param name="scale">Resolution scale factor. Image width and height will be multiplied by this value.</param>
            <param name="dilation_amount">Dilation amount, in pixels. Text areas width and height will be increased by this value.</param>
            <param name="binarize">True to convert the image to black and white, False otherwise</param>
            <param name="invert">True to invert image colors when binarizing, False otherwise</param>
        </member>
        <member name="T:IronOcr.BarcodeReaderSafety">
            <summary>
            extensions methods which are working directly on any IBarcodeReaderGeneric implementation
            </summary>
        </member>
        <member name="M:IronOcr.BarcodeReaderSafety.SafeDecode(ZXing.ImageSharp.BarcodeReader{SixLabors.ImageSharp.PixelFormats.Rgba32},SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32})">
            <summary>
            uses the BarcodeReader class for decoding
            </summary>
            <param name="reader" />
            <param name="image" />
            <returns />
        </member>
        <member name="M:IronOcr.BarcodeReaderSafety.SafeDecodeMultiple(ZXing.ImageSharp.BarcodeReader{SixLabors.ImageSharp.PixelFormats.Rgba32},SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgba32})">
            <summary>
            uses the BarcodeReader class for decoding
            </summary>
            <param name="reader" />
            <param name="image" />
            <returns />
        </member>
        <member name="T:Babel.Licensing.LicenseFileFoundEventArgs">
            <summary>
                Additional information for license file found events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseFileFoundEventArgs.Skip">
            <summary>
                 Gets or sets a value indicating whether the skip the license file.
             </summary>
            <value>
                 true if skip the license file, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseFileFoundEventArgs.LicenseFilePath">
            <summary>
                 Gets the full pathname of the license file.
             </summary>
            <value>
                 The full pathname of the license file.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseFileFoundEventArgs.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.LicenseFileFoundEventArgs" /> class.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="licenseFilePath">  The full path of the license file. </param>
        </member>
        <member name="T:Babel.Licensing.BabelFileLicenseProvider">
            <summary>
                Represents an license provider used to manage licenses stored in a file on disk. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.LicenseFileSearchDirectories">
            <summary>
                 Gets or sets the directories where to search for a license file.
             </summary>
            <value>
                 The array of search directories.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.LicenseFilePath">
            <summary>
                 Gets or sets the license file full path.
             </summary>
            <value>
                 The license file full path.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.EnvironmentVariable">
            <summary>
                 Gets or sets the environment variable name that contains the license file path.
             </summary>
            <value>
                 The environment variable name.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.LicenseFactory">
            <summary>
                 Gets or sets the <see cref="T:Babel.Licensing.ILicenseFactory" />.
             </summary>
            <value>
                 The license factory.
             </value>
        </member>
        <member name="E:Babel.Licensing.BabelFileLicenseProvider.LicenseFileFound">
            <summary>
                Event queue for all listeners interested in LicenseFileFound events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.BabelFileLicenseProvider" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.#ctor(Babel.Licensing.ILicenseFactory)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelFileLicenseProvider" />
                 class.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="factory">  The license factory. </param>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" />
                 .
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.ValidateLicenseKey(System.String,Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the license key.
             </summary>
            <param name="licenseKey">   The license key. </param>
            <param name="context">
                  A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                  A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance">     An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.OnLicenseFileFound(Babel.Licensing.LicenseFileFoundEventArgs)">
            <summary>
                 Raises the license file found event.
             </summary>
            <param name="args"> Event information to send to registered event handlers. </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicense">
            <summary>
                Provides the abstract base class for implementing a license.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Id">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Type">
            <summary>
                 Gets or sets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Sites">
            <summary>
                 Gets or sets the number of sites to license.
             </summary>
            <value>
                 The licensed sites.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.IssueDate">
            <summary>
                 Gets, sets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.ExpireDate">
            <summary>
                 Gets, sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.SupportExpireDate">
            <summary>
                 Gets, sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.LicenseKey">
            <summary>
                 Gets the license key granted to this component.
             </summary>
            <value>
                 A license key granted to this component.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Licensee">
            <summary>
                 Gets, sets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Product">
            <summary>
                 Gets, sets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Assemblies">
            <summary>
                 Gets the licensed assemblies collection.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Features">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Feature" /> collection.
             </summary>
            <value>
                 The license feature collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Fields">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Field" /> collection.
             </summary>
            <value>
                 The license field collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.#ctor">
            <summary>
                Specialized default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.Finalize">
            <summary>
                <see cref="T:Babel.Licensing.BabelLicense" /> finalizer.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.Dispose">
            <summary>
                Releases the unmanaged resources used by the Babel.Licensing.BabelLicense.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.Dispose(System.Boolean)">
            <summary>
                 Releases the unmanaged resources used by the Babel.Licensing.BabelLicense and optionally releases the managed
                 resources.
             </summary>
            <param name="disposing">
                 true to release both managed and unmanaged resources; false to release only unmanaged resources.
             </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseContext">
            <summary>
                An abstract base class for license context.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseContext.FallbackContext">
            <summary>
                 Gets or sets a fallback license context. 
                 The fallback context will be used in search for license services when the required service is not found in the present context.
             </summary>
            <value>
                 The fallback context.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseContext.Settings">
            <summary>
                 Gets or sets license context options.
             </summary>
            <value>
                 The license context settings.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseContext.ContextName">
            <summary>
                 Gets the name of the context.
             </summary>
            <value>
                 The name of the context.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.LoadLicenseKey(System.Type)">
            <summary>
                 Loads license key.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="type"> The type. </param>
            <returns>
                 The license key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.SaveLicenseKey(System.Type,System.String)">
            <summary>
                 Saves a license key.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="type"> The type. </param>
            <param name="key">  The key. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.GetService(System.Type)">
            <summary>
                 Provides a license service for the given type. 
             </summary>
            <param name="serviceType">  Type of the service. </param>
            <returns>
                 The service.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.IsContextValid(System.Type)">
            <summary>
                 Query if a context is valid for the given type.
                 If the context is not valid the license will be reloaded inside the context.
             </summary>
            <param name="type"> The type. </param>
            <returns>
                 true if the context is valid, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelMultipleLicenseException">
            <summary>
                Exception for signaling multiple license errors.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelMultipleLicenseException.ValidationResults">
            <summary>
                 Gets the composite license validation results.
             </summary>
            <value>
                 The composite license validation results.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelMultipleLicenseException.#ctor(System.Collections.Generic.IEnumerable{Babel.Licensing.LicenseValidationResult})">
            <summary>
                 Constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="results">  The collection of license validation results. </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseException">
            <summary>
                Represents the exception thrown for license errors.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseException.Status">
            <summary>
                 Gets the license status that generates this exception.
             </summary>
            <value>
                 The license status value that generates this exception.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseException.LicensedType">
            <summary>
                 Gets the type of the component that was not granted a license.
             </summary>
            <value>
                 A <see cref="T:System.Type" /> that represents the type of component that was not granted a license.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor">
            <summary>
                Initializes a new instance of the Babel.Licensing.BabelLicenseException class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.String)">
            <summary>
                 Initializes a new instance of the System.Exception class with a specified
                 error message.
             </summary>
            <param name="message">  The message that describes the error. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.String,System.Exception)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class with a specified
                 error message and a reference to the inner exception that is the cause of this exception.
             </summary>
            <param name="message">          The error message that explains the reason for the exception. </param>
            <param name="innerException">   The exception that is the cause of the current exception, or a null reference
                                             (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(Babel.Licensing.LicenseStatus)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class with a specified
                 <see cref="T:Babel.Licensing.LicenseStatus" /> value.
             </summary>
            <param name="status">   The license status that generated this error. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(Babel.Licensing.LicenseStatus,System.Exception)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class with a specified
                 <see cref="T:Babel.Licensing.LicenseStatus" /> value and a reference to the inner exception that is the cause 
                 of this exception.
             </summary>
            <param name="status">           The license status that generated this error. </param>
            <param name="innerException">   The exception that is the cause of the current exception, or a null reference
                                             (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type of component that was denied a license.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type,System.Object)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type and the instance of the component that was denied a license.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
            <param name="instance"> The instance of the component that was not granted a license. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type,System.Object,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type and the instance of the component 
             that was denied a license, along with a message to display.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
            <param name="instance"> The instance of the component that was not granted a license. </param>
            <param name="message">  The exception message to display. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
            <summary>
             Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type and the instance of the component 
             that was denied a license, along with a message to display.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
            <param name="instance"> The instance of the component that was not granted a license. </param>
            <param name="message">  The exception message to display. </param>
            <param name="innerException"> An <see cref="T:System.Exception" /> that represents the original exception. </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseManager">
            <summary>
                Provides properties and methods to manage a ILicenseProvider. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseManager.CurrentContext">
            <summary>
                 Gets the current <see cref="T:Babel.Licensing.ILicenseContext" /> , which specifies when you can use the licensed object.
             </summary>
            <value>
                 A <see cref="T:Babel.Licensing.ILicenseContext" /> that specifies when you can use the licensed object.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.RegisterLicenseProvider(System.Type,Babel.Licensing.ILicenseProvider)">
            <summary>
                 Registers the license provider.
             </summary>
            <param name="type">
                 A <see cref="T:System.Type" />
                 that represents the type of object that requests the license.
             </param>
            <param name="provider"> The license provider instance. </param>
            <example>
                <code source="Examples\BabelLicenseManager.RegisterLicenseProvider.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.RegisterLicenseProvider.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.GetLicenseProvider(System.Type)">
            <summary>
                Gets a registered license provider of a given type.
            </summary>
            <param name="type">
                A <see cref="T:System.Type" />
                that represents the type of object that requests the license.
            </param>
            <returns>The license provider instance.</returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.Validate(System.Type)">
            <summary>
                 Determines whether a license can be granted for the specified type.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <exception cref="T:Babel.Licensing.BabelLicenseException"> A License cannot be granted. </exception>
            <example>
                <code source="Examples\BabelLicenseManager.Validate.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.Validate.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.Validate(System.Type,System.Object)">
            <summary>
                 Determines whether a license can be granted for the instance of the specified type.
             </summary>
            <exception cref="T:Babel.Licensing.BabelLicenseException"> The type is licensed, but a License cannot be granted. </exception>
            <param name="type">     A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <param name="instance"> An object of the specified type or a type derived from the specified type. </param>
            <returns>
                 An valid license.
             </returns>
            <example>
                <code source="Examples\BabelLicenseManager.Validate.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.Validate.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.IsLicensed(System.Type)">
            <summary>
                 Returns whether the given type has a valid license.
             </summary>
            <param name="type"> The <see cref="T:System.Type" /> to find a valid license for. </param>
            <returns>
                 true if the given type is licensed; otherwise, false.
             </returns>
            <example>
                <code source="Examples\BabelLicenseManager.IsLicensed.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.IsLicensed.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.IsValid(System.Type)">
            <summary>
                 Determines whether a valid license can be granted for the specified type.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <returns>
                 true if a valid license can be granted; otherwise, false.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.IsValid(System.Type,System.Object,Babel.Licensing.ILicense@)">
            <summary>
                 Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid License.
             </summary>
            <param name="type">     A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <param name="instance"> An object of the specified type or a type derived from the specified type. </param>
            <param name="license">  A <see cref="T:Babel.Licensing.ILicense" /> that is a valid license, or null if a valid license cannot be granted. </param>
            <returns>
                 true if a valid license can be granted; otherwise, false.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseProvider">
            <summary>
                Provides the abstract base class for implementing a <see cref="T:System.ComponentModel.LicenseProvider" /> 
                that is also compatible with <see cref="T:Babel.Licensing.BabelLicenseManager" /></summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <exception cref="T:System.ComponentModel.LicenseException"> Thrown when a License error condition occurs. </exception>
            <param name="context">
                 A <see cref="T:System.ComponentModel.LicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance">         An object that is requesting the license. </param>
            <param name="allowExceptions">
                 true if a <see cref="T:System.ComponentModel.LicenseException" />
                  should be thrown when the component cannot be granted a license; otherwise, false.
             </param>
            <returns>
                 A valid <see cref="T:System.ComponentModel.License" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelLicensing">
            <summary>
            BabelLicensing class
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicensing.Instance">
            <summary>
                 Gets the instance.
             </summary>
            <value>
                 The instance.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicensing.Create(Babel.Licensing.BabelServiceConfiguration)">
            <summary>
                 Creates a new BabelReporting.
             </summary>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="configuration">    The configuration. </param>
            <returns>
                 A BabelReporting.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicensing.#ctor(Babel.Licensing.BabelServiceConfiguration)">
            <summary>
                 Default constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="configuration">    The configuration. </param>
        </member>
        <member name="T:Babel.Licensing.BabelService">
            <summary>
            Base class for all Babel services
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelService.Configuration">
            <summary>
                 Gets the configuration.
             </summary>
            <value>
                 The configuration.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelService.#ctor(Babel.Licensing.BabelServiceConfiguration)">
            <summary>
            BabelService instance constructor. 
            </summary>
            <param name="configuration">The service configuration</param>
        </member>
        <member name="T:Babel.Licensing.BabelServiceConfiguration">
            <summary>
                Represents configuration of the reporting service client.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelServiceConfiguration.ServiceUrl">
            <summary>
                 Gets or sets the URL for the service.
             </summary>
            <value>
                 The service URL.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelServiceConfiguration.ApiKey">
            <summary>
                 Gets or sets the reporting service API key.
             </summary>
            <value>
                 The reporting service API key.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelServiceConfiguration.Namespace">
            <summary>
                 Gets or sets the reporting service API namespace.
             </summary>
            <value>
                 The reporting service API namespace.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelServiceConfiguration.ApiVersion">
            <summary>
                 Gets or sets the reporting service API version.
             </summary>
            <value>
                 The reporting service API version.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelServiceConfiguration.RetryCount">
            <summary>
                 Gets or sets the number times to retry submitting a report when a destination connection failure occurs.
             </summary>
            <value>
                 The number of retries.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelServiceConfiguration.EnableEncryption">
            <summary>
            Whether to encrypt messages sent sent to the server.
            </summary>
            <value>
                True if encryption is enabled, otherwise false.
            </value>
        </member>
        <member name="P:Babel.Licensing.BabelServiceConfiguration.License">
            <summary>
                 Gets or sets the license used to authenticate the applicaion with the remote service.
             </summary>
            <value>
                 The license used to authenticate with the remote service.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelServiceConfiguration.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.CreateCustomRestrictionEventArgs">
            <summary>
                Additional information for create CreateCustomRestriction event.
            </summary>
        </member>
        <member name="P:Babel.Licensing.CreateCustomRestrictionEventArgs.RestrictionName">
            <summary>
                 Gets the name of the restriction to create.
             </summary>
            <value>
                 The name of the restriction to create.
             </value>
        </member>
        <member name="P:Babel.Licensing.CreateCustomRestrictionEventArgs.Restriction">
            <summary>
                 Sets the restriction object.
             </summary>
            <value>
                 The restriction object created.
             </value>
        </member>
        <member name="M:Babel.Licensing.CreateCustomRestrictionEventArgs.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.CreateCustomRestrictionEventArgs" /> class.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="restrictionName">  The name of the restriction to create. </param>
        </member>
        <member name="T:Babel.Licensing.CreateCustomSignatureProviderEventArgs">
            <summary>
                Additional information for create CreateCustomSignatureProvider event.
            </summary>
        </member>
        <member name="P:Babel.Licensing.CreateCustomSignatureProviderEventArgs.AlgorithmName">
            <summary>
                 Gets the algorithm name of the <see cref="T:Babel.Licensing.ISignatureProvider" /> to create.
             </summary>
            <value>
                 The algorithm name of the signature provider to create.
             </value>
        </member>
        <member name="P:Babel.Licensing.CreateCustomSignatureProviderEventArgs.SignatureProvider">
            <summary>
                 Sets the signature provider object.
             </summary>
            <value>
                 The signature provider object created.
             </value>
        </member>
        <member name="M:Babel.Licensing.CreateCustomSignatureProviderEventArgs.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.CreateCustomSignatureProviderEventArgs" /> class.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="algorithmName">  The algorithm name of the <see cref="T:Babel.Licensing.ISignatureProvider" /> to create. </param>
        </member>
        <member name="T:Babel.Licensing.ECDsaKeySize">
            <summary>
                Values that represent ECDSA key sizes.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize112bit">
            <summary>
                Represents 112 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize192bit">
            <summary>
                Represents 192 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize256bit">
            <summary>
                Represents 256 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize384bit">
            <summary>
                Represents 384 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize521bit">
            <summary>
                Represents 512 bit key size.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ECDsaSignature">
            <summary>
                Creates and verifies digital signature using the 
                Elliptic Curve Digital Signature Algorithm (ECDSA).
                This class cannot be inherited.
            </summary>
            <seealso cref="T:Babel.Licensing.RSASignature" />
            <seealso cref="T:Babel.Licensing.XmlDigitalSignature" />
            <example>
                <code source="Examples\ECDsaSignature.Constructor1.cs" language="cs" />
                <code source="Examples\ECDsaSignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.FromKeys(System.String,System.String)">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.ECDsaSignature" /> object from the given public and private keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="publicKey">    The public key Base32 encoded string. </param>
            <param name="privateKey">   An optional private key Base32 encoded string. </param>
            <returns>
                 The ECDsaSignature with the given keys.
             </returns>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.KeySize">
            <summary>
                 Gets ECDSA algorithm key size.
             </summary>
            <value>
                 A <see cref="T:Babel.Licensing.ECDsaKeySize" /> value representing the key size.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.PublicKey">
            <summary>
                 Gets the public key as an encoded Base32 string.
             </summary>
            <value>
                 The public key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.PrivateKey">
            <summary>
                 Gets the private key as an encoded Base32 string.
             </summary>
            <value>
                 The private key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether the generate key information.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.HasKeySize">
            <summary>
                 Gets a value indicating whether this object has key size.
             </summary>
            <value>
                 True if this object has key size, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.ECDsaSignature" /> class.
            </summary>
            <example>
                <code source="Examples\ECDsaSignature.Constructor1.cs" language="cs" />
                <code source="Examples\ECDsaSignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.#ctor(Babel.Licensing.ECDsaKeySize)">
            <summary>
                 Create a new instance of <see cref="T:Babel.Licensing.ECDsaSignature" /> class with 
                 the given <see cref="T:Babel.Licensing.ECDsaKeySize" />.
             </summary>
            <param name="keySize">  A value indicating the bit size of the key. </param>
            <example>
                <code source="Examples\ECDsaSignature.Constructor2.cs" language="cs" />
                <code source="Examples\ECDsaSignature.Constructor2.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.ExportKeys(System.Boolean)">
            <summary>
                 Export ECDsa keys as base 64 encoded string.
             </summary>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
            <returns>
                 The base 64 encoded ECDsa key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.ImportKeys(System.String)">
            <summary>
                 Import ECDsa keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">        Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="key">   The base64 encoded string ECDsa key. </param>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.CreateKeyPair">
            <summary>
                Creates a new key pair.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify data.
             </summary>
            <param name="data">         The data. </param>
            <param name="signature">    The signature. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.WritePem(System.String,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="path">             The file path. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="T:Babel.Licensing.Rnd">
            <summary>
                A random. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Babel.Licensing.Rnd.Alphabet">
            <summary>
                The alphabet.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Rnd.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Rnd.#ctor(System.Int32)">
            <summary>
                 Constructor.
             </summary>
            <param name="seed"> The seed used to generate dandom values. </param>
        </member>
        <member name="M:Babel.Licensing.Rnd.Seed(System.Int32)">
            <summary>
                 Change random seed.
             </summary>
            <param name="seed"> The seed. </param>
        </member>
        <member name="M:Babel.Licensing.Rnd.String(System.Int32)">
            <summary>
                 Generates a random string.
             </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <param name="length">   The length. </param>
            <returns>
                 A string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Rnd.Array(System.Int32)">
            <summary>
                 Generates a random array of bytes.
             </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <param name="size"> The array size. </param>
            <returns>
                 A byte[] array filled with random values.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Rnd.Fill(System.Byte[],System.Int32,System.Int32)">
            <summary>
                 Fills random array of bytes.
             </summary>
            <exception cref="T:System.ArgumentNullException">        Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <param name="array">    The array. </param>
            <param name="start">    The start index where to start fill random values. </param>
            <param name="count">    The number of random values to generate. </param>
        </member>
        <member name="M:Babel.Licensing.Rnd.Double">
            <summary>
                 Gets the double.
             </summary>
            <returns>
                 A double.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Rnd.Int">
            <summary>
                 Ints.
             </summary>
            <returns>
                 A double.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Rnd.Long">
            <summary>
                 Gets the long.
             </summary>
            <returns>
                 A long.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Rnd.Int(System.Int32,System.Int32)">
            <summary>
                 Ints.
             </summary>
            <param name="min">  The minimum. </param>
            <param name="max">  The maximum. </param>
            <returns>
                 A double.
             </returns>
        </member>
        <member name="T:Babel.Licensing.IRSAKeys">
            <summary>
                Interface for signature providers based on RSA algorithm.
            </summary>
            <example>
                <code source="Examples\RSASignature.Constructor1.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.IRSAKeys.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IRSAKeys.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IRSAKeys.KeyPair">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair byte array.
             </value>
        </member>
        <member name="P:Babel.Licensing.IRSAKeys.RSA">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair.
             </value>
        </member>
        <member name="T:Babel.Licensing.RSASignature">
            <summary>
                Creates and verifies digital signature using RSA-SH1 algorithm.
                This class cannot be inherited.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.XmlDigitalSignature" />
        </member>
        <member name="P:Babel.Licensing.RSASignature.HasKeySize">
            <summary>
                 Gets a value indicating whether this object has key size.
             </summary>
            <value>
                 True if this object has key size, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.KeySize">
            <summary>
                 Gets or sets the RSA key size.
             </summary>
            <value>
                 The size of the RSA key.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether the generate key information.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.KeyPair">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair byte array.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.RSA">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair.
             </value>
        </member>
        <member name="M:Babel.Licensing.RSASignature.FromKeys(System.String)">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.RSASignature" /> object from the given public and private keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="rsaKey">    The encoded string RSA key. </param>
            <returns>
                 An instance of RSASignature.
             </returns>
            <seealso cref="T:Babel.Licensing.RSASignature" />
            <example>
                <code source="Examples\RSASignature.Constructor2.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor2.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.RSASignature.FromStrongNamePublicKey(System.Byte[])">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.RSASignature" /> object from the given strong name public key buffer.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="publicKey">    The strong name assembly public key. </param>
            <returns>
                 An instance of RSASignature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.CreateFromRawData(System.Byte[],System.String)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.RSASignature" /> from the specified key buffer.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the keyData argument is null.
             </exception>
            <param name="keyData">  The key pair buffer. This can be an SNK or PFX key buffer. </param>
            <param name="password"> (Optional) the key password. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor(System.Security.Cryptography.RSA)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" /> class with the specified RSA algorithm.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the rsa argument is null.
             </exception>
            <param name="rsa"> The RSA algorithm. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" />
                 class with the specified RSA algorithm and a flag which specify to whether to add 
                 public key information to the signature.
             </summary>
            <param name="rsa">              The RSA algorithm. </param>
            <param name="generateKeyInfo">  true to add public key information to signature element, false if not. </param>
            <remarks>
             If the public key information is not added to the signature, the RSA public key must be provided before calling the  
             method VerifyData. 
             </remarks>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" /> class with the specified RSA key size.
             </summary>
            <param name="keySize">  Size of the RSA key. </param>
            <example>
                <code source="Examples\RSASignature.Constructor2.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor2.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" /> class.
            </summary>
            <example>
                <code source="Examples\RSASignature.Constructor1.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.RSASignature.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.RSASignature.CreateKeyPair">
            <summary>
                Creates a new key pair.
            </summary>
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.RSASignature.SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.RSASignature.VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify the signature of a given data buffer.
             </summary>
            <param name="data">         The data to verify. </param>
            <param name="signature">    The signature buffer. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.RSASignature.WritePem(System.String,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="path">             The file path. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
            <example>
                <code source="Examples\RSASignature.WritePem.cs" language="cs" />
                <code source="Examples\RSASignature.WritePem.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.RSASignature.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ExportKeys(System.Boolean)">
            <summary>
                 Export RSA keys as base 64 encoded string.
             </summary>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
            <returns>
                 The base 64 encoded RSA key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ImportKeys(System.String)">
            <summary>
                 Import RSA keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">        Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="rsaKey">   The base64 encoded string RSA key. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ImportRSA(System.Security.Cryptography.RSA)">
            <summary>
                 Import RSA keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="rsa">  The RSA algorithm. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ToRSA">
            <summary>
                 Converts this object to a <see cref="T:System.Security.Cryptography.RSA" />.
             </summary>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the requested operation is invalid.
             </exception>
            <returns>
                 This object as a RSA.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.CreateFromKeyFile(System.String,System.String)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.RSASignature" /> from the specified key pair file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the keyFile argument is null.
             </exception>
            <param name="keyFile">  The key pair file path. This can be an SNK or PFX file. </param>
            <param name="password"> (Optional) the key password. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.CreateFromKeyContainer(System.String)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.RSASignature" /> from the specified key container.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the container argument is null.
             </exception>
            <param name="container">    The key container name. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="T:Babel.Licensing.XmlDigitalSignature">
            <summary>
                Provides a means to read and validate and digitally sign XML documents.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="F:Babel.Licensing.XmlDigitalSignature.XmlDSigNamespace">
            <summary>
                The XML digital signature namespace.
            </summary>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.RSA">
            <summary>
                 Gets or sets the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.
             </summary>
            <value>
                 The <see cref="T:System.Security.Cryptography.RSA" /> algorithm.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether the generate key information.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.SignatureValue">
            <summary>
                 Gets the signature value.
             </summary>
            <value>
                 The signature value.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.#ctor(System.Security.Cryptography.RSA)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.XmlDigitalSignature" /> class with the specified RSA algorithm.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the rsa argument is null.
             </exception>
            <param name="rsa"> The RSA algorithm. </param>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.#ctor(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.XmlDigitalSignature" />
                 class with the specified RSA algorithm.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="rsa">              The RSA algorithm. </param>
            <param name="generateKeyInfo">  true to add public key information to signature element, false if not. </param>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.Babel#Licensing#ISignatureProvider#SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.Babel#Licensing#ISignatureProvider#VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify the signature of a given data buffer.
             </summary>
            <param name="data">         The data to verify. </param>
            <param name="signature">    The signature buffer. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.WritePem(System.String,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="path">             The file path. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.KeyPair">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.HasKeySize">
            <summary>
                 Gets a value indicating whether this object has key size.
             </summary>
            <value>
                 True if this object has key size, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.KeySize">
            <summary>
                 Gets the key size.
             </summary>
            <value>
                 The size of the key.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.CreateFromSignedXml(System.String)">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object from the digitally signed XML document.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when the XML is not digitally signed.
             </exception>
            <param name="xml">  The digitally signed XML document. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.CreateFromKeyFile(System.String,System.String)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.XmlDigitalSignature" /> from the specified key pair file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the keyFile argument is null.
             </exception>
            <param name="keyFile">  The key pair file path. This can be an SNK or PFX file. </param>
            <param name="password"> (Optional) the key password. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.CreateFromKeyContainer(System.String)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.XmlDigitalSignature" /> from the specified key container.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the container argument is null.
             </exception>
            <param name="container">    The key container name. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.ToRSASignature">
            <summary>
                 Converts this object to an <see cref="T:Babel.Licensing.RSASignature" /> object.
             </summary>
            <returns>
                 The <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.LoadXml(System.String)">
            <summary>
                 Loads an XML file to sign.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="xml">  The XML document. </param>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.Sign">
            <summary>
                Sign the XML.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.VerifySignature">
            <summary>
                 Verify the XML digital signature.
             </summary>
            <returns>
                 true if the signature is valid, false if not.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.WriteXml(System.Xml.XmlWriter)">
            <summary>
                 Writes the XML to the specified <see cref="T:System.Xml.XmlWriter" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="writer">   The XML writer. </param>
        </member>
        <member name="T:Babel.Licensing.HexEncoding">
            <summary>
                Converts between binary data and an hex-encoded string.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.TryDecode(System.String,System.Byte[]@)">
            <summary>
                 Attempts to decode from the given data.
             </summary>
            <param name="encoded">  The encoded string. </param>
            <param name="buffer">   [out] The buffer. </param>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.Decode(System.String)">
            <summary>
                 Decodes the given hex string to its byte representation.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 The decoded string buffer.
             </returns>
            <example>
                <code source="Examples\HexEncoding.cs" language="cs" />
                <code source="Examples\HexEncoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.Encode(System.Byte[])">
            <summary>
                 Encodes the given buffer to an hex string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="buffer">   The buffer. </param>
            <returns>
                 The encoded hex string.
             </returns>
            <example>
                <code source="Examples\HexEncoding.cs" language="cs" />
                <code source="Examples\HexEncoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid hex character.
             </summary>
            <param name="value">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.Feature">
            <summary>
                Represents a license feature. A feature is used typically to enable additional.  
            </summary>
        </member>
        <member name="P:Babel.Licensing.Feature.Listeners">
            <summary>
                 Gets the listeners.
             </summary>
            <value>
                 The listeners.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Id">
            <summary>
                 Gets or sets the feature identifier.
             </summary>
            <value>
                 The feature identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Name">
            <summary>
                 Gets or sets the feature name.
             </summary>
            <value>
                 The feature name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Description">
            <summary>
                 Gets or sets the feature description.
             </summary>
            <value>
                 The feature description.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.ExpireDate">
            <summary>
                 Gets or sets the feature expire date.
             </summary>
            <value>
                 The feature expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Data">
            <summary>
                 Gets or sets the data associated with this feature.
             </summary>
            <value>
                 An array of bytes that contains the data contained in this feature.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Key">
            <summary>
                 Gets or sets the feature key. This is an additional field used to store encrypt key information.
             </summary>
            <value>
                 The feature key.
             </value>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor">
            <summary>
                Specialized default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor(System.String)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Feature" /> class with a given feature name.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter name is null. </exception>
            <param name="name"> The feature name. </param>
            <example>
                <code source="Examples\Feature.Constructor1.cs" language="cs" />
                <code source="Examples\Feature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor(System.String,System.Byte[])">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Feature" />
                 class with a given feature name and data.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="name"> The feature name. </param>
            <param name="data"> An array of bytes that contains the data related to this feature. </param>
            <example>
                <code source="Examples\Feature.Constructor1.cs" language="cs" />
                <code source="Examples\Feature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor(Babel.Licensing.Feature)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter other to copy is null. </exception>
            <param name="other">    The Feature object to copy. </param>
        </member>
        <member name="M:Babel.Licensing.Feature.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Feature.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Feature.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.Field">
            <summary>
                Represents a license field used to store key value pairs in a license.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Field.Listeners">
            <summary>
                 Gets the listeners.
             </summary>
            <value>
                 The listeners.
             </value>
        </member>
        <member name="P:Babel.Licensing.Field.Id">
            <summary>
                 Gets or sets the field identifier.
             </summary>
            <value>
                 The field identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Field.Name">
            <summary>
                 Gets or sets the field name.
             </summary>
            <value>
                 The field name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Field.Value">
            <summary>
                 Gets or sets the field value.
             </summary>
            <value>
                 The value stored into this field object.
             </value>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor">
            <summary>
                Specialized default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor(System.String,System.String)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Field" /> class with the given name and value.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="name">     The field name. </param>
            <param name="value">    The value stored into this field object. </param>
            <example>
                <code source="Examples\Field.Constructor1.cs" language="cs" />
                <code source="Examples\Field.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor(System.String)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Field" /> class with the given field name.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter name is null. </exception>
            <param name="name"> The field name. </param>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor(Babel.Licensing.Field)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter other to copy is null. </exception>
            <param name="other">    The Field object to copy. </param>
        </member>
        <member name="M:Babel.Licensing.Field.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Field.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Field.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.HardwareComponents">
            <summary>
                A bitfield of flags for specifying hardware components.
            </summary>
            <seealso cref="T:Babel.Licensing.HardwareId" />
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Cpu">
            <summary>
                A binary constant representing the CPU flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Ethernet">
            <summary>
                A binary constant representing the Ethernet cards flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Disk">
            <summary>
                A binary constant representing the disk flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Motherboard">
            <summary>
                A binary constant representing the Motherboard flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Bios">
            <summary>
                A binary constant representing the BIOS flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.SystemName">
            <summary>
                A binary constant representing the system name flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.All">
            <summary>
                A binary constant representing all flag.
            </summary>
        </member>
        <member name="T:Babel.Licensing.HardwareId">
            <summary>
                A hardware identifier.
            </summary>
        </member>
        <member name="P:Babel.Licensing.HardwareId.Salt">
            <summary>
                 Gets or sets the seed used to generate the key.
             </summary>
            <value>
                 A value used to seed the generated key.
             </value>
        </member>
        <member name="P:Babel.Licensing.HardwareId.RequiredComponents">
            <summary>
                 Gets or sets the hardware components required to generate the hardware key identifier.
             </summary>
            <value>
                 The required hardware components.
             </value>
        </member>
        <member name="M:Babel.Licensing.HardwareId.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareId" /> class.
            </summary>
            <example> This example show how to generate an hardware key using the computer name.
            
                <code language="cs">
                    HardwareId hardwareId = new HardwareId();
                    string hardwareKey = hardwareId.ToMachineKey();
                </code><code language="vbnet">
                    Dim hardwareId As New HardwareId()
                    Dim hardwareKey As String = hardwareId.ToMachineKey()
                </code></example>
        </member>
        <member name="M:Babel.Licensing.HardwareId.#ctor(Babel.Licensing.HardwareComponents)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareId" /> class
                 with the specified hardware components.
             </summary>
            <param name="components">   The hardware components used to generate the machine key. </param>
            <example> This example show how to generate an hardware key using the disk serial number 
                       and the Ethernet MAC address information.
             
                 <code language="cs">
                     HardwareId hardwareId = new HardwareId(HardwareComponents.Disk | HardwareComponents.Ethernet);
                     string hardwareKey = hardwareId.ToMachineKey();
                 </code><code language="vbnet">
                     Dim hardwareId As New HardwareId(HardwareComponents.Disk Or HardwareComponents.Ethernet)
                     Dim hardwareKey As String = hardwareId.ToMachineKey()
                 </code></example>
        </member>
        <member name="M:Babel.Licensing.HardwareId.#ctor(Babel.Licensing.HardwareComponents,System.Byte[])">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareId" />
                 class with the specified hardware components and salt byte array to seed the key.
             </summary>
            <param name="components">   The hardware components used to generate the machine key. </param>
            <param name="salt">         A value used to seed the generated key. </param>
            <example> This example shows how to create an hardware key with two bytes random salt.
             
                <code source="Examples\HardwareId.Salt.cs" language="cs" /><code source="Examples\HardwareId.Salt.vb" language="vbnet" /></example>
        </member>
        <member name="M:Babel.Licensing.HardwareId.ToMachineKey(System.Int32)">
            <summary>
                 Converts this object to a machine key.
             </summary>
            <param name="tokenSize">    (Optional) Size of the readable token. </param>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <returns>
                 A string that represents the hardware components.
             </returns>
        </member>
        <member name="M:Babel.Licensing.HardwareId.IsValid(System.String)">
            <summary>
                 Query if 'key' is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">    
                 Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="key">  The key. </param>
            <returns>
                 true if valid, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ICreateCustomRestriction">
            <summary>
                Interface for create custom restriction.
            </summary>
        </member>
        <member name="E:Babel.Licensing.ICreateCustomRestriction.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ICreateCustomSignatureProvider">
            <summary>
                Interface for create custom signature provider.
            </summary>
        </member>
        <member name="E:Babel.Licensing.ICreateCustomSignatureProvider.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="T:Babel.Licensing.IdFormat">
            <summary>
                Values that represent various ID formats.
            </summary>
            <example>
                <code source="Examples\IdGenerator.cs" language="cs" />
                <code source="Examples\IdGenerator.vb" language="vbnet" />
            </example>
            <seealso cref="T:Babel.Licensing.IdGenerator" />
        </member>
        <member name="F:Babel.Licensing.IdFormat.Hex">
            <summary>
                Hexadecimal string format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.IdFormat.Decimal">
            <summary>
                Decimal string format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.IdFormat.Base32">
            <summary>
                Base 32 string format.
            </summary>
        </member>
        <member name="T:Babel.Licensing.IdGenerator">
            <summary>
                A license identifier generator. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.IdGenerator.Prefix">
            <summary>
                 Gets or sets the identifier prefix.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <value>
                 Returns the identifier prefix.
             </value>
        </member>
        <member name="P:Babel.Licensing.IdGenerator.Length">
            <summary>
                 Gets or sets the identifier length.
             </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <value>
                 The identifier length.
             </value>
        </member>
        <member name="P:Babel.Licensing.IdGenerator.Format">
            <summary>
                 Gets or sets the format to use.
             </summary>
            <value>
                 The format.
             </value>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.#ctor(System.String,System.Int32)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.IdGenerator" /> class specifying 
                 the identifier prefix and length.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the prefix argument is null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when the length argument is less or equal to zero.
             </exception>
            <param name="prefix">   The identifier prefix. </param>
            <param name="length">   The total identifier string length. </param>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.IdGenerator" /> class specifying
                 the identifier prefix.
             </summary>
            <param name="prefix">   The identifier prefix. </param>
            <example>
                <code source="Examples\IdGenerator.Constructor1.cs" language="cs" />
                <code source="Examples\IdGenerator.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.#ctor">
            <summary>
                Generate a new instance of <see cref="T:Babel.Licensing.IdGenerator" /> class.
            </summary>
            <example>
                <code source="Examples\IdGenerator.cs" language="cs" />
                <code source="Examples\IdGenerator.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.Create(System.String,System.Int32)">
            <summary>
                 Creates a new identifier string with given prefix.
             </summary>
            <param name="prefix">   The identifier prefix. </param>
            <param name="length">   The total identifier string length. </param>
            <returns>
                 A string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.CreateId">
            <summary>
                 Creates the a new identifier string.
             </summary>
            <returns>
                 The new identifier.
             </returns>
        </member>
        <member name="T:Babel.Licensing.IEnvironmentInformation">
            <summary>
                Provides a mechanism for retrieving environment information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.IsVirtualEnvironment">
            <summary>
                 Gets a value indicating whether this object is running in a virtual environment.
             </summary>
            <value>
                 true if this object is virtual environment, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.VirtualEnvironment">
            <summary>
                 Gets the virtual environment name.
             </summary>
            <value>
                 The virtual environment name.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.IsSystemClockRollback">
            <summary>
                 Gets a value indicating whether the system clock was set back.
             </summary>
            <value>
                 true if the system clock was set back, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.InstanceCount">
            <summary>
                 Gets the application instance number.
             </summary>
            <value>
                 The application instance number.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.ApplicationName">
            <summary>
                 Gets the name of the application.
             </summary>
            <value>
                 The name of the application.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.ApplicationVersion">
            <summary>
                 Gets the application version.
             </summary>
            <value>
                 The version of the application.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.ProcessName">
            <summary>
                 Gets the name of the process.
             </summary>
            <value>
                 The name of the process.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.Is64BitProcess">
            <summary>
                 Whether the current process is a 64-bit process.
             </summary>
            <value>
                 true if the process is 64-bit; otherwise, false.
             </value>
        </member>
        <member name="M:Babel.Licensing.IEnvironmentInformation.GetLicenseUsageMode(Babel.Licensing.ILicenseContext)">
            <summary>
                 Gets license usage mode.
             </summary>
            <param name="context">  The license context. </param>
            <returns>
                 The license usage mode.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicense">
            <summary>
                Defines a common interface for license objects.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ILicense.Id">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Type">
            <summary>
                 Gets or sets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Sites">
            <summary>
                 Gets or sets the number of sites to license.
             </summary>
            <value>
                 The licensed sites.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.LicenseKey">
            <summary>
                 Gets the license key.
             </summary>
            <value>
                 The license key.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.IssueDate">
            <summary>
                 Gets or sets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.ExpireDate">
            <summary>
                 Gets or sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.SupportExpireDate">
            <summary>
                 Gets or sets the license support expire date.
             </summary>
            <value>
                 The license support expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Licensee">
            <summary>
                 Gets or sets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference 
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Product">
            <summary>
                 Gets or sets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference 
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Assemblies">
            <summary>
                 Gets the collection of licensed assemblies full names.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Features">
            <summary>
                 Gets the collection of license <see cref="T:Babel.Licensing.Feature" />.
             </summary>
            <value>
                 The <see cref="T:Babel.Licensing.Feature" /> collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Fields">
            <summary>
                 Gets the collection of license <see cref="T:Babel.Licensing.Field" />.
             </summary>
            <value>
                 The <see cref="T:Babel.Licensing.Field" /> collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="T:Babel.Licensing.ILicenseSerializable">
            <summary>
                Defines a common interface for objects that can be serialized into licenses.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseSerializable.Write(System.Object)">
            <summary>
                 Write the object to a license.
             </summary>
            <param name="context"> The context to which the object is serialized. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseSerializable.Read(System.Object)">
            <summary>
                 Read the object from a license.
             </summary>
            <param name="context"> The context from which the object is deserialized. </param>
        </member>
        <member name="T:Babel.Licensing.ILicenseBuilderProvider">
            <summary>
                Interface for license builder provider.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilderProvider.GetLicenseBuilder">
            <summary>
                 Gets an instance of an object that implements <see cref="T:Babel.Licensing.ILicenseBuilder" /> interfaces.
             </summary>
            <returns>
                 The license builder object.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicenseBuilderProvider`1">
            <summary>
                 Interface for license builder provider.
             </summary>
            <typeparam name="T"> Generic type parameter. </typeparam>
        </member>
        <member name="T:Babel.Licensing.ILicenseBuilder">
            <summary>
                Interface for license builder.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Load(System.IO.Stream)">
            <summary>
                 Loads the license from the specified file.
             </summary>
            <param name="stream"> Specify the input stream. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Save(System.IO.Stream)">
            <summary>
                 Saves a copy of the license into the specified file.
             </summary>
            <param name="stream"> Specify the output stream. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.AddOrUpdate(Babel.Licensing.ILicense)">
            <summary>
                 Adds a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 to the builder if the license does not already exists, or updates the <see cref="T:Babel.Licensing.ILicense" />
                 if the key already exists.
             </summary>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Remove(Babel.Licensing.ILicense)">
            <summary>
                 Removes a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 from the builder.
             </summary>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object to be removed. </param>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.ToLicenses">
            <summary>
                 Converts the current builder state to a collection of <see cref="T:Babel.Licensing.ILicense" /> objects.
             </summary>
            <returns>
                 The current state as a collection of <see cref="T:Babel.Licensing.ILicense" /> objects.
             </returns>
        </member>
        <member name="P:Babel.Licensing.ILicenseBuilder.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
             </summary>
            <value>
                 The signature provider type <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </value>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Sign">
            <summary>
                Add a signature to the license object.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Validate">
            <summary>
                 Validates the license signature.
             </summary>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ContextSettings">
            <summary>
                Provides the class used to configure license validation.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ContextSettings.RefreshTime">
            <summary>
                 Gets or sets the refresh time after which the context is reloaded.
                 Is not set the license will be always reloaded.
             </summary>
            <value>
                 The refresh time or null.
             </value>
        </member>
        <member name="P:Babel.Licensing.ContextSettings.CheckSystemTimeRoollback">
            <summary>
                 Gets or sets a value that indicates whether to check that 
                 the system clock has been set back.
             </summary>
            <value>
                 true if we want to check that the system clock has been set back, false if not.
             </value>
        </member>
        <member name="T:Babel.Licensing.ILicenseContext">
            <summary>
                Interface for license context.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ILicenseContext.ContextName">
            <summary>
                 Gets the name of the context.
             </summary>
            <value>
                 The name of the context.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicenseContext.FallbackContext">
            <summary>
                 Gets or sets a context for the fallback.
             </summary>
            <value>
                 The fallback context.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicenseContext.Settings">
            <summary>
                 Gets or sets license context options.
             </summary>
            <value>
                 The license context settings.
             </value>
        </member>
        <member name="M:Babel.Licensing.ILicenseContext.LoadLicenseKey(System.Type)">
            <summary>
                 Loads license key.
             </summary>
            <param name="type"> The type. </param>
            <returns>
                 The license key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ILicenseContext.SaveLicenseKey(System.Type,System.String)">
            <summary>
                 Saves a license key.
             </summary>
            <param name="type"> The type. </param>
            <param name="key">  The key. </param>
        </member>
        <member name="T:Babel.Licensing.ILicenseProvider">
            <summary>
                Interface for license providers.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Gets a license for an instance or type of component.
             </summary>
            <param name="context">  A <see cref="T:Babel.Licensing.ILicenseContext" /> that specifies where you can use the licensed object. </param>
            <param name="type">     A <see cref="T:System.Type" /> that represents the component requesting the license. </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid license.
             </returns>
        </member>
        <member name="T:Babel.Licensing.INetworkInformation">
            <summary>
                Provides a mechanism for retrieving network information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.INetworkInformation.NetworkDomains">
            <summary>
                 Gets the network domains.
             </summary>
            <value>
                 The network domains.
             </value>
        </member>
        <member name="P:Babel.Licensing.INetworkInformation.NetworkIPs">
            <summary>
                 Gets the network IP addresses.
             </summary>
            <value>
                 The network IPs.
             </value>
        </member>
        <member name="T:Babel.Licensing.IObjectListener">
            <summary>
                Interface for listener.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IObjectListener.Update(Babel.Licensing.IObservableObject,System.Object[])">
            <summary>
                 Updates this object.
             </summary>
            <param name="observable">   The observable object. </param>
            <param name="args">         A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.IObservableObject">
            <summary>
                Interface for observable object.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IObservableObject.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.IObservableObject.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.IObservableObject.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.IReadableLicenseString">
            <summary>
                Interface for readable license strings.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IReadableLicenseString.ToReadableString(System.String)">
            <summary>
                 Converts the license object to a readable string.
             </summary>
            <param name="format">   Describes the format to use. </param>
            <returns>
                 The license as a string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IReadableLicenseString.Parse(System.String)">
            <summary>
                 Parse the specified license string.
             </summary>
            <param name="license">  The license string. </param>
        </member>
        <member name="T:Babel.Licensing.IRestrictionFactory">
            <summary>
                Interface for restriction factory.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IRestrictionFactory.CreateRestriction(System.String)">
            <summary>
                 Creates a restriction.
             </summary>
            <param name="type"> The restriction type name. </param>
            <returns>
                 The new restriction.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ISignatureProviderFactory">
            <summary>
                Interface for signature provider factory.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ISignatureProviderFactory.CreateSignatureProvider(System.String)">
            <summary>
                 Creates signature provider.
             </summary>
            <param name="name"> The algorithm name. </param>
            <returns>
                 The new signature provider.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicenseFactory">
            <summary>
                Interface for license factory.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseFactory.CreateFeature(System.String)">
            <summary>
                 Creates a license feature.
             </summary>
            <param name="name"> The feature name. </param>
            <returns>
                 The new feature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ILicenseFactory.CreateField(System.String)">
            <summary>
                 Creates a license field.
             </summary>
            <param name="name"> The field name. </param>
            <returns>
                 The new field.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ISignatureKeyInfo">
            <summary>
                Interface for signature key information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ISignatureKeyInfo.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISignatureKeyInfo.HasKeySize">
            <summary>
                 Gets a value indicating whether this object has key size.
             </summary>
            <value>
                 True if this object has key size, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISignatureKeyInfo.KeySize">
            <summary>
                 Gets the key size.
             </summary>
            <value>
                 The size of the key.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISignatureKeyInfo.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISignatureKeyInfo.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether to generate key information in the signature.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="T:Babel.Licensing.ISignatureProvider">
            <summary>
                Interface for signature providers.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
            <seealso cref="T:Babel.Licensing.XmlDigitalSignature" />
        </member>
        <member name="P:Babel.Licensing.ISignatureProvider.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.ISignatureProvider.SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ISignatureProvider.VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify the signature of a given data buffer.
             </summary>
            <param name="data">         The data to verify. </param>
            <param name="signature">    The signature buffer. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ISignatureWriter">
            <summary>
                Interface for signature types that can be written to a stream.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ISignatureWriter.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="T:Babel.Licensing.ISystemInformation">
            <summary>
                Provides a mechanism for retrieving system information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.OperatingSystem">
            <summary>
                 Gets the operating system name.
             </summary>
            <value>
                 The operating system name.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.SystemName">
            <summary>
                 Gets the name of the system.
             </summary>
            <value>
                 The name of the system.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.SystemManufacturer">
            <summary>
                 Gets the system manufacturer.
             </summary>
            <value>
                 The system manufacturer.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.SystemProductName">
            <summary>
                 Gets the system product name.
             </summary>
            <value>
                 The system product name.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.TotalPhysicalMemory">
            <summary>
                 Gets the total physical memory.
             </summary>
            <value>
                 The total physical memory in bytes.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.CurrentMemoryUsage">
            <summary>
                 Gets the current memory usage.
             </summary>
            <value>
                 The current memory usage.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorCount">
            <summary>
                 Gets the number of physical processors.
             </summary>
            <value>
                 The number of processors.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.LogicalProcessorCount">
            <summary>
                 Gets the number of logical processors.
             </summary>
            <value>
                 The number of processors.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorId">
            <summary>
                 Gets the CPU identifier.
             </summary>
            <value>
                 The CPU identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorName">
            <summary>
                 Gets the CPU name.
             </summary>
            <value>
                 The CPU name.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorType">
            <summary>
                 Gets the CPU type.
             </summary>
            <value>
                 The CPU type.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorArchitecture">
            <summary>
                 Gets the CPU architecture.
             </summary>
            <value>
                 The CPU architecture.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorFeatures">
            <summary>
                 Gets the available CPU features.
             </summary>
            <value>
                 The processor features.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.EthernetCards">
            <summary>
                 Gets the ethernet cards.
             </summary>
            <value>
                 The ethernet cards.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.DiskSerialNumbers">
            <summary>
                 Gets the disk serial numbers.
             </summary>
            <value>
                 The disk serial numbers.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.MotherboardSerialNumber">
            <summary>
                 Gets the motherboard serial number.
             </summary>
            <value>
                 The motherboard serial number.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.BiosSerialNumber">
            <summary>
                 Gets the BIOS serial number.
             </summary>
            <value>
                 The BIOS serial number.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.DisplayProperties">
            <summary>
                 Gets the display properties.
             </summary>
            <value>
                 The display properties.
             </value>
        </member>
        <member name="T:Babel.Licensing.KeyHelpers">
            <summary>
                String license helpers.
            </summary>
        </member>
        <member name="M:Babel.Licensing.KeyHelpers.ToReadableKey(System.String,System.Int32)">
            <summary>
                 Split the license key in tokens separated by a '-' character to provide a more convenient and
                 human readable license string.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the key argument is null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when the tokenSize argument is a negative integer.
             </exception>
            <param name="key">          The license key. </param>
            <param name="tokenSize">    The length of each readable key token. </param>
            <returns>
                 The given key converted to human readable string.
             </returns>
            <example>
                <code language="cs">
                     // Returns XYZW5-RTJ3W-DA13M-8RCGY-OMX7Z
                     string readableKey = KeyHelpers.ToReadableKey("XYZW5RTJ3WDA13M8RCGYOMX7Z", 5);
                 </code>
                <code language="vbnet">
                     ' Returns XYZW5-RTJ3W-DA13M-8RCGY-OMX7Z
                     Dim readableKey As String = KeyHelpers.ToReadableKey("XYZW5RTJ3WDA13M8RCGYOMX7Z", 5)
                 </code>
            </example>
        </member>
        <member name="T:Babel.Licensing.Licenseable">
            <summary>
                Provides a set of static (Shared in Visual Basic) methods for objects that implement <see cref="T:Babel.Licensing.ILicense" />.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAnyAssembly``1(``0)">
            <summary>
                 An extension method that is used to license all assemblies
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAssembly``1(``0,System.Reflection.Assembly)">
            <summary>
                 An extension method that is used to partially fill the <see cref="T:Babel.Licensing.ILicense" />
                 objects with the information provided by the given <see cref="T:System.Reflection.Assembly" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic type parameter <see cref="T:Babel.Licensing.ILicense" />. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="assembly"> The assembly from which the license information are retrieved. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAssembly``1(``0,System.String)">
            <summary>
                 An extension method that is used to partially fill the <see cref="T:Babel.Licensing.ILicense" />
                 objects with the information provided by the full assembly name.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic type parameter <see cref="T:Babel.Licensing.ILicense" />. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="fullName"> The assembly full name. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithId``1(``0,System.String)">
            <summary>
                 An extension method used to assign an Id to the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="id">       The string identifier. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithUniqueId``1(``0,System.String)">
            <summary>
                 An extension method that is used to assign a unique identifier to a license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="prefix">   An optional identifier prefix. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithType``1(``0,System.String)">
            <summary>
                 An extension method that is used to assign the license type.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="type">     The license type. </param>
            <returns>
                 A T.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.IssuedAt``1(``0,System.Nullable{System.DateTime})">
            <summary>
                 An extension method that is used to assign the license issue date.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic type parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="issueDate">    The issue date. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ExpiresAt``1(``0,System.Nullable{System.DateTime})">
            <summary>
                 An extension method that is used to assign an expiration date to the license object.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="expireDate">   The expire date. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SupportExpiresAt``1(``0,System.Nullable{System.DateTime})">
            <summary>
                 An extension method that is used to assign the support expiration date to the license object.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="expireDate">   The support expire date. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.LicensedTo``1(``0,System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
                 An extension method that is used to fill licensee information.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="name">         The licensee name. </param>
            <param name="contactInfo">  Information describing the contact. </param>
            <param name="company">      The licensee company. </param>
            <param name="url">          An URL where to find licensee information. </param>
            <param name="data">         Custom licensee data. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForProduct``1(``0,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                 An extension method that is used to provide information about the licensed product.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="name">         The product name. </param>
            <param name="version">      The product version. </param>
            <param name="description">  A description about the product. </param>
            <param name="url">          An URL where to find additional product information. </param>
            <param name="copyright">    Product copyright information. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAnyComponent``1(``0)">
            <summary>
                 An extension method used to license any component.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithComponents``1(``0,System.String[])">
            <summary>
                 An extension method used to add component information.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="components">   A variable-length parameters list containing the components. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithField``1(``0,System.String,System.String)">
            <summary>
                 An extension method that is used to add license fields.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the field with the given name is already present in the collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="name">     The field name. </param>
            <param name="value">    The field value. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\Field.Constructor1.cs" language="cs" />
                <code source="Examples\Field.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFields``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                 An extension method that is used to add a dictionary of fields.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when a field with a given name is already present in the field collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="fields">   The dictionary of license fields to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFields``1(``0,Babel.Licensing.Field[])">
            <summary>
                 An extension method that is used to add several license fields.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when a field with a given name is already present in the field collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="fields">   The license fields to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\Field.Constructor1.cs" language="cs" />
                <code source="Examples\Field.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFeature``1(``0,System.String,System.String,System.Byte[],System.Nullable{System.DateTime},System.Byte[])">
            <summary>
                 An extension method that add a feature to the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the feature with the given name is already present in the features collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="name">         The feature name. </param>
            <param name="description">  A description about the feature. </param>
            <param name="data">         Custom feature data. </param>
            <param name="expires">      The feature expire date. </param>
            <param name="key">          The feature key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\Feature.Constructor1.cs" language="cs" />
                <code source="Examples\Feature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFeature``1(``0,Babel.Licensing.Feature)">
            <summary>
                 An extension method that add a feature to the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the feature with the given name is already present in the features collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="feature">  The feature object to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFeatures``1(``0,Babel.Licensing.Feature[])">
            <summary>
                 An extension method that is used to add several license <see cref="T:Babel.Licensing.Feature" /> objects.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when a feature with a given name is already present in the feature collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="features"> A variable-length parameters list containing <see cref="T:Babel.Licensing.Feature" /> objects. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithRestrictions``1(``0,Babel.Licensing.Restriction[])">
            <summary>
                 An extension method that is used to add several license 
                 <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when a restriction with a given name is already present in the restriction collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="restrictions"> A variable-length parameters list containing <see cref="T:Babel.Licensing.Restriction" /> objects. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForBetaTesters``1(``0,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
                 An extension method used to add a <see cref="T:Babel.Licensing.BetaRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">         Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">       The license to act on. </param>
            <param name="recentChanges"> Information about recent changes introduced with this beta release. </param>
            <param name="buildType">     The build type. </param>
            <param name="expires">       Defines a period after which this beta expires. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithTrialDays``1(``0,System.Nullable{System.Int32})">
            <summary>
                 Defines a trial license which can be used for a limited number of days.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="trialDays">    The number of trial days. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\TrialRestriction.cs" language="cs" />
                <code source="Examples\TrialRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithTrialRunTime``1(``0,System.Nullable{System.TimeSpan})">
            <summary>
                 Defines a trial license which can run for a limited time period.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="runTime">  The trial run time. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithMaximumRunningInstances``1(``0,System.Nullable{System.Int32})">
            <summary>
                 Defines a trial license that allow only given number of application instances running simultaneously.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <typeparam name="T">            Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">          The license to act on. </param>
            <param name="instanceCount">    Number of permitted instances. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithMaximumRunCount``1(``0,System.Nullable{System.Int32})">
            <summary>
                 Defines a trial license that allow the application to run only for given number of times.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <typeparam name="T">       Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">     The license to act on. </param>
            <param name="runCount">    The maximum number of times the application can run. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithHardwareKey``1(``0,System.String)">
            <summary>
                 An extension method used to add a <see cref="T:Babel.Licensing.HardwareRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="hardwareKey">  The hardware key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\HardwareRestriction.cs" language="cs" />
                <code source="Examples\HardwareRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.UseOnlyAt``1(``0,System.String)">
            <summary>
                 An ILicense extension method used to add a <see cref="T:Babel.Licensing.UsageRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="usage">    The license usage mode. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.NotForVirtualEnvironment``1(``0)">
            <summary>
                 An ILicense extension method that is used to prevent the execution of the 
                 application in a virtual environment.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\UsageRestriction.cs" language="cs" />
                <code source="Examples\UsageRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.RestrictedToProcess``1(``0,System.String[])">
            <summary>
                 An ILicense extension method that is used to restrict the license usage to a list of process names.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="process">  A variable-length parameters list containing the process names. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\UsageRestriction.cs" language="cs" />
                <code source="Examples\UsageRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.CopyFrom``1(``0,``0)">
            <summary>
                 An ILicense extension method that copies ILicense objects.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="other">    Another instance to copy. </param>
            <returns>
                 The copied <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ToRestrictedDomain``1(``0,System.String,System.String)">
            <summary>
                 An ILicense extension method used to add a <see cref="T:Babel.Licensing.DomainRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="domain">   The domain name. </param>
            <param name="role">     The server role. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\DomainRestriction.cs" language="cs" />
                <code source="Examples\DomainRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ToReadableString(Babel.Licensing.ILicenseBuilder,System.String)">
            <summary>
                 An ILicenseBuilder extension method that converts the current license to a readable string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <param name="format">   (Optional) Describes the format to use. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWith(Babel.Licensing.ILicense,Babel.Licensing.ISignatureProvider)">
            <summary>
                 An ILicense extension method that is used to sign the current license object with 
                 the given <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="signature">    The signature provider object. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                This example shows how to sign a license with an RSA signature.
                
                <code source="Examples\Licenseable.SignWith.cs" language="cs" /><code source="Examples\Licenseable.SignWith.vb" language="vbnet" /></example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWithKeys(Babel.Licensing.ILicense,System.String,System.String)">
            <summary>
                 An ILicense extension method that is used to sign the current license object with
                 the given key pair.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="publicKey">    The public key. </param>
            <param name="privateKey">   The private key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                <code source="Examples\StringLicense.Constructor.cs" language="cs" />
                <code source="Examples\StringLicense.Constructor.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ValidateWith(Babel.Licensing.ILicense,Babel.Licensing.ISignatureProvider)">
            <summary>
                 An ILicense extension method that validates the current license object with 
                 the given <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="signature">    The signature provider object. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ValidateWithPublicKey(Babel.Licensing.ILicense,System.String)">
            <summary>
                 An ILicense extension method that validates the current license object with
                 the given public key.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="publicKey">    The public key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.Build(Babel.Licensing.ILicense)">
            <summary>
                 An extension method that converts the input license to a <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="license">  The license to act on. </param>
            <returns>
                 A <see cref="T:Babel.Licensing.ILicenseBuilder" /> that represents the input license object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.AddLicense``1(``0,Babel.Licensing.ILicense)">
            <summary>
                 An extension method that adds a license to the current license builder.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicenseBuilder" /> type parameter. </typeparam>
            <param name="builder">  The license builder to act on. </param>
            <param name="license">  The license to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                <code source="Examples\XmlLicense.AddLicense.vb" language="vbnet" />
                <code source="Examples\XmlLicense.AddLicense.cs" language="cs" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.RemoveLicense``1(``0,Babel.Licensing.ILicense)">
            <summary>
                 An extension method that removes the given license object from the current license builder.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicenseBuilder" /> type parameter. </typeparam>
            <param name="builder">  The license builder to act on. </param>
            <param name="license">  The license to remove. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWith(Babel.Licensing.ILicenseBuilder,Babel.Licensing.ISignatureProvider)">
            <summary>
                 An extension method used to sign the current license state with a given signature provider.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <param name="provider"> The signature provider. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWithKeys(Babel.Licensing.ILicenseBuilder,System.String,System.String)">
            <summary>
                 An extension method used to sign the current license state with a given key pair.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="builder">      The license builder to act on. </param>
            <param name="publicKey">    The public key. </param>
            <param name="privateKey">   The private key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ValidateSignature(Babel.Licensing.ILicenseBuilder)">
            <summary>
                 An extension method that validates the current license signature.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have illegal values or when the signature is not valid.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.Load(Babel.Licensing.ILicenseBuilder,System.String)">
            <summary>
                 An extension method that loads the license from a given file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <param name="path">     The file to be read. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.Save``1(``0,System.String)">
            <summary>
                 An extension method that saves the license to a file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicenseBuilder" /> type parameter. </typeparam>
            <param name="builder">  The license builder to act on. </param>
            <param name="path">     The file to be saved. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                <code source="Examples\XmlLicense.Save.vb" language="vbnet" />
                <code source="Examples\XmlLicense.Save.cs" language="cs" />
            </example>
        </member>
        <member name="T:Babel.Licensing.Licensee">
            <summary>
                Represents the licensee information associated with the license. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Licensee.Id">
            <summary>
                 Gets or sets the licensee identifier.
             </summary>
            <value>
                 The licensee identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Company">
            <summary>
                 Gets or sets the licensee company.
             </summary>
            <value>
                 The licensee company.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Url">
            <summary>
                 Gets or sets the URL information associated with the licensee.
                 This can be the licensee company URL.
             </summary>
            <value>
                 The licensee URL.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Name">
            <summary>
                 Gets or sets the licensee name.
             </summary>
            <value>
                 The licensee name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.ContactInfo">
            <summary>
                Gets or sets licensee contact information.
            </summary>
            <value>
                Information describing the licensee contact.
            </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Data">
            <summary>
                 Gets or sets additional licensee data.
             </summary>
            <value>
                 An array of byte that represents licensee data.
             </value>
        </member>
        <member name="M:Babel.Licensing.Licensee.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Licensee.#ctor(Babel.Licensing.Licensee)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the parameter other to copy is null.
             </exception>
            <param name="other"> The Licensee object to copy. </param>
        </member>
        <member name="T:Babel.Licensing.LicenseRestrictionProvider">
            <summary>
                Defines a license restriction provider.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProvider.#ctor">
            <summary>
                Specialized default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProvider.GetLicenseRestriction(System.String,System.Type,System.Object)">
            <summary>
                 Gets license restriction.
             </summary>
            <param name="restriction">  The restriction. </param>
            <param name="type">         The type. </param>
            <param name="instance">     The instance. </param>
            <returns>
                 The license restriction.
             </returns>
        </member>
        <member name="T:Babel.Licensing.LicenseRestrictionProviderAttribute">
            <summary>
                Attribute for license restriction provider. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseRestrictionProviderAttribute.LicenseRestrictionProvider">
            <summary>
                 Gets the license restriction provider.
             </summary>
            <value>
                 The license restriction provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseRestrictionProviderAttribute.RestrictionProviderType">
            <summary>
                 Gets the type of the restriction provider.
             </summary>
            <value>
                 The type of the restriction provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseRestrictionProviderAttribute.RestrictionProviderName">
            <summary>
                 Gets the name of the restriction provider.
             </summary>
            <value>
                 The name of the restriction provider.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.#ctor(System.Type)">
            <summary>
                 Constructor.
             </summary>
            <param name="type"> The type. </param>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.#ctor(System.String)">
            <summary>
                 Constructor.
             </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.Equals(System.Object)">
            <summary>
                 Returns a value that indicates whether this instance is equal to a specified object.
             </summary>
            <param name="obj">
                 An <see cref="T:System.Object" /> to compare with this instance or null.
             </param>
            <returns>
                 true if <paramref name="obj" /> equals the type and value of this instance; otherwise,
                 false.
             </returns>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.GetHashCode">
            <summary>
                 Returns the hash code for this instance.
             </summary>
            <returns>
                 A 32-bit signed integer hash code.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicenseServiceProvider">
            <summary>
                Interface for license service provider.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseServiceProvider.GetService(System.Type)">
            <summary>
                 Gets a service.
             </summary>
            <param name="serviceType">  Type of the service. </param>
            <returns>
                 The service instance.
             </returns>
        </member>
        <member name="T:Babel.Licensing.LicenseServices">
            <summary>
                Provides a way to register and obtain a list of services to support licensing.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseServices.Current">
            <summary>
                The LicenseServices singleton.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseServices.LicenseContext">
            <summary>
                 Gets or sets a license context.
             </summary>
            <value>
                 The license context.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseServices.RegisteredServiceTypes">
            <summary>
            Gets the list of registered service types.
            </summary>
            <value>
                The list of registered service types.
            </value>
        </member>
        <member name="M:Babel.Licensing.LicenseServices.#ctor">
            <summary>
                Constructor that prevents a default instance of this class from being created.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseServices.AddService(System.Type,System.Object)">
            <summary>
                 Adds the specified service to the internal collection of services.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="serviceType">  The type of the service to add. </param>
            <param name="service">      The service object instance to add. </param>
        </member>
        <member name="M:Babel.Licensing.LicenseServices.GetService(System.Type)">
            <summary>
                 Gets type-based services from the license service provider.
             </summary>
            <param name="serviceType">  An object that specifies the type of service object to get. </param>
            <returns>
                 The requested service, or a null reference (Nothing in Visual Basic) if the service could not be located
             </returns>
            <remarks>
                 The return value of GetService must be cast to the interface type.
             </remarks>
        </member>
        <member name="M:Babel.Licensing.LicenseServices.GetService(System.String)">
            <summary>
                 Gets type-based services from the license service provider.
             </summary>
            <param name="serviceType">  The full type name of service object to get. </param>
            <returns>
                 The requested service, or a null reference (Nothing in Visual Basic) if the service could not be located
             </returns>
            <remarks>
                 The return value of GetService must be cast to the interface type.
             </remarks>
        </member>
        <member name="T:Babel.Licensing.LicenseStatus">
            <summary>
                Values that represent a license status.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.InternalError">
            <summary>
                Represents an internal error.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.TimeRollback">
            <summary>
                Occurs when the system clock was set back.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.LicenseExpired">
            <summary>
                Indicates that the license has expired.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.BadLicenseFormat">
            <summary>
                Indicates that the data representing the license have an invalid format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.AssemblyNotSigned">
            <summary>
                This error occurs when the licensed assembly has not been digitally signed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.AssemblyNotLicensed">
            <summary>
                An error that occurs when it was not found any license for the assembly which has been validated.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.ComponentNotLicensed">
            <summary>
                An error that occurs when the component that has been validated is not licensed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.NoSignature">
            <summary>
                This error occurs when the license is not digitally signed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.NoPublicKey">
            <summary>
                An error that occurs when the public key information required to validate a license is not available.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.InvalidSignature">
            <summary>
                Represents a license with an invalid digital signature.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.BadRestrictionFormat">
            <summary>
                This error occurs for a license restriction with an invalid format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.InvalidRestriction">
            <summary>
                This error occurs when the restriction validation is not passed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.RestrictionExpired">
            <summary>
                This error occurs when a license has a restriction with the expiry date that has passed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.MultipleLicenseValidationErrors">
            <summary>
                This error occurs when a license has a multiple validation errors.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.Valid">
            <summary>
                Represents a license that has passed all the validations.
            </summary>
        </member>
        <member name="T:Babel.Licensing.LicenseValidationResult">
            <summary>
                Encapsulates the result of a license validation.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseValidationResult.LicenseId">
            <summary>
                 Gets or sets the identifier of the license.
             </summary>
            <value>
                 The identifier of the license.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseValidationResult.Restriction">
            <summary>
                 Gets or sets the name of the restriction that generates this validation result.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseValidationResult.Exception">
            <summary>
                 Gets or sets the license validation exception.
             </summary>
            <value>
                 The license validation exception.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseValidationResult.#ctor(System.String,System.Exception)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.LicenseValidationResult" /> class with a specified license ID.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="licenseId">    The license identifier. </param>
            <param name="exception">    The license validation exception. </param>
        </member>
        <member name="T:Babel.Licensing.Pem">
            <summary>
                An utility class to read PEM files.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Pem.ReadSignature(System.String)">
            <summary>
                 Creates a signature provider object from a PEF file.
             </summary>
            <param name="fileName"> The PEM file name. </param>
            <returns>
                 A signature provider object.
             </returns>
            <seealso cref="T:Babel.Licensing.ISignatureProvider" />
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.Pem.ReadSignature(System.IO.Stream)">
            <summary>
                 Creates a signature provider object from a PEF stream.
             </summary>
            <param name="stream"> The PEM stream. </param>
            <returns>
                 A signature provider object.
             </returns>
            <seealso cref="T:Babel.Licensing.ISignatureProvider" />
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="T:Babel.Licensing.Product">
            <summary>
                Represents the licensed product.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Product.Id">
            <summary>
                 Gets or sets the product identifier.
             </summary>
            <value>
                 The product identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Name">
            <summary>
                 Gets or sets the product name.
             </summary>
            <value>
                 The product name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Version">
            <summary>
                 Gets or sets the product version.
             </summary>
            <value>
                 The product version.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Copyright">
            <summary>
                 Gets or sets product copyright.
             </summary>
            <value>
                 The product copyright.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Url">
            <summary>
                 Gets or sets URL where to find product information.
             </summary>
            <value>
                 The URL that represents this product.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Description">
            <summary>
                 Gets or sets the product description.
             </summary>
            <value>
                 The product description.
             </value>
        </member>
        <member name="M:Babel.Licensing.Product.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Product.#ctor(Babel.Licensing.Product)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the parameter other to copy is null.
             </exception>
            <param name="other">    The Product object to copy. </param>
        </member>
        <member name="T:Babel.Licensing.AfterSendReportEventArgs">
            <summary>
                Additional information for after send report events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.AfterSendReportEventArgs.Report">
            <summary>
                 Gets the report object.
             </summary>
            <value>
                 The report.
             </value>
        </member>
        <member name="P:Babel.Licensing.AfterSendReportEventArgs.Error">
            <summary>
                 Gets the error.
             </summary>
            <value>
                 The error.
             </value>
        </member>
        <member name="M:Babel.Licensing.AfterSendReportEventArgs.#ctor(Babel.Licensing.Report,System.Exception)">
            <summary>
                 Constructor.
             </summary>
            <param name="report">   The report. </param>
            <param name="error">    The error. </param>
        </member>
        <member name="T:Babel.Licensing.BabelReporting">
            <summary>
                A babel report service client. This class cannot be inherited.
            </summary>
            <example>
                <code source="Examples\BabelReporting.Configuration.cs" language="cs" />
                <code source="Examples\BabelReporting.Configuration.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.BabelReporting.Instance">
            <summary>
                 Gets the instance.
             </summary>
            <value>
                 The instance.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelReporting.Create(Babel.Licensing.BabelServiceConfiguration)">
            <summary>
                 Creates a new BabelReporting.
             </summary>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="configuration">    The configuration. </param>
            <returns>
                 A BabelReporting.
             </returns>
        </member>
        <member name="E:Babel.Licensing.BabelReporting.BeforeSendReport">
            <summary>
                Event queue for all listeners interested in BeforeSendReport events.
            </summary>
        </member>
        <member name="E:Babel.Licensing.BabelReporting.AfterSendReport">
            <summary>
                Event queue for all listeners interested in AfterSendReport events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelReporting.#ctor(Babel.Licensing.BabelServiceConfiguration)">
            <summary>
                 Default constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="configuration">    The configuration. </param>
        </member>
        <member name="M:Babel.Licensing.BabelReporting.Send(Babel.Licensing.Report)">
            <summary>
                 Send this message.
             </summary>
            <param name="report">   The report. </param>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelReportingExtensions">
            <summary>
                A babel reporting extensions.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.ReportExceptions(Babel.Licensing.BabelReporting,System.Action{Babel.Licensing.ExceptionReportOptions})">
            <summary>
                 A BabelReporting extension method that configure exception reporting.
             </summary>
            <param name="self">             The self to act on. </param>
            <param name="configureOptions"> (Optional) Options for controlling the reporting configuration. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.BabelReporting" /> object.
             </returns>
            <example>
                <code source="Examples\ExceptionReport.Send.cs" language="cs" />
                <code source="Examples\ExceptionReport.Send.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.SendExceptionReport(Babel.Licensing.BabelReporting,System.Exception)">
            <summary>
                 A BabelReporting extension method that reports an exception.
             </summary>
            <param name="self"> The self to act on. </param>
            <param name="e">    The exception. </param>
            <returns>
                 True if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.ReportLicenseUsage(Babel.Licensing.BabelReporting,System.Action{Babel.Licensing.LicenseUsageReportOptions})">
            <summary>
                 A BabelReporting extension method that configure license usage reporting.
             </summary>
            <param name="self">             The self to act on. </param>
            <param name="configureOptions"> (Optional) Options for controlling the configure. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.BabelReporting" /> object.
             </returns>
            <example>
                <code source="Examples\LicenseUsageReport.Send.cs" language="cs" />
                <code source="Examples\LicenseUsageReport.Send.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.SendLicenseUsageReport(Babel.Licensing.BabelReporting)">
            <summary>
                 A BabelReporting extension method that sends a license usage report.
             </summary>
            <param name="self"> The self to act on. </param>
            <returns>
                 True if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BeforeSendReportEventArgs">
            <summary>
                Additional information for before send report events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BeforeSendReportEventArgs.Report">
            <summary>
                 Gets the report.
             </summary>
            <value>
                 The report.
             </value>
        </member>
        <member name="P:Babel.Licensing.BeforeSendReportEventArgs.Cancel">
            <summary>
                 Gets or sets a value indicating whether to cancel report sending.
             </summary>
            <value>
                 true if cancel, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.BeforeSendReportEventArgs.#ctor(Babel.Licensing.Report)">
            <summary>
                 Constructor.
             </summary>
            <param name="report">   The report. </param>
        </member>
        <member name="T:Babel.Licensing.EnvironmentReportOptions">
            <summary>
                 Options for collecting environment information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectApplicationInformation">
            <summary>
                 Gets or sets a value indicating whether the collect application information.
             </summary>
            <value>
                 True if collect application information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectUserInformation">
            <summary>
                 Gets or sets a value indicating whether the collect user information.
             </summary>
            <value>
                 True if collect user information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectEnvironmentVariables">
            <summary>
                 Gets or sets a value indicating whether the collect environment variables.
             </summary>
            <value>
                 True if collect environment variables, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.EnvironmentVariables">
            <summary>
                 Gets or sets the environment variable list to collect.
                 If empty all environment variables are collected.
             </summary>
            <value>
                 The environment variables to collect.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectVirtualMachineInformation">
            <summary>
                 Gets or sets a value indicating whether the collect virtual machine information.
             </summary>
            <value>
                 True if collect virtual machine information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectLoadedAssemblies">
            <summary>
                 Gets or sets a value indicating whether the collect loaded assemblies.
             </summary>
            <value>
                 True if collect loaded assemblies, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectLoadeModules">
            <summary>
                 Gets or sets a value indicating whether the collect loaded modules.
             </summary>
            <value>
                 True if collect loaded modules, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.AssemblyNames">
            <summary>
                 Gets or sets the list of assembly names to collect.
             </summary>
            <value>
                 The assembly names to collect.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectProcessInformation">
            <summary>
                 Gets or sets a value indicating whether to collect process information.
             </summary>
            <value>
                 True if collect process information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.ProcessNames">
            <summary>
                 Gets or sets the list of process names to collect.
             </summary>
            <value>
                 The process names to collect.
             </value>
        </member>
        <member name="M:Babel.Licensing.EnvironmentReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.SystemReportOptions">
            <summary>
                Options for collecting system information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectSystemInformation">
            <summary>
                 Gets or sets a value indicating whether the collect system information.
             </summary>
            <value>
                 True if collect system information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectOsInformation">
            <summary>
                 Gets or sets a value indicating whether the collect operating system information.
             </summary>
            <value>
                 True if collect operating system information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectProcessorInformation">
            <summary>
                 Gets or sets a value indicating whether the collect processor information.
             </summary>
            <value>
                 True if collect processor information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectDiskInformation">
            <summary>
                 Gets or sets a value indicating whether the collect disk information.
             </summary>
            <value>
                 True if collect disk information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectMemoryInformation">
            <summary>
                 Gets or sets a value indicating whether the collect memory information.
             </summary>
            <value>
                 True if collect memory information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectDisplayInformation">
            <summary>
                 Gets or sets a value indicating whether the collect display information.
             </summary>
            <value>
                 True if collect display information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectNetworkInformation">
            <summary>
                 Gets or sets a value indicating whether the collect network information.
             </summary>
            <value>
                 True if collect network information, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.SystemReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.NetworkReportOptions">
            <summary>
                Options for collecting network information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.NetworkReportOptions.CollecAdapterInformation">
            <summary>
                 Gets or sets a value indicating whether the collec adapter information.
             </summary>
            <value>
                 True if collec adapter information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.NetworkReportOptions.CollecDomainInformation">
            <summary>
                 Gets or sets a value indicating whether the collec domain information.
             </summary>
            <value>
                 True if collec domain information, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.NetworkReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ExceptionReportOptions">
            <summary>
                Options class provides information needed to control exception report behavior.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.Environment">
            <summary>
                 Gets or sets the environment options.
             </summary>
            <value>
                 The environment.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.System">
            <summary>
                 Gets or sets the system options.
             </summary>
            <value>
                 The system.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.Network">
            <summary>
                 Gets or sets the network options.
             </summary>
            <value>
                 The network.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.Formatted">
            <summary>
                 Gets or sets a value indicating whether the report should be formatted.
             </summary>
            <value>
                 True if formatted, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.ExceptionReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.IReportSender">
            <summary>
                Interface for report sender.
            </summary>
        </member>
        <member name="E:Babel.Licensing.IReportSender.BeforeSendReport">
            <summary>
                Event queue for all listeners interested in BeforeSendReport events.
            </summary>
        </member>
        <member name="E:Babel.Licensing.IReportSender.AfterSendReport">
            <summary>
                Event queue for all listeners interested in AfterSendReport events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IReportSender.Send(Babel.Licensing.Report)">
            <summary>
                 Send a <see cref="T:Babel.Licensing.Report" />.
             </summary>
            <param name="report">   The report to send. </param>
            <returns>
                 True if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.LicenseReportOptions">
            <summary>
                Options class provides information needed to control license usage report behavior.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectFeaturesAccess">
            <summary>
                 Gets or sets a value indicating whether the collect features access.
             </summary>
            <value>
                 True if collect features access, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectFieldsAccess">
            <summary>
                 Gets or sets a value indicating whether the collect fields access.
             </summary>
            <value>
                 True if collect fields access, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectRestrictionsAccess">
            <summary>
                 Gets or sets a value indicating whether the collect restrictions access.
             </summary>
            <value>
                 True if collect restrictions access, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectMembers">
            <summary>
                 Gets or sets the included members names.
             </summary>
            <value>
                 The include members names.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.LicenseUsageReportOptions">
            <summary>
                A report license usage options.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.License">
            <summary>
                 Gets or sets the license report options.
             </summary>
            <value>
                 The license.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.Environment">
            <summary>
                 Gets or sets the environment report options.
             </summary>
            <value>
                 The environment.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.System">
            <summary>
                 Gets or sets the system.
             </summary>
            <value>
                 The system.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.Network">
            <summary>
                 Gets or sets the network report options.
             </summary>
            <value>
                 The network.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.EncryptionKey">
            <summary>
                 Gets or sets the encryption key.
             </summary>
            <value>
                 The encryption key.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.EncryptionEncoding">
            <summary>
                 Gets or sets the encryption encoding. The default encoding is <see cref="T:Babel.Licensing.Base32Encoding" /></summary>
            <value>
                 The encryption encoding.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.Formatted">
            <summary>
                 Gets or sets a value indicating whether the report should be formatted.
             </summary>
            <value>
                 True if formatted, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseUsageReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.Report">
            <summary>
                Represents the base class for any report object.
            </summary>
        </member>
        <member name="F:Babel.Licensing.Report.FormatVersion">
            <summary>
                Current Report version.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Report.Properties">
            <summary>
                 Gets the report properties.
             </summary>
            <value>
                 The properties.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Name">
            <summary>
                 Gets the report name.
             </summary>
            <value>
                 The report name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Content">
            <summary>
                 Gets the report content.
             </summary>
            <value>
                 The report content.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Date">
            <summary>
                 Gets or sets the report date.
             </summary>
            <value>
                 The report date.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Version">
            <summary>
                 Gets the report version.
             </summary>
            <value>
                 The report version.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Encrypted">
            <summary>
                 Gets a value indicating whether the report content is encrypted.
             </summary>
            <value>
                 True if this report content is encrypted, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.BaseAddress">
            <summary>
            Gets the server base address for this report object.
            </summary>
            <value>
                The report server base address.
            </value>
        </member>
        <member name="M:Babel.Licensing.Report.#ctor(System.String)">
            <summary>
                 Initializes a new report instance with a given name.
             </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Babel.Licensing.Report.#ctor(System.String,System.String)">
            <summary>
                 Initializes a new report instance with a given report name and content.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="name">     The report name. </param>
            <param name="content">  The report content. </param>
        </member>
        <member name="M:Babel.Licensing.Report.Create(System.String,System.String)">
            <summary>
                 Creates a report from its string content.
             </summary>
            <exception cref="T:System.ArgumentNullException">        Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="report">   The report content. </param>
            <param name="password"> (Optional) The password to decrypt report content. </param>
            <returns>
                 A Report object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Report.Build">
            <summary>
                Builds this object.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ValidationResult">
            <summary>
                Values that represent license restriction validation codes.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.Valid">
            <summary>
                Represents a valid restriction option.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.BadFormat">
            <summary>
                Represents a bad format restriction option.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.Expired">
            <summary>
                Represents a restriction that has the expire date passed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.Invalid">
            <summary>
                Represents a restriction that has not passed the validation.
            </summary>
        </member>
        <member name="T:Babel.Licensing.Restriction">
            <summary>
                Defines a base class for a license restriction.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Restriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Restriction.License">
            <summary>
                Get the parent license
            </summary>
        </member>
        <member name="P:Babel.Licensing.Restriction.Listeners">
            <summary>
                 Gets the listeners.
             </summary>
            <value>
                 The listeners.
             </value>
        </member>
        <member name="P:Babel.Licensing.Restriction.Id">
            <summary>
                 Gets or sets the restriction identifier.
             </summary>
            <value>
                 The restriction identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Restriction.ExpireDate">
            <summary>
                 Gets or sets the expire date after which the license is no longer valid.
             </summary>
            <value>
                 A <see cref="T:System.DateTime" /> expire date.
             </value>
        </member>
        <member name="M:Babel.Licensing.Restriction.#ctor">
            <summary>
                Default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Restriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current restriction object.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">     The <see cref="T:System.Type" /> for which the restriction is validated. </param>
            <param name="instance"> The instance. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Restriction.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Restriction.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Restriction.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.BetaRestriction">
            <summary>
                Defines a <see cref="T:Babel.Licensing.Restriction" /> typically used to tag 
                the license with beta release information. Setting an expire date for this restriction will allow
                to deliver software beta releases, valid for a limited time, before the delivery of the live release.
            </summary>
            <example>
                <code source="Examples\BetaRestriction.cs" language="cs" />
                <code source="Examples\BetaRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.BetaRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.BetaRestriction.BuildType">
            <summary>
                 Gets the type of the build for this beta release.
             </summary>
            <value>
                 A string representing the build type.
             </value>
        </member>
        <member name="P:Babel.Licensing.BetaRestriction.RecentChanges">
            <summary>
                 Gets this beta recent changes.
             </summary>
            <value>
                 A brief description of the changes introduced with this beta release.
             </value>
        </member>
        <member name="M:Babel.Licensing.BetaRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.BetaRestriction" /> class.
            </summary>
        </member>
        <member name="T:Babel.Licensing.DomainRestriction">
            <summary>
                Defines a <see cref="T:Babel.Licensing.Restriction" /> used to tie the license to a given network domain. 
            </summary>
            <example>
                <code source="Examples\DomainRestriction.cs" language="cs" />
                <code source="Examples\DomainRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.DomainRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.DomainRestriction.Domain">
            <summary>
                 Gets the network domain name.
             </summary>
            <value>
                 A string that represents the domain.
             </value>
        </member>
        <member name="P:Babel.Licensing.DomainRestriction.Role">
            <summary>
                 Gets the role associated to this domain.
             </summary>
            <value>
                 The domain role.
             </value>
        </member>
        <member name="M:Babel.Licensing.DomainRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.DomainRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.DomainRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current domain license restriction.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The object instance for which the restriction is validated. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.HardwareRestriction">
            <summary>
                Defines an hardware <see cref="T:Babel.Licensing.Restriction" /> object.
                The hardware restriction tie the license to a particular hardware represented by a key string.
                This class cannot be inherited.
            </summary>
            <example>
                <code source="Examples\HardwareRestriction.cs" language="cs" />
                <code source="Examples\HardwareRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.HardwareRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.HardwareRestriction.HardwareKey">
            <summary>
                 Gets the hardware key.
             </summary>
            <value>
                 The hardware key.
             </value>
        </member>
        <member name="P:Babel.Licensing.HardwareRestriction.Data">
            <summary>
                 Gets additional hardware information.
             </summary>
            <value>
                 An array of bytes that contains additional hardware information.
             </value>
        </member>
        <member name="M:Babel.Licensing.HardwareRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.HardwareRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current hardware restriction.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The object instance for which the restriction is validated. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.TrialRestriction">
            <summary>
                Represents a <see cref="T:Babel.Licensing.Restriction" /> typically used to define trial licenses.
                The trial restriction can limit the number of days the license can be used, the number of application
                instances that can run simultaneously, the total number of executions and the running time.
            </summary>
            <example>
                <code source="Examples\TrialRestriction.cs" language="cs" />
                <code source="Examples\TrialRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.ExpireDays">
            <summary>
                 Gets the number of days after which the license expires.
             </summary>
            <value>
                 The number of trial days.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunInstances">
            <summary>
                 Gets or sets the number of the software instances that are allowed to run simultaneously.
             </summary>
            <value>
                 The number of allowed instances.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunCount">
            <summary>
                 Gets the number of runs after which the license expires.
             </summary>
            <value>
                 The total number of runs available for this license.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunCountLeft">
            <summary>
                 Gets the run count remaining before the license expires.
             </summary>
            <value>
                 The run count remaining.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunTime">
            <summary>
                 Gets the time that the software is allowed to run before the license expires.
             </summary>
            <value>
                 The run time.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.Terms">
            <summary>
                 Gets the license trial terms.
             </summary>
            <value>
                 The trial terms for this license.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.TimeLeft">
            <summary>
                 Gets the time remaining before the license expires.
             </summary>
            <value>
                 The trial time remaining.
             </value>
        </member>
        <member name="M:Babel.Licensing.TrialRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.TrialRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.TrialRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current trial license restriction.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The object instance for which the restriction is validated. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.UsageRestriction">
            <summary>
                An usage <see cref="T:Babel.Licensing.Restriction" /> is typically used to define environment license restrictions.
            </summary>
            <example>
                <code source="Examples\UsageRestriction.cs" language="cs" />
                <code source="Examples\UsageRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.Usage">
            <summary>
                 Gets or sets the license usage.
             </summary>
            <value>
                 The license usage.
             </value>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.ProcessList">
            <summary>
                 Gets or sets the name of the process.
             </summary>
            <value>
                 The name of the process.
             </value>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.CanRunInVirtualEnvironment">
            <summary>
                 Whether the use of the license is permitted inside a virtual machine or emulator.
             </summary>
            <value>
                 Null if the restriction is not defined, true if the license is valid inside a virtual environment, otherwise false.
             </value>
        </member>
        <member name="M:Babel.Licensing.UsageRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.UsageRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.UsageRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current license usage restriction object.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The instance. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.StringEncrypter">
            <summary>   A string encryptor class. </summary>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Encrypt(System.String,System.String)">
            <summary>   A string extension method that encrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The encrypted string. </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Encrypt(System.String,System.String,Babel.Licensing.IEncoding)">
            <summary>
                 A string extension method that encrypts strings.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <param name="encoding"> The encrypted string encoding. </param>
            <returns>
                 The encrypted string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Decrypt(System.String,System.String)">
            <summary>   A string extension method that decrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The decrypted string. </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Decrypt(System.String,System.String,Babel.Licensing.IEncoding)">
            <summary>
                 A string extension method that decrypts strings.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <param name="encoding"> The encrypted string encoding. </param>
            <returns>
                 The decrypted string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Encrypt(System.String,System.Byte[])">
            <summary>   A string extension method that encrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The encrypted string. </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Decrypt(System.String,System.Byte[])">
            <summary>   A string extension method that decrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The decrypted string. </returns>
        </member>
        <member name="T:Babel.Licensing.StringFormat">
            <summary>
                Values that represent license string formats.
            </summary>
        </member>
        <member name="F:Babel.Licensing.StringFormat.Base32">
            <summary>
                Represents the Base32 string format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.StringFormat.Ascii">
            <summary>
                Represents the ASCII string format.
            </summary>
        </member>
        <member name="T:Babel.Licensing.SerialBuilder">
            <summary>
                This class is used to generate serial license strings.
                The generated serial is a relative short license string.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.SerialFormat">
            <summary>
                 Gets or sets the serial format <see cref="T:Babel.Licensing.StringFormat" />.
             </summary>
            <value>
                 The string format used to generate the serial.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.PrivateKey">
            <summary>
                 Gets or sets the private key used to sign the license.
                 The key represented by a Base32 encoded string.
             </summary>
            <value>
                 The private key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.PublicKey">
            <summary>
                 Gets or sets the public key used to validate the license.
                 The key represented by a Base32 encoded string.
             </summary>
            <value>
                 The public key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.LicenseId">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The identifier of the license.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.LicenseInfo">
            <summary>
                 Gets or sets general information stored into the license.
             </summary>
            <value>
                 Information stored into the license.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.ExpireDate">
            <summary>
                 Gets or sets the license expire date.
             </summary>
            <value>
                 The expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.ExpireDays">
            <summary>
                 Gets or sets the number of days after which the generated license expires.
             </summary>
            <value>
                 The number of expire days.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.RunInstances">
            <summary>
                 Gets or sets the number of application instances are allowed 
                 to run simultaneously for the generated license.
             </summary>
            <value>
                 The number of application instances are allowed
                 to run simultaneously.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.DomainName">
            <summary>
                 Gets or sets the name of the domain.
             </summary>
            <value>
                 The name of the domain.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.HardwareKey">
            <summary>
                 Gets or sets the hardware key.
             </summary>
            <value>
                 The hardware key.
             </value>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.SerialBuilder" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.GenerateSerial(System.Int32)">
            <summary>
                 Generates a new serial.
             </summary>
            <param name="tokenLength"> (Optional) length of the tokens. </param>
            <returns>
                 The serial.
             </returns>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.IsValid(System.String)">
            <summary>
                 Query if 'serial' is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the serial argument is null.
             </exception>
            <param name="serial"> The serial to validate. </param>
            <returns>
                <c>true</c> if the serial valid, <c>false</c> if is not valid.
             </returns>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.CreateKeyPair(Babel.Licensing.ECDsaKeySize)">
            <summary>
                 Creates key pair used to generate and validate a serial.
             </summary>
            <param name="keySize">  Size of the key. </param>
        </member>
        <member name="T:Babel.Licensing.SerialManager">
            <summary>
                This class is used to validate serials and get <see cref="T:Babel.Licensing.StringLicense" /> object from serials.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.SerialManager.PublicKey">
            <summary>
                 Gets or sets the public key used to validate serials.
             </summary>
            <value>
                 The public key as base 32 string.
             </value>
        </member>
        <member name="M:Babel.Licensing.SerialManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.SerialManager" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.SerialManager.IsValid(System.String)">
            <summary>
                 Query if the serial specified is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the argument serial is null.
             </exception>
            <param name="serial">  The serial as base32 string. The serial can include '-' characters.</param>
            <returns>
                <c>true</c> if the serial is valid, otherwise <c>false</c>.
             </returns>
        </member>
        <member name="M:Babel.Licensing.SerialManager.Validate(System.String,System.Type,System.Object)">
            <summary>
                 Validates the given serial and returns a <see cref="T:Babel.Licensing.StringLicense" /> 
                 object if the serial is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when a Babel License error condition occurs.
             </exception>
            <param name="serial">
                 The serial as base32 string. The serial can include '-' characters.
             </param>
            <param name="type">     The type. </param>
            <param name="instance"> The instance. </param>
            <returns>
                 A <see cref="T:Babel.Licensing.StringLicense" /> object if the serial is valid, otherwise 
                 it throws a <see cref="T:Babel.Licensing.BabelLicenseException" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.StringLicense">
            <summary>
                Defines a license object that can be retrieved from an encoded string. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Babel.Licensing.StringLicense.DefaultMaskSize">
            <summary>
                The default string license mask size used to randomize the generated string.
            </summary>
        </member>
        <member name="P:Babel.Licensing.StringLicense.LicenseKey">
            <summary>
                 Gets the license key granted to this component.
             </summary>
            <value>
                 A license key granted to this component.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Timestamp">
            <summary>
                 Gets the date/time when this object was created.
             </summary>
            <value>
                 This object timestamp.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.IsTrial">
            <summary>
                 Gets a value indicating whether this object represents a trial license.
             </summary>
            <value>
                 true if this objects contains a trial license, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.IsBeta">
            <summary>
                 Gets a value indicating whether this object represents a beta license.
             </summary>
            <value>
                 true if this is a beta license, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Id">
            <summary>
                 Gets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.IssueDate">
            <summary>
                 Gets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.ExpireDate">
            <summary>
                 Gets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.SupportExpireDate">
            <summary>
                 Gets the license support expire date.
             </summary>
            <value>
                 The license support expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Type">
            <summary>
                 Gets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Sites">
            <summary>
                 Gets or sets the number of sites to license.
             </summary>
            <value>
                 The licensed sites.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Licensee">
            <summary>
                 Gets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Product">
            <summary>
                 Gets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Assemblies">
            <summary>
                 Gets the collection of licensed assemblies full names.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Features">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Feature" /> collection.
             </summary>
            <value>
                 The license feature collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Fields">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Field" /> collection.
             </summary>
            <value>
                 The license field collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="M:Babel.Licensing.StringLicense.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.StringLicense" /> class.
            </summary>
            <example>
                <code source="Examples\StringLicense.Constructor.cs" language="cs" />
                <code source="Examples\StringLicense.Constructor.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicense.Finalize">
            <summary>
                Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Babel.Licensing.StringLicense.Dispose">
            <summary>
                Disposes of the resources used by the license object.
            </summary>
        </member>
        <member name="T:Babel.Licensing.StringLicenseBuilder">
            <summary>
                This class is used to generate encoded license strings.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.StringLicenseBuilder.Format">
            <summary>
                 Gets or sets the <see cref="T:Babel.Licensing.StringFormat" /> used to generate the license.
             </summary>
            <value>
                 The license string format.
             </value>
        </member>
        <member name="E:Babel.Licensing.StringLicenseBuilder.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="E:Babel.Licensing.StringLicenseBuilder.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
            <example>
                This example shows how to implement a custom MD5 signature provider.
                <code source="Examples\CustomSignatureProvider.MD5Signature.cs" language="cs" /><code source="Examples\CustomSignatureProvider.MD5Signature.vb" language="vbnet" /></example>
            <example>
                The MD5 signature can be used to create and validate the license key.
                <code source="Examples\CustomSignatureProvider.MD5Signature.Validate.cs" language="cs" /><code source="Examples\CustomSignatureProvider.MD5Signature.Validate.vb" language="vbnet" /></example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.StringLicenseBuilder" /> class.
            </summary>
            <example>
                <code source="Examples\StringLicenseBuilder.Constructor.vb" language="vbnet" />
                <code source="Examples\StringLicenseBuilder.Constructor.cs" language="cs" />
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.#ctor(Babel.Licensing.ISignatureProvider)">
            <summary>
                 Create a new instance of <see cref="T:Babel.Licensing.StringLicenseBuilder" /> class with the given
                 signature provider.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="signer">   The license signature provider <see cref="T:Babel.Licensing.ISignatureProvider" />. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToReadableString(System.String)">
            <summary>
                 Converts the current license state to a readable string.
             </summary>
            <param name="format">   Describes the format to use. </param>
            <returns>
                 The current license state as a string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToString(System.String)">
            <summary>
                 Returns an encoded license string according to the format specified.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown if the format parameter is null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when the format parameter specified is not valid.
             </exception>
            <param name="format">Describes the format to use. This can be ASCII or Base32.</param>
            <returns>
                 A string that represents the current license in the given format.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToString">
            <summary>
                 Returns an encoded string that represents the current license.
             </summary>
            <returns>
                 A string that represents the current license in the format specified for <see cref="T:Babel.Licensing.StringLicenseBuilder" />.
             </returns>
        </member>
        <member name="P:Babel.Licensing.StringLicenseBuilder.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
                 The signature provider is used to sign and verify the integrity of the license data.
             </summary>
            <value>
                 The signature provider type <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </value>
            <example>
                <code>
                    StringLicenseBuilder builder = new StringLicenseBuilder();
                    builder.SignatureProvider = RSASignature.CreateFromKeyFile("KeyPair.snk");
                 </code>
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToLicenses">
            <summary>
                 Converts this object to a <see cref="T:Babel.Licensing.ILicense" /> object.
             </summary>
            <returns>
                 This object as a <see cref="T:Babel.Licensing.ILicense" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Load(System.IO.Stream)">
            <summary>
                 Loads the license from the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the fileName argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the file contains bad data.
             </exception>
            <param name="stream"> Specify the input license stream. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Load(System.IO.TextReader)">
            <summary>
                 Loads the license from the given text reader.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the reader argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the <see cref="T:System.IO.TextReader" /> reads bad data.
             </exception>
            <param name="reader">   The <see cref="T:System.IO.TextReader" /> used to read the license. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Parse(System.String)">
            <summary>
                 Parse the input license string. If the string is not a valid encoded license string,
                 it throws a <see cref="T:Babel.Licensing.BabelLicenseException" />.
             </summary>
            <param name="license">  The encoded license string to parse. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Save(System.IO.Stream)">
            <summary>
                 Saves the current license state to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the fileName argument is null.
             </exception>
            <param name="stream"> The output license stream.
             </param>
            <example> 
                 This sample shows how to generate and save an encoded license string to a file.
                 <code>
                     StringLicense license = new StringLicense();
            
                     license.Id = IdGenerator.Create("lic", 5);
                     license.Product = new Product();
                     license.Product.Id = IdGenerator.Create("prd", 5);
            
                     // Create an encoded string license
                     StringLicenseBuilder builder = new StringLicenseBuilder();
                     builder.AddOrUpdate(license);
                     
                     // Save the license to memory
                     MemoryStream stream = new MemoryStream();
                     builder.Save(stream);
                 </code></example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Save(System.IO.TextWriter)">
            <summary>
                 Saves the current license using the given <see cref="T:System.IO.TextWriter" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the writer argument is null.
             </exception>
            <param name="writer">   The <see cref="T:System.IO.TextWriter" /> object used to save the license. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.SetMaskSize(System.Int32)">
            <summary>
                 Sets the mask size used to randomize the generated license.
             </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when the size argument is a negative number.
             </exception>
            <param name="size"> The size represent the number of bytes used to randomize the license. </param>
            <example>
                <code>
                      StringLicenseBuilder builder = new StringLicenseBuilder();
                      
                      // Generates one of the possible 256 random licenses
                      string license = builder.ToString();
                 </code>
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.SetMask(System.Byte[])">
            <summary>
                 Sets the mask used to generate the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="mask"> An array of bytes. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.AddOrUpdate(Babel.Licensing.ILicense)">
            <summary>
                 Adds a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 to the <see cref="T:Babel.Licensing.StringLicenseBuilder" /> if the license does not already exists, or updates the 
                 <see cref="T:Babel.Licensing.ILicense" /> if the key already exists.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Remove(Babel.Licensing.ILicense)">
            <summary>
                 Removes a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 from the <see cref="T:Babel.Licensing.StringLicenseBuilder" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
                     Remove
             <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object to be removed. </param><returns><c>true</c> if the license is successfully removed, <c>false</c> if it fails to remove the license.
             </returns></member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Sign">
            <summary>
                 Add a signature to the current license object.
             </summary>
            <exception cref="T:System.InvalidOperationException">
                 Thrown if there is the signature cannot be generated.
             </exception>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Validate">
            <summary>
                 Validates the current license signature.
                 This method doesn't validate license restrictions. 
                 Is not meant to be used to validate the license in client applications. 
                 To validate the license in client applications use the <see cref="T:Babel.Licensing.StringLicenseManager" /> class.
             </summary>
            <returns>
                 true if the signature id valid, false if the signature is not present or not valid.
             </returns>
        </member>
        <member name="T:Babel.Licensing.StringLicenseManager">
            <summary>
                This class is used to validate string licenses and get <see cref="T:Babel.Licensing.StringLicense" /> object from license string.
            </summary>
        </member>
        <member name="E:Babel.Licensing.StringLicenseManager.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.OnCreateCustomRestriction(Babel.Licensing.CreateCustomRestrictionEventArgs)">
            <summary>
                 Raises the CreateCustomRestriction event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="E:Babel.Licensing.StringLicenseManager.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.OnCreateCustomSignatureProvider(Babel.Licensing.CreateCustomSignatureProviderEventArgs)">
            <summary>
                 Raises the CreateCustomSignatureProvider event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="P:Babel.Licensing.StringLicenseManager.LicenseFactory">
            <summary>
                 Gets or sets the license factory.
             </summary>
            <value>
                 The license factory.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicenseManager.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
             </summary>
            <value>
                 The signature provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicenseManager.CurrentContext">
            <summary>
                 Gets or sets the license context.
             </summary>
            <value>
                 The current context.
             </value>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.IsValid(System.String,System.Type,System.Object)">
            <summary>
                 Determines whether the given string is a valid license.
             </summary>
            <param name="license">  The license string. </param>
            <param name="type">     The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 true if the given string license is valid; otherwise, false.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the StringLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.Validate(System.String,System.Type,System.Object)">
            <summary>
                 Validates the string license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when a Babel License error condition occurs.
             </exception>
            <param name="licenseKey">  The string license string. </param>
            <param name="type"> The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 An <see cref="T:Babel.Licensing.StringLicense" /> object that has been validated.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the StringLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="T:Babel.Licensing.Ascii85Encoding">
            <summary>
            Converts between binary data and an Ascii85-encoded string.
            </summary>
            <remarks>See <a href="http://en.wikipedia.org/wiki/Ascii85">Ascii85 at Wikipedia</a>.</remarks>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.CanDecode(System.String)">
            <summary>
                 Determine if we can decode the given string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The Ascii85 string. </param>
            <returns>
                 true if we can decode, false if not.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.Encode(System.Byte[])">
            <summary>
            Encodes the specified byte array in Ascii85.
            </summary>
            <param name="bytes">The bytes to encode.</param>
            <returns>An Ascii85-encoded string representing the input byte array.</returns>
            <example>
                <code source="Examples\Ascii85Encoding.cs" language="cs" />
                <code source="Examples\Ascii85Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.Decode(System.String)">
            <summary>
            Decodes the specified Ascii85 string into the corresponding byte array.
            </summary>
            <param name="encoded">The Ascii85 string.</param>
            <returns>The decoded byte array.</returns>
            <example>
                <code source="Examples\Ascii85Encoding.cs" language="cs" />
                <code source="Examples\Ascii85Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid for encoding.
             </summary>
            <param name="value">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
            <example>
                <code source="Examples\Ascii85Encoding.IsValidChar.cs" language="cs" />
                <code source="Examples\Ascii85Encoding.IsValidChar.vb" language="vbnet" />
            </example>
        </member>
        <member name="T:Babel.Licensing.Base32Encoding">
            <summary>
                Converts between binary data and an base32-encoded string.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.CanDecode(System.String)">
            <summary>
                 Determine if we can decode the given string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 true if we can decode, false if not.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.Encode(System.Byte[])">
            <summary>
                 Encodes the given buffer.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="bytes">    The buffer. </param>
            <returns>
                 The encoded string.
             </returns>
            <example>
                <code source="Examples\Base32Encoding.cs" language="cs" />
                <code source="Examples\Base32Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.Decode(System.String)">
            <summary>
                 Decodes the given string to its byte representation.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 The decoded string buffer.
             </returns>
            <example>
                <code source="Examples\Base32Encoding.cs" language="cs" />
                <code source="Examples\Base32Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid for encoding.
             </summary>
            <param name="ch">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
            <example>
                <code source="Examples\Base32Encoding.IsValidChar.cs" language="cs" />
                <code source="Examples\Base32Encoding.IsValidChar.vb" language="vbnet" />
            </example>
        </member>
        <member name="T:Babel.Licensing.IEncoding">
            <summary>
                Defines a common interface for objects that can provide string encoding.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IEncoding.Encode(System.Byte[])">
            <summary>
                 Encodes the given buffer.
             </summary>
            <param name="buffer">   The buffer. </param>
            <returns>
                 The encoded string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IEncoding.Decode(System.String)">
            <summary>
                 Decodes the given string to its byte representation.
             </summary>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 The decoded string buffer.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IEncoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid for encoding.
             </summary>
            <param name="value">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.XmlLicense">
            <summary>
                Defines a license object that can be retrieved from an XML document. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicense.Parse(System.String)">
            <summary>
                Parse the specified XML license string.
            </summary>
            <param name="licenseKey">The license key.</param>
            <returns>An XmlLicense object that corresponds to the license key.</returns>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.LicenseKey">
            <summary>
                 Gets the license key granted to this component.
             </summary>
            <value>
                 A license key granted to this component.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Id">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Type">
            <summary>
                 Gets or sets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Sites">
            <summary>
                 Gets or sets the number of sites to license.
             </summary>
            <value>
                 The licensed sites.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Timestamp">
            <summary>
                 Gets the license object creation time.
             </summary>
            <value>
                 The date and time the license object was instantiated.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.IssueDate">
            <summary>
                 Gets, sets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.ExpireDate">
            <summary>
                 Gets, sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.SupportExpireDate">
            <summary>
                 Gets, sets the license support expire date.
             </summary>
            <value>
                 The license support expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Licensee">
            <summary>
                 Gets, sets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Product">
            <summary>
                 Gets, sets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Assemblies">
            <summary>
                 Gets the licensed assemblies collection.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Features">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Feature" /> collection.
             </summary>
            <value>
                 The license feature collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Fields">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Field" /> collection.
             </summary>
            <value>
                 The license field collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.IsTrial">
            <summary>
                 Gets a value indicating whether this object is trial.
             </summary>
            <value>
                 true if this object is trial, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.IsBeta">
            <summary>
                 Gets a value indicating whether this object is beta.
             </summary>
            <value>
                 true if this object is beta, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlLicense.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.XmlLicense" /> class.
            </summary>
            <example>
                <code source="Examples\XmlLicense.Constructor.cs" language="cs" />
                <code source="Examples\XmlLicense.Constructor.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.XmlLicense.Finalize">
            <summary>
                Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicense.Dispose">
            <summary>
                Disposes of the resources used by the license object.
            </summary>
        </member>
        <member name="T:Babel.Licensing.XmlLicenseBuilder">
            <summary>
                Provides a custom constructor and validation for XML licenses.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseBuilder.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
            <example>
                This code creates an XML license with a custom restriction.
                <code source="Examples\CustomRestriction.Create.cs" language="cs" /><code source="Examples\CustomRestriction.Create.vb" language="vbnet" /></example>
            <example>
                To validate a custom restriction, handle the CreateCustomRestriction event
                and create the proper restriction object.
                <code source="Examples\CustomRestriction.Validate.cs" language="cs" /><code source="Examples\CustomRestriction.Validate.vb" language="vbnet" /></example>
            <example>
                This is the implementation of a custom restriction that is able to validate the 
                machine minimum requirements in terms of available memory and total number of CPU present.
                <code source="Examples\CustomRestriction.MinimumRequirementsRestriction.cs" language="cs" /><code source="Examples\CustomRestriction.MinimumRequirementsRestriction.vb" language="vbnet" /></example>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseBuilder.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseBuilder.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
                 The signature provider is used to sign and verify the integrity of the license data.
             </summary>
            <value>
                 The signature provider type <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </value>
            <example>
                <code>
                    XmlLicenseBuilder builder = new XmlLicenseBuilder();
                    builder.SignatureProvider = RSASignature.CreateFromKeyFile("KeyPair.snk");
                 </code>
            </example>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseBuilder.HasSignature">
            <summary>
                 Indicates whether the license has a signature.
             </summary>
            <value>
                <c>true</c> if this object has signature, <c>false</c> if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseBuilder.Encoding">
            <summary>
                 Gets or sets the character encoding used to save the license.
             </summary>
            <value>
                 The character encoding used to save the license.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseBuilder.AddXmlDeclaration">
            <summary>
                 Gets or sets a value indicating whether the add XML declaration.
             </summary>
            <value>
                 True if add XML declaration, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseBuilder.Formatted">
            <summary>
                 Gets or sets a value indicating whether the indent the generated XML.
             </summary>
            <value>
                 True if indent, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.#ctor(Babel.Licensing.ISignatureProvider)">
            <summary>
                 Create a new instance of <see cref="T:Babel.Licensing.XmlLicenseBuilder" /> class with the 
                 specified <see cref="T:Babel.Licensing.ISignatureProvider" /> signature provider.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="signer">   The <see cref="T:Babel.Licensing.ISignatureProvider" /> object used to digitally sign the license information.</param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.XmlLicenseBuilder" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.ToReadableString(System.String)">
            <summary>
                 Creates and returns a string representation of the current XML license.
             </summary>
            <param name="format">   Describes the format to use. </param>
            <remarks>
                 Available formats
                 B: Not formatted XML
             </remarks>
            <returns>
                 This XML license as a string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Parse(System.String)">
            <summary>
                 Parse the specified XML license string.
             </summary>
            <param name="license">  The XML license string. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.ToXml(System.Boolean)">
            <summary>
                 Converts this instance to an XML string.
             </summary>
            <param name="formatted"> Whether to format the XML output. </param>
            <returns>
                 The XML license string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.ToLicenses">
            <summary>
                 Converts this object to a <see cref="T:Babel.Licensing.ILicense" /> object.
             </summary>
            <returns>
                 This object as a <see cref="T:Babel.Licensing.ILicense" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.LoadXml(System.String)">
            <summary>
                 Loads the license from the specified XML document.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the xml argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the xml contains bad license data.
             </exception>
            <param name="xml"> The XML license document. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Load(System.IO.Stream)">
            <summary>
                 Loads the license from the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the stream argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the stream contains bad data.
             </exception>
            <param name="stream"> Specify the stream where to load the license. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Load(System.String)">
            <summary>
                 Loads the license from the given file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="path"> The file name where to save the license. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Save(System.IO.Stream)">
            <summary>
                 Saves the current license state to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the stream argument is null.
             </exception>
            <param name="stream"> The stream where to write the license.
             </param>
            <example> 
                 This sample shows how to generate and save an XML license to a MemoryStream.
                 <code>
                     XmlLicense license = new XmlLicense();
            
                     license.Id = IdGenerator.Create("lic", 5);
                     license.Product = new Product();
                     license.Product.Id = IdGenerator.Create("prd", 5);
            
                     // Create and sign a license
                     XmlLicenseBuilder builder = new XmlLicenseBuilder();
                     builder.SignatureProvider = RSASignature.CreateFromKeyFile("KeyPair.snk");
                     builder.AddOrUpdate(license);
                     builder.Sign();
                     
                     // Save the license 
                     MemoryStream stream = new MemoryStream();
                     builder.Save(stream);
                 </code></example>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Save(System.String)">
            <summary>
                 Saves the current license state to a given file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="path"> The file path where to save the license. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.AddOrUpdate(Babel.Licensing.ILicense)">
            <summary>
                 Adds a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 to the builder if the license does not already exists, or updates the <see cref="T:Babel.Licensing.ILicense" />
                 if the key already exists.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Remove(Babel.Licensing.ILicense)">
            <summary>
                 Removes a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 from the <see cref="T:Babel.Licensing.XmlLicenseBuilder" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object to be removed. </param>
            <returns>
                <c>true</c> if the license is successfully removed, <c>false</c> if it fails to remove the license.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Sign">
            <summary>
                 Add a signature to the current license object.
             </summary>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the signature cannot be generated.
             </exception>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Validate">
            <summary>
                Validates the current license signature.
                This method doesn't validate license restrictions. 
                Is not meant to be used to validate the license in client applications. 
                To validate the license in client applications use the <see cref="T:Babel.Licensing.XmlLicenseManager" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the signature cannot be validated.
            </exception>
            <returns>
                <c>true</c> if the signature id valid, <c>false</c> if the signature is not present or not valid.
            </returns>
        </member>
        <member name="T:Babel.Licensing.XmlLicenseManager">
            <summary>
                This class is used to validate XML license and get <see cref="T:Babel.Licensing.XmlLicense" /> object from XML.
            </summary>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseManager.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.OnCreateCustomRestriction(Babel.Licensing.CreateCustomRestrictionEventArgs)">
            <summary>
                 Raises the CreateCustomRestriction event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseManager.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.OnCreateCustomSignatureProvider(Babel.Licensing.CreateCustomSignatureProviderEventArgs)">
            <summary>
                 Raises the CreateCustomSignatureProvider event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseManager.LicenseFactory">
            <summary>
                 Gets or sets the license factory.
             </summary>
            <value>
                 The license factory.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseManager.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
             </summary>
            <value>
                 The signature provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseManager.CurrentContext">
            <summary>
                 Gets or sets the license context.
             </summary>
            <value>
                 The current context.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.IsValid(System.String,System.Type,System.Object)">
            <summary>
                 Determines whether the given XML string is a valid license.
             </summary>
            <param name="xml">      The XML license string. </param>
            <param name="type">     The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 true if the given XML license is valid; otherwise, false.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the XmlLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.Validate(System.String,System.Type,System.Object)">
            <summary>
                 Validates the XML license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when a Babel License error condition occurs.
             </exception>
            <param name="xml">  The XML license string. </param>
            <param name="type"> The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 An XmlLicense object that has been validated.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the XmlLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="P:System.Security.Cryptography.Xml.ReferenceList.System#Collections#IList#Item(System.Int32)">
            <internalonly />
        </member>
        <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.System#Collections#IList#Item(System.Int32)">
            <internalonly />
        </member>
        <member name="M:System.Security.Cryptography.Xml.SignedXmlDebugLog.WriteLine(System.Object,System.Diagnostics.TraceEventType,System.Security.Cryptography.Xml.SignedXmlDebugLog.SignedXmlDebugEvent,System.String)">
            <summary>
                Write data to the log
            </summary>
            <param name="source">object doing the trace</param>
            <param name="eventType">severity of the debug event</param>
            <param name="data">data being written</param>
            <param name="eventId">type of event being traced</param>
        </member>
        <member name="T:BitMiracle.LibTiff.Classic.TiffTag">
            <summary>
            TIFF tag definitions.
            </summary>
            <remarks>
            Joris Van Damme maintains
            <a href="http://www.awaresystems.be/imaging/tiff/tifftags.html" target="_blank">
            TIFF Tag Reference</a>, good source of tag information. It's an overview of known TIFF
            Tags with properties, short description, and other useful information.
            </remarks>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IGNORE">
            <summary>
            Tag placeholder
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SUBFILETYPE">
            <summary>
            Subfile data descriptor.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FileType" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OSUBFILETYPE">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Kind of data in subfile. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.OFileType" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEWIDTH">
            <summary>
            Image width in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH">
            <summary>
            Image height in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE">
            <summary>
            Bits per channel (sample).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COMPRESSION">
            <summary>
            Data compression technique.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Compression" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PHOTOMETRIC">
            <summary>
            Photometric interpretation.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Photometric" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.THRESHHOLDING">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Thresholding used on data. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Threshold" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CELLWIDTH">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Dithering matrix width.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CELLLENGTH">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Dithering matrix height.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER">
            <summary>
            Data order within a byte.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FillOrder" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DOCUMENTNAME">
            <summary>
            Name of document which holds for image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDESCRIPTION">
            <summary>
            Information about image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAKE">
            <summary>
            Scanner manufacturer name.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MODEL">
            <summary>
            Scanner model name/number.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS">
            <summary>
            Offsets to data strips.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIENTATION">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Image orientation. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Orientation" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLESPERPIXEL">
            <summary>
            Samples per pixel.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ROWSPERSTRIP">
            <summary>
            Rows per strip of data.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS">
            <summary>
            Bytes counts for strips.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MINSAMPLEVALUE">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Minimum sample value.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAXSAMPLEVALUE">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Maximum sample value.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XRESOLUTION">
            <summary>
            Pixels/resolution in x.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YRESOLUTION">
            <summary>
            Pixels/resolution in y.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG">
            <summary>
            Storage organization.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PAGENAME">
            <summary>
            Page name image is from.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XPOSITION">
            <summary>
            X page offset of image lhs.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YPOSITION">
            <summary>
            Y page offset of image lhs.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FREEOFFSETS">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Byte offset to free block.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FREEBYTECOUNTS">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Sizes of free blocks.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GRAYRESPONSEUNIT">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Gray scale curve accuracy.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.GrayResponseUnit" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GRAYRESPONSECURVE">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Gray scale response curve.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GROUP3OPTIONS">
            <summary>
            Options for CCITT Group 3 fax encoding. 32 flag bits.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Group3Opt" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.T4OPTIONS">
            <summary>
            TIFF 6.0 proper name alias for GROUP3OPTIONS.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GROUP4OPTIONS">
            <summary>
            Options for CCITT Group 4 fax encoding. 32 flag bits.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Group3Opt" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.T6OPTIONS">
            <summary>
            TIFF 6.0 proper name alias for GROUP4OPTIONS.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RESOLUTIONUNIT">
            <summary>
            Units of resolutions.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ResUnit" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PAGENUMBER">
            <summary>
            Page numbers of multi-page.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORRESPONSEUNIT">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Color curve accuracy.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ColorResponseUnit" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TRANSFERFUNCTION">
            <summary>
            Colorimetry info.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SOFTWARE">
            <summary>
            Name &amp; release.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DATETIME">
            <summary>
            Creation date and time.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ARTIST">
            <summary>
            Creator of image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.HOSTCOMPUTER">
            <summary>
            Machine where created.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PREDICTOR">
            <summary>
            Prediction scheme w/ LZW.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Predictor" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WHITEPOINT">
            <summary>
            Image white point.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PRIMARYCHROMATICITIES">
            <summary>
            Primary chromaticities.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMAP">
            <summary>
            RGB map for pallette image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.HALFTONEHINTS">
            <summary>
            Highlight + shadow info.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEWIDTH">
            <summary>
            Tile width in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILELENGTH">
            <summary>
            Tile height in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEOFFSETS">
            <summary>
            Offsets to data tiles.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEBYTECOUNTS">
            <summary>
            Byte counts for tiles.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BADFAXLINES">
            <summary>
            Lines with wrong pixel count.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CLEANFAXDATA">
            <summary>
            Regenerated line info.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.CleanFaxData" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CONSECUTIVEBADFAXLINES">
            <summary>
            Max consecutive bad lines.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SUBIFD">
            <summary>
            Subimage descriptors.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INKSET">
            <summary>
            Inks in separated image.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.InkSet" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INKNAMES">
            <summary>
            ASCII names of inks.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.NUMBEROFINKS">
            <summary>
            Number of inks.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DOTRANGE">
            <summary>
            0% and 100% dot codes.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TARGETPRINTER">
            <summary>
            Separation target.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXTRASAMPLES">
            <summary>
            Information about extra samples.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ExtraSample" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLEFORMAT">
            <summary>
            Data sample format.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.SampleFormat" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SMINSAMPLEVALUE">
            <summary>
            Variable MinSampleValue.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SMAXSAMPLEVALUE">
            <summary>
            Variable MaxSampleValue.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CLIPPATH">
            <summary>
            ClipPath. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XCLIPPATHUNITS">
            <summary>
            XClipPathUnits. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCLIPPATHUNITS">
            <summary>
            YClipPathUnits. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INDEXED">
            <summary>
            Indexed. Introduced post TIFF rev 6.0 by Adobe TIFF Technote 3.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGTABLES">
            <summary>
            JPEG table stream. Introduced post TIFF rev 6.0.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OPIPROXY">
            <summary>
            OPI Proxy. Introduced post TIFF rev 6.0 by Adobe TIFF technote.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGPROC">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            JPEG processing algorithm.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegProc" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGIFOFFSET">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Pointer to SOI marker.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGIFBYTECOUNT">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            JFIF stream length
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGRESTARTINTERVAL">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Restart interval length.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGLOSSLESSPREDICTORS">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Lossless proc predictor.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGPOINTTRANSFORM">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Lossless point transform.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGQTABLES">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Q matrice offsets.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGDCTABLES">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            DCT table offsets.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGACTABLES">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            AC coefficient offsets.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRCOEFFICIENTS">
            <summary>
            RGB -&gt; YCbCr transform.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRSUBSAMPLING">
            <summary>
            YCbCr subsampling factors.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRPOSITIONING">
            <summary>
            Subsample positioning.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.YCbCrPosition" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REFERENCEBLACKWHITE">
            <summary>
            Colorimetry info.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XMLPACKET">
            <summary>
            XML packet. Introduced post TIFF rev 6.0 by Adobe XMP Specification, January 2004.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OPIIMAGEID">
            <summary>
            OPI ImageID. Introduced post TIFF rev 6.0 by Adobe TIFF technote.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REFPTS">
            <summary>
            Image reference points. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONTACKPOINT">
            <summary>
            Region-xform tack point. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONWARPCORNERS">
            <summary>
            Warp quadrilateral. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONAFFINE">
            <summary>
            Affine transformation matrix. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MATTEING">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Use EXTRASAMPLE tag. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DATATYPE">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Use SAMPLEFORMAT tag. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH">
            <summary>
            Z depth of image. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEDEPTH">
            <summary>
            Z depth/data tile. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_IMAGEFULLWIDTH">
            <summary>
            Full image size in X. This tag is set when an image has been cropped out of a larger
            image. It reflect width of the original uncropped image. The XPOSITION tag can be used
            to determine the position of the smaller image in the larger one.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_IMAGEFULLLENGTH">
            <summary>
            Full image size in Y. This tag is set when an image has been cropped out of a larger
            image. It reflect height of the original uncropped image. The YPOSITION can be used
            to determine the position of the smaller image in the larger one.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_TEXTUREFORMAT">
            <summary>
            Texture map format. Used to identify special image modes and data used by Pixar's
            texture formats. Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_WRAPMODES">
            <summary>
            S&amp;T wrap modes. Used to identify special image modes and data used by Pixar's
            texture formats. Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_FOVCOT">
            <summary>
            Cotan(fov) for env. maps. Used to identify special image modes and data used by
            Pixar's texture formats. Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_MATRIX_WORLDTOSCREEN">
            <summary>
            Used to identify special image modes and data used by Pixar's texture formats.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_MATRIX_WORLDTOCAMERA">
            <summary>
            Used to identify special image modes and data used by Pixar's texture formats.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WRITERSERIALNUMBER">
            <summary>
            Device serial number. Private tag registered to Eastman Kodak.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COPYRIGHT">
            <summary>
            Copyright string. This tag is listed in the TIFF rev. 6.0 w/ unknown ownership.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RICHTIFFIPTC">
            <summary>
            IPTC TAG from RichTIFF specifications.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8SITE">
            <summary>
            Site name. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORSEQUENCE">
            <summary>
            Color seq. [RGB, CMYK, etc]. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8HEADER">
            <summary>
            DDES Header. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8RASTERPADDING">
            <summary>
            Raster scanline padding. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BITSPERRUNLENGTH">
            <summary>
            The number of bits in short run. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BITSPEREXTENDEDRUNLENGTH">
            <summary>
            The number of bits in long run. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORTABLE">
            <summary>
            LW colortable. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8IMAGECOLORINDICATOR">
            <summary>
            BP/BL image color switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BKGCOLORINDICATOR">
            <summary>
            BP/BL bg color switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8IMAGECOLORVALUE">
            <summary>
            BP/BL image color value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BKGCOLORVALUE">
            <summary>
            BP/BL bg color value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8PIXELINTENSITYRANGE">
            <summary>
            MP pixel intensity value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8TRANSPARENCYINDICATOR">
            <summary>
            HC transparency switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORCHARACTERIZATION">
            <summary>
            Color characterization table. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8HCUSAGE">
            <summary>
            HC usage indicator. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8TRAPINDICATOR">
            <summary>
            Trapping indicator (untrapped = 0, trapped = 1). Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8CMYKEQUIVALENT">
            <summary>
            CMYK color equivalents.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FRAMECOUNT">
            <summary>
            Sequence Frame Count. Private tag registered to Texas Instruments.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PHOTOSHOP">
            <summary>
            Private tag registered to Adobe for PhotoShop.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIFIFD">
            <summary>
            Pointer to EXIF private directory. This tag is documented in EXIF specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ICCPROFILE">
            <summary>
            ICC profile data. ?? Private tag registered to Adobe. ??
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JBIGOPTIONS">
            <summary>
            JBIG options. Private tag registered to Pixel Magic.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GPSIFD">
            <summary>
            Pointer to GPS private directory. This tag is documented in EXIF specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXRECVPARAMS">
            <summary>
            Encoded Class 2 ses. params. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXSUBADDRESS">
            <summary>
            Received SubAddr string. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXRECVTIME">
            <summary>
            Receive time (secs). Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXDCS">
            <summary>
            Encoded fax ses. params, Table 2/T.30. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STONITS">
            <summary>
            Sample value to Nits. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FEDEX_EDR">
            <summary>
            Private tag registered to FedEx.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INTEROPERABILITYIFD">
            <summary>
            Pointer to Interoperability private directory.
            This tag is documented in EXIF specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGVERSION">
            <summary>
            DNG version number. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGBACKWARDVERSION">
            <summary>
            DNG compatibility version. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.UNIQUECAMERAMODEL">
            <summary>
            Name for the camera model. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LOCALIZEDCAMERAMODEL">
            <summary>
            Localized camera model name. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CFAPLANECOLOR">
            <summary>
            CFAPattern-&gt;LinearRaw space mapping. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CFALAYOUT">
            <summary>
            Spatial layout of the CFA. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LINEARIZATIONTABLE">
            <summary>
            Lookup table description. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELREPEATDIM">
            <summary>
            Repeat pattern size for the BlackLevel tag. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVEL">
            <summary>
            Zero light encoding level. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELDELTAH">
            <summary>
            Zero light encoding level differences (columns). Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELDELTAV">
            <summary>
            Zero light encoding level differences (rows). Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WHITELEVEL">
            <summary>
            Fully saturated encoding level. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTSCALE">
            <summary>
            Default scale factors. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTCROPORIGIN">
            <summary>
            Origin of the final image area. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTCROPSIZE">
            <summary>
            Size of the final image area. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMATRIX1">
            <summary>
            XYZ-&gt;reference color space transformation matrix 1.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMATRIX2">
            <summary>
            XYZ-&gt;reference color space transformation matrix 2.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERACALIBRATION1">
            <summary>
            Calibration matrix 1. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERACALIBRATION2">
            <summary>
            Calibration matrix 2. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REDUCTIONMATRIX1">
            <summary>
            Dimensionality reduction matrix 1. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REDUCTIONMATRIX2">
            <summary>
            Dimensionality reduction matrix 2. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ANALOGBALANCE">
            <summary>
            Gain applied the stored raw values. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTNEUTRAL">
            <summary>
            Selected white balance in linear reference space.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTWHITEXY">
            <summary>
            Selected white balance in x-y chromaticity coordinates.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINEEXPOSURE">
            <summary>
            How much to move the zero point. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINENOISE">
            <summary>
            Relative noise level. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINESHARPNESS">
            <summary>
            Relative amount of sharpening. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BAYERGREENSPLIT">
            <summary>
            How closely the values of the green pixels in the blue/green rows 
            track the values of the green pixels in the red/green rows.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LINEARRESPONSELIMIT">
            <summary>
            Non-linear encoding range. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERASERIALNUMBER">
            <summary>
            Camera's serial number. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LENSINFO">
            <summary>
            Information about the lens.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CHROMABLURRADIUS">
            <summary>
            Chroma blur radius. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ANTIALIASSTRENGTH">
            <summary>
            Relative strength of the camera's anti-alias filter.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SHADOWSCALE">
            <summary>
            Used by Adobe Camera Raw. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGPRIVATEDATA">
            <summary>
            Manufacturer's private data. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAKERNOTESAFETY">
            <summary>
            Whether the EXIF MakerNote tag is safe to preserve along with the rest of the EXIF data.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CALIBRATIONILLUMINANT1">
            <summary>
            Illuminant 1. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CALIBRATIONILLUMINANT2">
            <summary>
            Illuminant 2. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BESTQUALITYSCALE">
            <summary>
            Best quality multiplier. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RAWDATAUNIQUEID">
            <summary>
            Unique identifier for the raw image data. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIGINALRAWFILENAME">
            <summary>
            File name of the original raw file. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIGINALRAWFILEDATA">
            <summary>
            Contents of the original raw file. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ACTIVEAREA">
            <summary>
            Active (non-masked) pixels of the sensor. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MASKEDAREAS">
            <summary>
            List of coordinates of fully masked pixels. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTICCPROFILE">
            <summary>
            Used to map cameras's color space into ICC profile space.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTPREPROFILEMATRIX">
            <summary>
            Used to map cameras's color space into ICC profile space.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CURRENTICCPROFILE">
            <summary>
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CURRENTPREPROFILEMATRIX">
            <summary>
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSHUESHIFTVALUES">
            <summary>
            Undefined tag used by Eastman Kodak, hue shift correction data.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            Group 3/4 format control.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FaxMode" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGQUALITY">
            <summary>
            [pseudo tag. not written to file]<br />
            Compression quality level. Quality level is on the IJG 0-100 scale. Default value is 75.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGCOLORMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            Auto RGB&lt;=&gt;YCbCr convert.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegColorMode" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGTABLESMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegTablesMode" />.
            Default is <see cref="F:BitMiracle.LibTiff.Classic.JpegTablesMode.QUANT" /> | <see cref="F:BitMiracle.LibTiff.Classic.JpegTablesMode.HUFF" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXFILLFUNC">
            <summary>
            [pseudo tag. not written to file]<br />
            G3/G4 fill function.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXARLOGDATAFMT">
            <summary>
            [pseudo tag. not written to file]<br />
            PixarLogCodec I/O data sz.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSIMAGERTYPE">
            <summary>
            [pseudo tag. not written to file]<br />
            Imager mode &amp; filter.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSINTERPMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            Interpolation mode.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSBALANCEARRAY">
            <summary>
            [pseudo tag. not written to file]<br />
            Color balance values.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCORRECTMATRIX">
            <summary>
            [pseudo tag. not written to file]<br />
            Color correction values.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSGAMMA">
            <summary>
            [pseudo tag. not written to file]<br />
            Gamma value.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSTOESHOULDERPTS">
            <summary>
            [pseudo tag. not written to file]<br />
            Toe &amp; shoulder points.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCALIBRATIONFD">
            <summary>
            [pseudo tag. not written to file]<br />
            Calibration file description.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ZIPQUALITY">
            <summary>
            [pseudo tag. not written to file]<br />
            Compression quality level.
            Quality level is on the ZLIB 1-9 scale. Default value is -1.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXARLOGQUALITY">
            <summary>
            [pseudo tag. not written to file]<br />
            PixarLog uses same scale.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCLIPRECTANGLE">
            <summary>
            [pseudo tag. not written to file]<br />
            Area of image to acquire.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SGILOGDATAFMT">
            <summary>
            [pseudo tag. not written to file]<br />
            SGILog user data format.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SGILOGENCODE">
            <summary>
            [pseudo tag. not written to file]<br />
            SGILog data encoding control.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSURETIME">
            <summary>
            Exposure time.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FNUMBER">
            <summary>
            F number.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREPROGRAM">
            <summary>
            Exposure program.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SPECTRALSENSITIVITY">
            <summary>
            Spectral sensitivity.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_ISOSPEEDRATINGS">
            <summary>
            ISO speed rating.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_OECF">
            <summary>
            Optoelectric conversion factor.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXIFVERSION">
            <summary>
            Exif version.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DATETIMEORIGINAL">
            <summary>
            Date and time of original data generation.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DATETIMEDIGITIZED">
            <summary>
            Date and time of digital data generation.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COMPONENTSCONFIGURATION">
            <summary>
            Meaning of each component.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COMPRESSEDBITSPERPIXEL">
            <summary>
            Image compression mode.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SHUTTERSPEEDVALUE">
            <summary>
            Shutter speed.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_APERTUREVALUE">
            <summary>
            Aperture.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_BRIGHTNESSVALUE">
            <summary>
            Brightness.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREBIASVALUE">
            <summary>
            Exposure bias.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_MAXAPERTUREVALUE">
            <summary>
            Maximum lens aperture.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTDISTANCE">
            <summary>
            Subject distance.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_METERINGMODE">
            <summary>
            Metering mode.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_LIGHTSOURCE">
            <summary>
            Light source.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASH">
            <summary>
            Flash.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALLENGTH">
            <summary>
            Lens focal length.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTAREA">
            <summary>
            Subject area.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_MAKERNOTE">
            <summary>
            Manufacturer notes.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_USERCOMMENT">
            <summary>
            User comments.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIME">
            <summary>
            DateTime subseconds.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIMEORIGINAL">
            <summary>
            DateTimeOriginal subseconds.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIMEDIGITIZED">
            <summary>
            DateTimeDigitized subseconds.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASHPIXVERSION">
            <summary>
            Supported Flashpix version.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COLORSPACE">
            <summary>
            Color space information.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_PIXELXDIMENSION">
            <summary>
            Valid image width.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_PIXELYDIMENSION">
            <summary>
            Valid image height.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_RELATEDSOUNDFILE">
            <summary>
            Related audio file.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASHENERGY">
            <summary>
            Flash energy.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SPATIALFREQUENCYRESPONSE">
            <summary>
            Spatial frequency response.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANEXRESOLUTION">
            <summary>
            Focal plane X resolution.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANEYRESOLUTION">
            <summary>
            Focal plane Y resolution.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANERESOLUTIONUNIT">
            <summary>
            Focal plane resolution unit.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTLOCATION">
            <summary>
            Subject location.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREINDEX">
            <summary>
            Exposure index.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SENSINGMETHOD">
            <summary>
            Sensing method.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FILESOURCE">
            <summary>
            File source.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SCENETYPE">
            <summary>
            Scene type.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CFAPATTERN">
            <summary>
            CFA pattern.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CUSTOMRENDERED">
            <summary>
            Custom image processing.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREMODE">
            <summary>
            Exposure mode.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_WHITEBALANCE">
            <summary>
            White balance.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DIGITALZOOMRATIO">
            <summary>
            Digital zoom ratio.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALLENGTHIN35MMFILM">
            <summary>
            Focal length in 35 mm film.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SCENECAPTURETYPE">
            <summary>
            Scene capture type.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_GAINCONTROL">
            <summary>
            Gain control.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CONTRAST">
            <summary>
            Contrast.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SATURATION">
            <summary>
            Saturation.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SHARPNESS">
            <summary>
            Sharpness.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DEVICESETTINGDESCRIPTION">
            <summary>
            Device settings description.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTDISTANCERANGE">
            <summary>
            Subject distance range.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_IMAGEUNIQUEID">
            <summary>
            Unique image ID.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_MODELPIXELSCALETAG">
            <summary>
            This tag is defining exact affine transformations between raster and model space. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_MODELTIEPOINTTAG">
            <summary>
            This tag stores raster-&gt;model tiepoint pairs. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_MODELTRANSFORMATIONTAG">
            <summary>
            This tag is optionally provided for defining exact affine transformations between raster and model space. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_GEOKEYDIRECTORYTAG">
            <summary>
            This tag may be used to store the GeoKey Directory, which defines and references the "GeoKeys". Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_GEODOUBLEPARAMSTAG">
            <summary>
            This tag is used to store all of the DOUBLE valued GeoKeys, referenced by the GeoKeyDirectoryTag. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_GEOASCIIPARAMSTAG">
            <summary>
            This tag is used to store all of the ASCII valued GeoKeys, referenced by the GeoKeyDirectoryTag. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="T:BitMiracle.LibTiff.Classic.TiffType">
            <summary>
            Tag data type.
            </summary>
            <remarks>Note: RATIONALs are the ratio of two 32-bit integer values.</remarks>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.NOTYPE">
            <summary>
            Placeholder.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.ANY">
            <summary>
            For field descriptor searching.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.BYTE">
            <summary>
            8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.ASCII">
            <summary>
            8-bit bytes with last byte <c>null</c>.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SHORT">
            <summary>
            16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.LONG">
            <summary>
            32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.RATIONAL">
            <summary>
            64-bit unsigned fraction.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SBYTE">
            <summary>
            8-bit signed integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.UNDEFINED">
            <summary>
            8-bit untyped data.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SSHORT">
            <summary>
            16-bit signed integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SLONG">
            <summary>
            32-bit signed integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SRATIONAL">
            <summary>
            64-bit signed fraction.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.FLOAT">
            <summary>
            32-bit IEEE floating point.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.DOUBLE">
            <summary>
            64-bit IEEE floating point.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.IFD">
            <summary>
            32-bit unsigned integer (offset)
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.LONG8">
            <summary>
            BigTIFF 64-bit unsigned long
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SLONG8">
            <summary>
            BigTIFF 64-bit signed long
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.IFD8">
            <summary>
            BigTIFF 64-bit unsigned integer/long (offset)
            </summary>
        </member>
        <member name="T:Ionic.Zip.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.SfxGenerationException">
            <summary>
            Issued when errors occur saving a self-extracting archive.
            </summary>
        </member>
        <member name="M:Ionic.Zip.SfxGenerationException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.SfxGenerationException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.SfxGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile
            which has no filename set, you can get this exception.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.LogicalConjunction">
            <summary>
            Enumerates the options for a logical conjunction. This enum is intended for use
            internally by the FileSelector class.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeType">
            <summary>
            Represents the type of a node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Document">
            <summary>
            The root of a document.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Element">
            <summary>
            An HTML element.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Comment">
            <summary>
            An HTML comment.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Text">
            <summary>
            A text node is always the child of an element or a document node.
            </summary>
        </member>
        <member name="T:IronSoftware.Licenses.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IronSoftware.Licenses.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IronSoftware.Licenses.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IronSoftware.Licenses.Properties.Resources.Configs">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1">
            <summary>Provides the core logic for implementing a manual-reset <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> or <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</summary>
            <typeparam name="TResult" />
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuation">
            <summary>
            The callback to invoke when the operation completes if <see cref="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)" /> was called before the operation completed,
            or <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCoreShared.s_sentinel" /> if the operation completed before a callback was supplied,
            or null if a callback hasn't yet been provided and the operation hasn't yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuationState">
            <summary>State to pass to <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuation" />.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._executionContext">
            <summary>
                <see cref="T:System.Threading.ExecutionContext" /> to flow to the callback, or null if no flowing is required.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._capturedContext">
            <summary>
            A "captured" <see cref="T:System.Threading.SynchronizationContext" /> or <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to invoke the callback,
            or null if no special context is required.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._completed">
            <summary>Whether the current operation has completed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._result">
            <summary>The result with which the operation succeeded, or the default value if it hasn't yet completed or failed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._error">
            <summary>The exception with which the operation failed, or null if it hasn't yet completed or completed successfully.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._version">
            <summary>The current version of this value, used to help prevent misuse.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.RunContinuationsAsynchronously">
            <summary>Gets or sets whether to force continuations to run asynchronously.</summary>
            <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Reset">
            <summary>Resets to prepare for the next operation.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetResult(`0)">
            <summary>Completes with a successful result.</summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetException(System.Exception)">
            <summary>Complets with an error.</summary>
            <param name="error" />
        </member>
        <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Version">
            <summary>Gets the operation version.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetStatus(System.Int16)">
            <summary>Gets the status of the operation.</summary>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" />'s constructor.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetResult(System.Int16)">
            <summary>Gets the result of the operation.</summary>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" />'s constructor.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
            <summary>Schedules the continuation action for this operation.</summary>
            <param name="continuation">The continuation to invoke when the operation has completed.</param>
            <param name="state">The state object to pass to <paramref name="continuation" /> when it's invoked.</param>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" />'s constructor.</param>
            <param name="flags">The flags describing the behavior of the continuation.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.ValidateToken(System.Int16)">
            <summary>Ensures that the specified token matches the current version.</summary>
            <param name="token">The token supplied by <see cref="T:System.Threading.Tasks.ValueTask" />.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SignalCompletion">
            <summary>Signals that the operation has completed.  Invoked after the result or error has been set.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.InvokeContinuation">
            <summary>
            Invokes the continuation with the appropriate captured context / scheduler.
            This assumes that if <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._executionContext" /> is not null we're already
            running within that <see cref="T:System.Threading.ExecutionContext" />.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
            <summary>Provides a set of static methods for configuring <see cref="T:System.Threading.Tasks.Task" />-related behaviors on asynchronous enumerables and disposables.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async disposable will be performed.</summary>
            <param name="source">The source async disposable.</param>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured async disposable.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async iteration will be performed.</summary>
            <typeparam name="T">The type of the objects being iterated.</typeparam>
            <param name="source">The source enumerable being iterated.</param>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured enumerable.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>Sets the <see cref="T:System.Threading.CancellationToken" /> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> when iterating.</summary>
            <typeparam name="T">The type of the objects being iterated.</typeparam>
            <param name="source">The source enumerable being iterated.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
            <returns>The configured enumerable.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
            <summary>Represents a builder for asynchronous iterators.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
            <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" /> struct.</summary>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
            <summary>Invokes <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" /> on the state machine while guarding the <see cref="T:System.Threading.ExecutionContext" />.</summary>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
            <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.ObjectIdForDebugger">
            <summary>Gets an object that may be used to uniquely identify this builder to the debugger.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute">
            <summary>Indicates whether a method is an asynchronous iterator.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute" /> class.</summary>
            <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
            <summary>Provides a type that can be used to configure how awaits on an <see cref="T:System.IAsyncDisposable" /> are performed.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
            <summary>Provides an awaitable async enumerable that enables cancelable iteration and configured awaits.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async iteration will be performed.</summary>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured enumerable.</returns>
            <remarks>This will replace any previous value set by <see cref="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)" /> for this iteration.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
            <summary>Sets the <see cref="T:System.Threading.CancellationToken" /> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> when iterating.</summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
            <returns>The configured enumerable.</returns>
            <remarks>This will replace any previous <see cref="T:System.Threading.CancellationToken" /> set by <see cref="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)" /> for this iteration.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
            <summary>Provides an awaitable async enumerator that enables cancelable iteration and configured awaits.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
            <summary>Advances the enumerator asynchronously to the next element of the collection.</summary>
            <returns>
            A <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> that will complete with a result of <c>true</c>
            if the enumerator was successfully advanced to the next element, or <c>false</c> if the enumerator has
            passed the end of the collection.
            </returns>
        </member>
        <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources asynchronously.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.IAsyncEnumerable`1">
            <summary>Exposes an enumerator that provides asynchronous iteration over values of a specified type.</summary>
            <typeparam name="T">The type of values to enumerate.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
            <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
            <summary>Supports a simple asynchronous iteration over a generic collection.</summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
            <summary>Advances the enumerator asynchronously to the next element of the collection.</summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that will complete with a result of <c>true</c> if the enumerator
            was successfully advanced to the next element, or <c>false</c> if the enumerator has passed the end
            of the collection.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="T:System.IAsyncDisposable">
            <summary>Provides a mechanism for releasing unmanaged resources asynchronously.</summary>
        </member>
        <member name="M:System.IAsyncDisposable.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources asynchronously.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationExtensions">
            <summary>
            Extension methods for configuration classes./&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Add``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{``0})">
            <summary>
            Adds a new configuration source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="configureSource">Configures the source secrets.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Shorthand for GetSection("ConnectionStrings")[name].
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="name">The connection string key.</param>
            <returns>The connection string.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Get the enumeration of key value pairs within the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /></summary>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to enumerate.</param>
            <returns>An enumeration of key value pairs.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            Get the enumeration of key value pairs within the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /></summary>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to enumerate.</param>
            <param name="makePathsRelative">If true, the child keys returned will have the current configuration's Path trimmed from the front.</param>
            <returns>An enumeration of key value pairs.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Determines whether the section has a <see cref="P:Microsoft.Extensions.Configuration.IConfigurationSection.Value" /> or has children
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetRequiredSection(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Gets a configuration sub-section with the specified key.
            </summary>
            <param name="configuration" />
            <param name="key">The key of the configuration section.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" />.</returns>
            <remarks>
                If no matching sub-section is found with the specified key, an exception is raised.
            </remarks>
            <exception cref="T:System.InvalidOperationException">There is no section with key <paramref name="key" />.</exception>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationPath">
            <summary>
            Utility methods and constants for manipulating Configuration paths
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter">
            <summary>
            The delimiter ":" used to separate individual keys in a path.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])">
            <summary>
            Combines path segments into one path.
            </summary>
            <param name="pathSegments">The path segments to combine.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines path segments into one path.
            </summary>
            <param name="pathSegments">The path segments to combine.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)">
            <summary>
            Extracts the last path segment from the path.
            </summary>
            <param name="path">The path.</param>
            <returns>The last path segment of the path.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)">
            <summary>
            Extracts the path corresponding to the parent node for a given path.
            </summary>
            <param name="path">The path.</param>
            <returns>The original path minus the last individual segment found in it. Null if the original path corresponds to a top level node.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationRootExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationRootExtensions.GetDebugView(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Generates a human-readable view of the configuration showing where each value came from.
            </summary>
            <returns> The debug view. </returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfiguration">
            <summary>
            Represents a set of key/value application configuration properties.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.IConfiguration.Item(System.String)">
            <summary>
            Gets or sets a configuration value.
            </summary>
            <param name="key">The configuration key.</param>
            <returns>The configuration value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfiguration.GetSection(System.String)">
            <summary>
            Gets a configuration sub-section with the specified key.
            </summary>
            <param name="key">The key of the configuration section.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" />.</returns>
            <remarks>
                This method will never return <c>null</c>. If no matching sub-section is found with the specified key,
                an empty <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfiguration.GetChildren">
            <summary>
            Gets the immediate descendant configuration sub-sections.
            </summary>
            <returns>The configuration sub-sections.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken">
            <summary>
            Returns a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that can be used to observe when this configuration is reloaded.
            </summary>
            <returns>A <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationBuilder">
            <summary>
            Represents a type used to build application configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties">
            <summary>
            Gets a key/value collection that can be used to share data between the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
            and the registered <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />s.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources">
            <summary>
            Gets the sources used to obtain configuration values
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilder.Add(Microsoft.Extensions.Configuration.IConfigurationSource)">
            <summary>
            Adds a new configuration source.
            </summary>
            <param name="source">The configuration source to add.</param>
            <returns>The same <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilder.Build">
            <summary>
            Builds an <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> with keys and values from the set of sources registered in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources" />.
            </summary>
            <returns>An <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" /> with keys and values from the registered sources.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationProvider">
            <summary>
            Provides configuration key/values for an application.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet(System.String,System.String@)">
            <summary>
            Tries to get a configuration value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>True</c> if a value for the specified key was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)">
            <summary>
            Sets a configuration value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken">
            <summary>
            Returns a change token if this provider supports change tracking, null otherwise.
            </summary>
            <returns>The change token.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationProvider.Load">
            <summary>
            Loads configuration values from the source represented by this <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns the immediate descendant configuration keys for a given parent path based on this
            <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s data and the set of keys returned by all the preceding
            <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s.
            </summary>
            <param name="earlierKeys">The child keys returned by the preceding providers for the same parent path.</param>
            <param name="parentPath">The parent path.</param>
            <returns>The child keys.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationRoot">
            <summary>
            Represents the root of an <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationRoot.Reload">
            <summary>
            Force the configuration values to be reloaded from the underlying <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.IConfigurationRoot.Providers">
            <summary>
            The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s for this configuration.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationSection">
            <summary>
            Represents a section of application configuration values.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.IConfigurationSection.Key">
            <summary>
            Gets the key this section occupies in its parent.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.IConfigurationSection.Path">
            <summary>
            Gets the full path to this section within the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.IConfigurationSection.Value">
            <summary>
            Gets or sets the section value.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationSource">
            <summary>
            Represents a source of configuration key/values for an application.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /></returns>
        </member>
        <member name="P:System.SR.InvalidSectionName">
            <summary>Section '{0}' not found in configuration.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.BinderOptions">
            <summary>
            Options class used by the <see cref="T:Microsoft.Extensions.Configuration.ConfigurationBinder" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.BinderOptions.BindNonPublicProperties">
            <summary>
            When false (the default), the binder will only attempt to set public properties.
            If true, the binder will attempt to set all non read-only properties.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.BinderOptions.ErrorOnUnknownConfiguration">
            <summary>
            When false (the default), no exceptions are thrown when a configuration key is found for which the
            provided model object does not have an appropriate property which matches the key's name.
            When true, an <see cref="T:System.InvalidOperationException" /> is thrown with a description
            of the missing properties.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationBinder">
            <summary>
            Static helper class that allows binding strongly typed objects to configuration values.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get``1(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            </summary>
            <typeparam name="T">The type of the new instance to bind.</typeparam>
            <param name="configuration">The configuration instance to bind.</param>
            <returns>The new instance of T if successful, default(T) otherwise.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get``1(Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            </summary>
            <typeparam name="T">The type of the new instance to bind.</typeparam>
            <param name="configuration">The configuration instance to bind.</param>
            <param name="configureOptions">Configures the binder options.</param>
            <returns>The new instance of T if successful, default(T) otherwise.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get(Microsoft.Extensions.Configuration.IConfiguration,System.Type)">
            <summary>
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            </summary>
            <param name="configuration">The configuration instance to bind.</param>
            <param name="type">The type of the new instance to bind.</param>
            <returns>The new instance if successful, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            </summary>
            <param name="configuration">The configuration instance to bind.</param>
            <param name="type">The type of the new instance to bind.</param>
            <param name="configureOptions">Configures the binder options.</param>
            <returns>The new instance if successful, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Object)">
            <summary>
            Attempts to bind the given object instance to the configuration section specified by the key by matching property names against configuration keys recursively.
            </summary>
            <param name="configuration">The configuration instance to bind.</param>
            <param name="key">The key of the configuration section to bind.</param>
            <param name="instance">The object to bind.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.Object)">
            <summary>
            Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.
            </summary>
            <param name="configuration">The configuration instance to bind.</param>
            <param name="instance">The object to bind.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.Object,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.
            </summary>
            <param name="configuration">The configuration instance to bind.</param>
            <param name="instance">The object to bind.</param>
            <param name="configureOptions">Configures the binder options.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Extracts the value with the specified key and converts it to type T.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="key">The key of the configuration section's value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)">
            <summary>
            Extracts the value with the specified key and converts it to type T.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="key">The key of the configuration section's value to convert.</param>
            <param name="defaultValue">The default value to use if no value is found.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)">
            <summary>
            Extracts the value with the specified key and converts it to the specified type.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="type">The type to convert the value to.</param>
            <param name="key">The key of the configuration section's value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.Object)">
            <summary>
            Extracts the value with the specified key and converts it to the specified type.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="type">The type to convert the value to.</param>
            <param name="key">The key of the configuration section's value to convert.</param>
            <param name="defaultValue">The default value to use if no value is found.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
            <summary>
             Indicates that certain members on a specified <see cref="T:System.Type" /> are accessed dynamically,
             for example through <see cref="N:System.Reflection" />.
             </summary>
            <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type" /> or <see cref="T:System.String" />.
            
             When this attribute is applied to a location of type <see cref="T:System.String" />, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type" /> instances returned from calling
             <see cref="M:System.Object.GetType" /> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute" /> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" /> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
            <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection" />.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requries unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="P:System.SR.Error_CannotActivateAbstractOrInterface">
            <summary>Cannot create instance of type '{0}' because it is either abstract or an interface.</summary>
        </member>
        <member name="P:System.SR.Error_FailedBinding">
            <summary>Failed to convert configuration value at '{0}' to type '{1}'.</summary>
        </member>
        <member name="P:System.SR.Error_FailedToActivate">
            <summary>Failed to create instance of type '{0}'.</summary>
        </member>
        <member name="P:System.SR.Error_MissingConfig">
            <summary>'{0}' was set on the provided {1}, but the following properties were not found on the instance of {2}: {3}</summary>
        </member>
        <member name="P:System.SR.Error_MissingParameterlessConstructor">
            <summary>Cannot create instance of type '{0}' because it is missing a public parameterless constructor.</summary>
        </member>
        <member name="P:System.SR.Error_UnsupportedMultidimensionalArray">
            <summary>Cannot create instance of type '{0}' because multidimensional arrays are not supported.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ChainedBuilderExtensions">
            <summary>
            Extension methods for adding <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedBuilderExtensions.AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds an existing configuration to <paramref name="configurationBuilder" />.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="config">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to add.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedBuilderExtensions.AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            Adds an existing configuration to <paramref name="configurationBuilder" />.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="config">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to add.</param>
            <param name="shouldDisposeConfiguration">Whether the configuration should get disposed when the configuration provider is disposed.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ChainedConfigurationProvider">
            <summary>
            Chained implementation of <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /></summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.ChainedConfigurationSource)">
            <summary>
            Initialize a new instance from the source configuration.
            </summary>
            <param name="source">The source configuration.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.TryGet(System.String,System.String@)">
            <summary>
            Tries to get a configuration value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                <c>True</c> if a value for the specified key was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.Set(System.String,System.String)">
            <summary>
            Sets a configuration value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.GetReloadToken">
            <summary>
            Returns a change token if this provider supports change tracking, null otherwise.
            </summary>
            <returns>The change token.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.Load">
            <summary>
            Loads configuration values from the source represented by this <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns the immediate descendant configuration keys for a given parent path based on this
            <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s data and the set of keys returned by all the preceding
            <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s.
            </summary>
            <param name="earlierKeys">The child keys returned by the preceding providers for the same parent path.</param>
            <param name="parentPath">The parent path.</param>
            <returns>The child keys.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ChainedConfigurationSource">
            <summary>
            Represents a chained <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ChainedConfigurationSource.Configuration">
            <summary>
            The chained configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ChainedConfigurationSource.ShouldDisposeConfiguration">
            <summary>
            Whether the chained configuration should be disposed when the
            configuration provider gets disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ChainedConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.ChainedConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.ChainedConfigurationProvider" /></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationBuilder">
            <summary>
            Used to build key/value based configuration settings for use in an application.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources">
            <summary>
            Returns the sources used to obtain configuration values.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties">
            <summary>
            Gets a key/value collection that can be used to share data between the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
            and the registered <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBuilder.Add(Microsoft.Extensions.Configuration.IConfigurationSource)">
            <summary>
            Adds a new configuration source.
            </summary>
            <param name="source">The configuration source to add.</param>
            <returns>The same <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationBuilder.Build">
            <summary>
            Builds an <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> with keys and values from the set of providers registered in
            <see cref="P:Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources" />.
            </summary>
            <returns>An <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" /> with keys and values from the registered providers.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationKeyComparer">
            <summary>
            IComparer implementation used to order configuration keys.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationKeyComparer.Instance">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationKeyComparer.Comparison">
            <summary>A comparer delegate with the default instance.</summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationKeyComparer.Compare(System.String,System.String)">
            <summary>
            Compares two strings.
            </summary>
            <param name="x">First string.</param>
            <param name="y">Second string.</param>
            <returns>Less than 0 if x is less than y, 0 if x is equal to y and greater than 0 if x is greater than y.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationManager">
            <summary>
            Configuration is mutable configuration object. It is both an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> and an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" />.
            As sources are added, it updates its current view of configuration. Once Build is called, configuration is frozen.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationManager.#ctor">
            <summary>
            Creates an empty mutable configuration object that is both an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> and an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationManager.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationManager.GetSection(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationManager.GetChildren">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationProvider">
            <summary>
            Base helper class for implementing an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /></summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.#ctor">
            <summary>
            Initializes a new <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /></summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationProvider.Data">
            <summary>
            The configuration key value pairs for this provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet(System.String,System.String@)">
            <summary>
            Attempts to find a value with the given key, returns true if one is found, false otherwise.
            </summary>
            <param name="key">The key to lookup.</param>
            <param name="value">The value found at key if one is found.</param>
            <returns>True if key has a value, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.Set(System.String,System.String)">
            <summary>
            Sets a value for a given key.
            </summary>
            <param name="key">The configuration key to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.Load">
            <summary>
            Loads (or reloads) the data for this provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns the list of keys that this provider has.
            </summary>
            <param name="earlierKeys">The earlier keys that other providers contain.</param>
            <param name="parentPath">The path for the parent IConfiguration.</param>
            <returns>The list of keys for this provider.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken">
            <summary>
            Returns a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that can be used to listen when this provider is reloaded.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload">
            <summary>
            Triggers the reload change token and creates a new one.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationProvider.ToString">
            <summary>
            Generates a string representing this provider name and relevant details.
            </summary>
            <returns> The configuration name. </returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationReloadToken">
            <summary>
            Implements <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /></summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationReloadToken.ActiveChangeCallbacks">
            <summary>
            Indicates if this token will proactively raise callbacks. Callbacks are still guaranteed to be invoked, eventually.
            </summary>
            <returns>True if the token will proactively raise callbacks.</returns>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationReloadToken.HasChanged">
            <summary>
            Gets a value that indicates if a change has occurred.
            </summary>
            <returns>True if a change has occurred.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationReloadToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <summary>
            Registers for a callback that will be invoked when the entry has changed. <see cref="P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged" />
            MUST be set before the callback is invoked.
            </summary>
            <param name="callback">The callback to invoke.</param>
            <param name="state">State to be passed into the callback.</param>
            <returns>The <see cref="T:System.Threading.CancellationToken" /> registration.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationReloadToken.OnReload">
            <summary>
            Used to trigger the change token when a reload occurs.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationRoot">
            <summary>
            The root node for a configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Configuration.IConfigurationProvider})">
            <summary>
            Initializes a Configuration root with a list of providers.
            </summary>
            <param name="providers">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s for this configuration.</param>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationRoot.Providers">
            <summary>
            The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s for this configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationRoot.Item(System.String)">
            <summary>
            Gets or sets the value corresponding to a configuration key.
            </summary>
            <param name="key">The configuration key.</param>
            <returns>The configuration value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren">
            <summary>
            Gets the immediate children sub-sections.
            </summary>
            <returns>The children.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken">
            <summary>
            Returns a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that can be used to observe when this configuration is reloaded.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection(System.String)">
            <summary>
            Gets a configuration sub-section with the specified key.
            </summary>
            <param name="key">The key of the configuration section.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" />.</returns>
            <remarks>
                This method will never return <c>null</c>. If no matching sub-section is found with the specified key,
                an empty <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationRoot.Reload">
            <summary>
            Force the configuration values to be reloaded from the underlying sources.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationRoot.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationSection">
            <summary>
            Represents a section of application configuration values.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationSection.#ctor(Microsoft.Extensions.Configuration.IConfigurationRoot,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="root">The configuration root.</param>
            <param name="path">The path to this section.</param>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationSection.Path">
            <summary>
            Gets the full path to this section from the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationSection.Key">
            <summary>
            Gets the key this section occupies in its parent.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationSection.Value">
            <summary>
            Gets or sets the section value.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationSection.Item(System.String)">
            <summary>
            Gets or sets the value corresponding to a configuration key.
            </summary>
            <param name="key">The configuration key.</param>
            <returns>The configuration value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationSection.GetSection(System.String)">
            <summary>
            Gets a configuration sub-section with the specified key.
            </summary>
            <param name="key">The key of the configuration section.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" />.</returns>
            <remarks>
                This method will never return <c>null</c>. If no matching sub-section is found with the specified key,
                an empty <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection" /> will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren">
            <summary>
            Gets the immediate descendant configuration sub-sections.
            </summary>
            <returns>The configuration sub-sections.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken">
            <summary>
            Returns a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that can be used to observe when this configuration is reloaded.
            </summary>
            <returns>The <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.InternalConfigurationRootExtensions">
            <summary>
            Extensions method for <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" /></summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.InternalConfigurationRootExtensions.GetChildrenImplementation(Microsoft.Extensions.Configuration.IConfigurationRoot,System.String)">
            <summary>
            Gets the immediate children sub-sections of configuration root based on key.
            </summary>
            <param name="root">Configuration from which to retrieve sub-sections.</param>
            <param name="path">Key of a section of which children to retrieve.</param>
            <returns>Immediate children sub-sections of section specified by key.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions">
            <summary>
            IConfigurationBuilder extension methods for the MemoryConfigurationProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Adds the memory configuration provider to <paramref name="configurationBuilder" />.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds the memory configuration provider to <paramref name="configurationBuilder" />.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="initialData">The data to add to memory configuration provider.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider">
            <summary>
            In-memory implementation of <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /></summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource)">
            <summary>
            Initialize a new instance from the source.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider.Add(System.String,System.String)">
            <summary>
            Add a new key and value pair.
            </summary>
            <param name="key">The configuration key.</param>
            <param name="value">The configuration value.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource">
            <summary>
            Represents in-memory data as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource.InitialData">
            <summary>
            The initial key value configuration pairs.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider" /></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.StreamConfigurationProvider">
            <summary>
            Stream based configuration provider
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.StreamConfigurationProvider.Source">
            <summary>
            The source settings for this provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.StreamConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.StreamConfigurationSource)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.StreamConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Load the configuration data from the stream.
            </summary>
            <param name="stream">The data stream.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.StreamConfigurationProvider.Load">
            <summary>
            Load the configuration data from the stream. Will throw after the first call.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.StreamConfigurationSource">
            <summary>
            Stream based <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.StreamConfigurationSource.Stream">
            <summary>
            The stream containing the configuration data.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.StreamConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.StreamConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /></returns>
        </member>
        <member name="P:System.SR.Error_NoSources">
            <summary>A configuration source is not registered. Please register one before setting a value.</summary>
        </member>
        <member name="P:System.SR.InvalidNullArgument">
            <summary>Null is not a valid value for '{0}'.</summary>
        </member>
        <member name="P:System.SR.StreamConfigurationProvidersAlreadyLoaded">
            <summary>StreamConfigurationProviders cannot be loaded more than once.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider">
            <summary>
            An environment variable based <see cref="T:Microsoft.Extensions.Configuration.ConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified prefix.
            </summary>
            <param name="prefix">A prefix used to filter the environment variables.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.Load">
            <summary>
            Loads the environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.ToString">
            <summary>
            Generates a string representing this provider name and relevant details.
            </summary>
            <returns> The configuration name. </returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource">
            <summary>
            Represents environment variables as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.Prefix">
            <summary>
            A prefix used to filter environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider" /></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions">
            <summary>
            Extension methods for registering <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider" /> with <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from environment variables.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from environment variables
            with a specified prefix.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="prefix">The prefix that environment variable names must start with. The prefix will be removed from the environment variable names.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource})">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from environment variables.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="configureSource">Configures the source.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.FileConfigurationExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.Configuration.FileConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetFileProvider(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider)">
            <summary>
            Sets the default <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to be used for file-based providers.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="fileProvider">The default file provider instance.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.GetFileProvider(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Gets the default <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to be used for file-based providers.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>The default <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetBasePath(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Sets the FileProvider for file-based providers to a PhysicalFileProvider with the base path.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="basePath">The absolute path of file-based providers.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetFileLoadExceptionHandler(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.FileLoadExceptionContext})">
            <summary>
            Sets a default action to be invoked for file-based providers when an error occurs.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="handler">The Action to be invoked on a file load exception.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.GetFileLoadExceptionHandler(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Gets the default <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to be used for file-based providers.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.FileConfigurationProvider">
            <summary>
            Base class for file based <see cref="T:Microsoft.Extensions.Configuration.ConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.FileConfigurationSource)">
            <summary>
            Initializes a new instance with the specified source.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileConfigurationProvider.Source">
            <summary>
            The source settings for this provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationProvider.ToString">
            <summary>
            Generates a string representing this provider name and relevant details.
            </summary>
            <returns> The configuration name. </returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationProvider.Load">
            <summary>
            Loads the contents of the file at <see cref="T:System.IO.Path" />.
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">If Optional is <c>false</c> on the source and part of a file or
            or directory cannot be found at the specified Path.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If Optional is <c>false</c> on the source and a
            file does not exist at specified Path.</exception>
            <exception cref="T:System.IO.InvalidDataException">Wrapping any exception thrown by the concrete implementation of the
            <see cref="M:Microsoft.Extensions.Configuration.FileConfigurationProvider.Load" /> method. Use the source <see cref="P:Microsoft.Extensions.Configuration.FileConfigurationSource.OnLoadException" /> callback
            if you need more control over the exception.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Loads this provider's data from a stream.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationProvider.Dispose(System.Boolean)">
            <summary>
            Dispose the provider.
            </summary>
            <param name="disposing">
                <c>true</c> if invoked from <see cref="M:System.IDisposable.Dispose" />.</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.FileConfigurationSource">
            <summary>
            Represents a base class for file based <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileConfigurationSource.FileProvider">
            <summary>
            Used to access the contents of the file.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileConfigurationSource.Path">
            <summary>
            The path to the file.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileConfigurationSource.Optional">
            <summary>
            Determines if loading the file is optional.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileConfigurationSource.ReloadOnChange">
            <summary>
            Determines whether the source will be loaded if the underlying file changes.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileConfigurationSource.ReloadDelay">
            <summary>
            Number of milliseconds that reload will wait before calling Load.  This helps
            avoid triggering reload before a file is completely written. Default is 250.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileConfigurationSource.OnLoadException">
            <summary>
            Will be called if an uncaught exception occurs in FileConfigurationProvider.Load.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationSource.EnsureDefaults(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Called to use any default settings on the builder like the FileProvider or FileLoadExceptionHandler.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.FileConfigurationSource.ResolveFileProvider">
            <summary>
            If no file provider has been set, for absolute Path, this will creates a physical file provider
            for the nearest existing directory.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.FileLoadExceptionContext">
            <summary>
            Contains information about a file load exception.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileLoadExceptionContext.Provider">
            <summary>
            The <see cref="T:Microsoft.Extensions.Configuration.FileConfigurationProvider" /> that caused the exception.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileLoadExceptionContext.Exception">
            <summary>
            The exception that occurred in Load.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.FileLoadExceptionContext.Ignore">
            <summary>
            If true, the exception will not be rethrown.
            </summary>
        </member>
        <member name="P:System.SR.Error_ExpectedPhysicalPath">
            <summary>The expected physical path was '{0}'.</summary>
        </member>
        <member name="P:System.SR.Error_FileNotFound">
            <summary>The configuration file '{0}' was not found and is not optional.</summary>
        </member>
        <member name="P:System.SR.Error_FailedToLoad">
            <summary>Failed to load configuration from file '{0}'.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.JsonConfigurationExtensions">
            <summary>
            Extension methods for adding <see cref="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
            <param name="optional">Whether the file is optional.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
            <param name="optional">Whether the file is optional.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a JSON configuration source to <paramref name="builder" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="provider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to use to access the file.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
            <param name="optional">Whether the file is optional.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Json.JsonConfigurationSource})">
            <summary>
            Adds a JSON configuration source to <paramref name="builder" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="configureSource">Configures the source.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonStream(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.IO.Stream)">
            <summary>
            Adds a JSON configuration source to <paramref name="builder" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to read the json configuration data from.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider">
            <summary>
            A JSON file based <see cref="T:Microsoft.Extensions.Configuration.FileConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Json.JsonConfigurationSource)">
            <summary>
            Initializes a new instance with the specified source.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Loads the JSON data from a stream.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationSource">
            <summary>
            Represents a JSON file as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider" /></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationProvider">
            <summary>
            Loads configuration key/values from a json stream into a provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationSource)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The <see cref="T:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationSource" />.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Loads json configuration key/values from a stream into a provider.
            </summary>
            <param name="stream">The json <see cref="T:System.IO.Stream" /> to load configuration data from.</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationSource">
            <summary>
            Represents a JSON file as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Configuration.Json.JsonStreamConfigurationProvider" /></returns>
        </member>
        <member name="P:System.SR.Error_InvalidFilePath">
            <summary>File path must be a non-empty string.</summary>
        </member>
        <member name="P:System.SR.Error_InvalidTopLevelJSONElement">
            <summary>Top-level JSON element must be an object. Instead, '{0}' was found.</summary>
        </member>
        <member name="P:System.SR.Error_JSONParseError">
            <summary>Could not parse the JSON file.</summary>
        </member>
        <member name="P:System.SR.Error_KeyIsDuplicated">
            <summary>A duplicate key '{0}' was found.</summary>
        </member>
        <member name="P:System.SR.Error_UnsupportedJSONToken">
            <summary>Unsupported JSON token '{0}' was found.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.UserSecrets.PathHelper">
            <summary>
            Provides paths for user secrets configuration files.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecrets.PathHelper.GetSecretsPathFromSecretsId(System.String)">
            <summary>
                <para>
            Returns the path to the JSON file that stores user secrets.
            </para>
                <para>
            This uses the current user profile to locate the secrets file on disk in a location outside of source control.
            </para>
            </summary>
            <param name="userSecretsId">The user secret ID.</param>
            <returns>The full path to the secret file.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute">
            <summary>
                <para>
            Represents the user secrets ID.
            </para>
                <para>
            In most cases, this attribute is automatically generated during compilation by MSBuild targets
            included in the UserSecrets NuGet package. These targets use the MSBuild property 'UserSecretsId'
            to set the value for <see cref="P:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute.UserSecretsId" />.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.
            </summary>
            <param name="userSecretId">The user secrets ID.</param>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute.UserSecretsId">
            <summary>
            The user secrets ID.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions">
            <summary>
            Configuration extensions for adding user secrets configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
                <para>
            Adds the user secrets configuration source. Searches the assembly that contains type <typeparamref name="T" />
            for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <typeparam name="T">The type from the assembly to search for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when the assembly containing <typeparamref name="T" /> does not have <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</exception>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Boolean)">
            <summary>
                <para>
            Adds the user secrets configuration source. Searches the assembly that contains type <typeparamref name="T" />
            for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <param name="optional">Whether loading secrets is optional. When false, this method may throw.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="optional" /> is false and the assembly containing <typeparamref name="T" /> does not have a valid <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</exception>
            <typeparam name="T">The type from the assembly to search for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</typeparam>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Boolean,System.Boolean)">
            <summary>
                <para>
            Adds the user secrets configuration source. Searches the assembly that contains type <typeparamref name="T" />
            for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <param name="optional">Whether loading secrets is optional. When false, this method may throw.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="optional" /> is false and the assembly containing <typeparamref name="T" /> does not have a valid <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</exception>
            <typeparam name="T">The type from the assembly to search for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</typeparam>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly)">
            <summary>
                <para>
            Adds the user secrets configuration source. This searches <paramref name="assembly" /> for an instance
            of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <param name="assembly">The assembly with the <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="assembly" /> does not have a valid <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" /></exception>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly,System.Boolean)">
            <summary>
                <para>
            Adds the user secrets configuration source. This searches <paramref name="assembly" /> for an instance
            of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <param name="assembly">The assembly with the <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</param>
            <param name="optional">Whether loading secrets is optional. When false, this method may throw.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="optional" /> is false and <paramref name="assembly" /> does not have a valid <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</exception>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
                <para>
            Adds the user secrets configuration source. This searches <paramref name="assembly" /> for an instance
            of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <param name="assembly">The assembly with the <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</param>
            <param name="optional">Whether loading secrets is optional. When false, this method may throw.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="optional" /> is false and <paramref name="assembly" /> does not have a valid <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</exception>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
                <para>
            Adds the user secrets configuration source with specified user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <param name="userSecretsId">The user secrets ID.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)">
            <summary>
                <para>
            Adds the user secrets configuration source with specified user secrets ID.
            </para>
                <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
            </summary>
            <param name="configuration">The configuration builder.</param>
            <param name="userSecretsId">The user secrets ID.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="P:System.SR.Common_StringNullOrEmpty">
            <summary>Value cannot be null or an empty string.</summary>
        </member>
        <member name="P:System.SR.Error_Invalid_Character_In_UserSecrets_Id">
            <summary>Invalid character '{0}' found in the user secrets ID at index '{1}'.</summary>
        </member>
        <member name="P:System.SR.Error_Missing_UserSecretsIdAttribute">
            <summary>Could not find 'UserSecretsIdAttribute' on assembly '{0}'.
            Check that the project for '{0}' has set the 'UserSecretsId' build property.
            If the 'UserSecretsId' property is already set then add a reference to the Microsoft.Extensions.Configuration.UserSecret ...</summary>
        </member>
        <member name="P:System.SR.Error_Missing_UserSecretsLocation">
            <summary>Could not determine an appropriate location for storing user secrets. Set the {0} environment variable to a folder where user secrets should be stored.</summary>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.IDirectoryContents">
            <summary>
            Represents a directory's content in the file provider.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IDirectoryContents.Exists">
            <summary>
            True if a directory was located at the given path.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.IFileInfo">
            <summary>
            Represents a file in the given file provider.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists">
            <summary>
            True if resource exists in the underlying storage system.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.Length">
            <summary>
            The length of the file in bytes, or -1 for a directory or non-existing files.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath">
            <summary>
            The path to the file, including the file name. Return null if the file is not directly accessible.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.Name">
            <summary>
            The name of the file or directory, not including any path.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.LastModified">
            <summary>
            When the file was last modified
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory">
            <summary>
            True for the case TryGetDirectoryContents has enumerated a sub-directory
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream">
            <summary>
            Return file contents as readonly stream. Caller should dispose stream when complete.
            </summary>
            <returns>The file stream</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.IFileProvider">
            <summary>
            A read-only file provider abstraction.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)">
            <summary>
            Locate a file at the given path.
            </summary>
            <param name="subpath">Relative path that identifies the file.</param>
            <returns>The file information. Caller must check Exists property.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a directory at the given path, if any.
            </summary>
            <param name="subpath">Relative path that identifies the directory.</param>
            <returns>Returns the contents of the directory.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for the specified <paramref name="filter" />.
            </summary>
            <param name="filter">Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*, subFolder/**/*.cshtml.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that is notified when a file matching <paramref name="filter" /> is added, modified or deleted.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents">
            <summary>
            Represents a non-existing directory
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Singleton">
            <summary>
            A shared instance of <see cref="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents" /></summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator to an empty collection.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NotFoundFileInfo">
            <summary>
            Represents a non-existing file.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundFileInfo.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.NotFoundFileInfo" />.
            </summary>
            <param name="name">The name of the file that could not be found</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.Exists">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.IsDirectory">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.LastModified">
            <summary>
            Returns <see cref="F:System.DateTimeOffset.MinValue" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.Length">
            <summary>
            Always equals -1.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NotFoundFileInfo.PhysicalPath">
            <summary>
            Always null.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NotFoundFileInfo.CreateReadStream">
            <summary>
            Always throws. A stream cannot be created for non-existing file.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">Always thrown.</exception>
            <returns>Does not return</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NullChangeToken">
            <summary>
            An empty change token that doesn't raise any change callbacks.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NullChangeToken.Singleton">
            <summary>
            A singleton instance of <see cref="T:Microsoft.Extensions.FileProviders.NullChangeToken" /></summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NullChangeToken.HasChanged">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.NullChangeToken.ActiveChangeCallbacks">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <summary>
            Always returns an empty disposable object. Callbacks will never be called.
            </summary>
            <param name="callback">This parameter is ignored</param>
            <param name="state">This parameter is ignored</param>
            <returns>A disposable object that noops on dispose.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.NullFileProvider">
            <summary>
            An empty file provider with no contents.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a non-existent directory.
            </summary>
            <param name="subpath">A path under the root directory. This parameter is ignored.</param>
            <returns>A <see cref="T:Microsoft.Extensions.FileProviders.IDirectoryContents" /> that does not exist and does not contain any contents.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo(System.String)">
            <summary>
            Locate a non-existent file.
            </summary>
            <param name="subpath">A path under the root directory.</param>
            <returns>A <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo" /> representing a non-existent file at the given path.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.NullFileProvider.Watch(System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that monitors nothing.
            </summary>
            <param name="filter">Filter string used to determine what files or folders to monitor. This parameter is ignored.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that does not register callbacks.</returns>
        </member>
        <member name="P:System.SR.FileNotExists">
            <summary>The file {0} does not exist.</summary>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters">
            <summary>
            Specifies filtering behavior for files or directories.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.Sensitive">
            <summary>
            Equivalent to <c>DotPrefixed | Hidden | System</c>. Exclude files and directories when the name begins with a period, or has either <see cref="F:System.IO.FileAttributes.Hidden" /> or <see cref="F:System.IO.FileAttributes.System" /> is set on <see cref="P:System.IO.FileSystemInfo.Attributes" />.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.DotPrefixed">
            <summary>
            Exclude files and directories when the name begins with period.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.Hidden">
            <summary>
            Exclude files and directories when <see cref="F:System.IO.FileAttributes.Hidden" /> is set on <see cref="P:System.IO.FileSystemInfo.Attributes" />.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.System">
            <summary>
            Exclude files and directories when <see cref="F:System.IO.FileAttributes.System" /> is set on <see cref="P:System.IO.FileSystemInfo.Attributes" />.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.None">
            <summary>
            Do not exclude any files.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo">
            <summary>
            Represents a directory on a physical filesystem
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo" /> that wraps an instance of <see cref="T:System.IO.DirectoryInfo" /></summary>
            <param name="info">The directory</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.Exists">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.Length">
            <summary>
            Always equals -1.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.PhysicalPath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.LastModified">
            <summary>
            The time when the directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.IsDirectory">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.CreateReadStream">
            <summary>
            Always throws an exception because read streams are not support on directories.
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <returns>Never returns</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo">
            <summary>
            Represents a file on a physical filesystem
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo" /> that wraps an instance of <see cref="T:System.IO.FileInfo" /></summary>
            <param name="info">The <see cref="T:System.IO.FileInfo" /></param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.Exists">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.Length">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.PhysicalPath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.LastModified">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.IsDirectory">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.CreateReadStream">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher">
            <summary>
                <para>
                A file watcher that watches a physical filesystem for changes.
                </para>
                <para>
                Triggers events on <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> when files are created, change, renamed, or deleted.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher" /> that watches files in <paramref name="root" />.
            Wraps an instance of <see cref="T:System.IO.FileSystemWatcher" /></summary>
            <param name="root">Root directory for the watcher</param>
            <param name="fileSystemWatcher">The wrapped watcher that is watching <paramref name="root" /></param>
            <param name="pollForChanges">
            True when the watcher should use polling to trigger instances of
            <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> created by <see cref="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)" /></param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher" /> that watches files in <paramref name="root" />.
            Wraps an instance of <see cref="T:System.IO.FileSystemWatcher" /></summary>
            <param name="root">Root directory for the watcher</param>
            <param name="fileSystemWatcher">The wrapped watcher that is watching <paramref name="root" /></param>
            <param name="pollForChanges">
            True when the watcher should use polling to trigger instances of
            <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> created by <see cref="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)" /></param>
            <param name="filters">Specifies which files or directories are excluded. Notifications of changes to are not raised to these.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)">
            <summary>
                <para>
                Creates an instance of <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for all files and directories that match the
                <paramref name="filter" /></para>
                <para>
                Globbing patterns are relative to the root directory given in the constructor
                <seealso cref="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)" />. Globbing patterns
                are interpreted by <seealso cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />.
                </para>
            </summary>
            <param name="filter">A globbing pattern for files and directories to watch</param>
            <returns>A change token for all files that match the filter</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="filter" /> is null</exception>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose">
            <summary>
            Disposes the provider. Change tokens may not trigger after the provider is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes the provider.
            </summary>
            <param name="disposing">
                <c>true</c> is invoked from <see cref="M:System.IDisposable.Dispose" />.</param>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken">
            <summary>
                <para>
                A change token that polls for file system changes.
                </para>
                <para>
                This change token does not raise any change callbacks. Callers should watch for <see cref="P:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.HasChanged" /> to turn
                from false to true
                and dispose the token after this happens.
                </para>
            </summary>
            <remarks>
            Polling occurs every 4 seconds.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken" /> that polls the specified file for changes as
            determined by <see cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc" />.
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo" /> to poll</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.ActiveChangeCallbacks">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.HasChanged">
            <summary>
            True when the file has changed since the change token was created. Once the file changes, this value is always true
            </summary>
            <remarks>
            Once true, the value will always be true. Change tokens should not re-used once expired. The caller should discard this
            instance once it sees <see cref="P:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.HasChanged" /> is true.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <summary>
            Does not actually register callbacks.
            </summary>
            <param name="callback">This parameter is ignored</param>
            <param name="state">This parameter is ignored</param>
            <returns>A disposable object that noops when disposed</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken">
            <summary>
            A polling based <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for wildcard patterns.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken" />.
            </summary>
            <param name="root">The root of the file system.</param>
            <param name="pattern">The pattern to watch.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.ActiveChangeCallbacks">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.HasChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.GetLastWriteUtc(System.String)">
            <summary>
            Gets the last write time of the file at the specified <paramref name="path" />.
            </summary>
            <param name="path">The root relative path.</param>
            <returns>The <see cref="T:System.DateTime" /> that the file was last modified.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents">
            <summary>
            Represents the contents of a physical file directory
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents" /></summary>
            <param name="directory">The directory</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.#ctor(System.String,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents" /></summary>
            <param name="directory">The directory</param>
            <param name="filters">Specifies which files or directories are excluded from enumeration.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.Exists">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider">
            <summary>
            Looks up files using the on-disk file system
            </summary>
            <remarks>
            When the environment variable "DOTNET_USE_POLLING_FILE_WATCHER" is set to "1" or "true", calls to
            <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" /> will use <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of a PhysicalFileProvider at the given root directory.
            </summary>
            <param name="root">The root directory. This should be an absolute path.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)">
            <summary>
            Initializes a new instance of a PhysicalFileProvider at the given root directory.
            </summary>
            <param name="root">The root directory. This should be an absolute path.</param>
            <param name="filters">Specifies which files or directories are excluded.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UsePollingFileWatcher">
            <summary>
            Gets or sets a value that determines if this instance of <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />
            uses polling to determine file changes.
            <para>
            By default, <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />  uses <see cref="T:System.IO.FileSystemWatcher" /> to listen to file change events
            for <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" />. <see cref="T:System.IO.FileSystemWatcher" /> is ineffective in some scenarios such as mounted drives.
            Polling is required to effectively watch for file changes.
            </para><seealso cref="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UseActivePolling" />.
            </summary>
            <value>
            The default value of this property is determined by the value of environment variable named <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.
            When <c>true</c> or <c>1</c>, this property defaults to <c>true</c>; otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UseActivePolling">
            <summary>
            Gets or sets a value that determines if this instance of <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />
            actively polls for file changes.
            <para>
            When <see langword="true" />, <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> returned by <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" /> will actively poll for file changes
            (<see cref="P:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks" /> will be <see langword="true" />) instead of being passive.
            </para><para>
            This property is only effective when <see cref="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UsePollingFileWatcher" /> is set.
            </para></summary>
            <value>
            The default value of this property is determined by the value of environment variable named <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.
            When <c>true</c> or <c>1</c>, this property defaults to <c>true</c>; otherwise false.
            </value>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose">
            <summary>
            Disposes the provider. Change tokens may not trigger after the provider is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose(System.Boolean)">
            <summary>
            Disposes the provider.
            </summary>
            <param name="disposing">
                <c>true</c> is invoked from <see cref="M:System.IDisposable.Dispose" />.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root">
            <summary>
            The root directory for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo(System.String)">
            <summary>
            Locate a file at the given path by directly mapping path segments to physical directories.
            </summary>
            <param name="subpath">A path under the root directory</param>
            <returns>The file information. Caller must check <see cref="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists" /> property. </returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a directory at the given path, if any.
            </summary>
            <param name="subpath">A path under the root directory. Leading slashes are ignored.</param>
            <returns>
            Contents of the directory. Caller must check <see cref="P:Microsoft.Extensions.FileProviders.IDirectoryContents.Exists" /> property. <see cref="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents" /> if
            <paramref name="subpath" /> is absolute, if the directory does not exist, or <paramref name="subpath" /> has invalid
            characters.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)">
            <summary>
                <para>Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for the specified <paramref name="filter" />.</para>
                <para>Globbing patterns are interpreted by <seealso cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />.</para>
            </summary>
            <param name="filter">
            Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*,
            subFolder/**/*.cshtml.
            </param>
            <returns>
            An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that is notified when a file matching <paramref name="filter" /> is added,
            modified or deleted. Returns a <see cref="T:Microsoft.Extensions.FileProviders.NullChangeToken" /> if <paramref name="filter" /> has invalid filter
            characters or if <paramref name="filter" /> is an absolute path or outside the root directory specified in the
            constructor <seealso cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="P:System.SR.Error_FileSystemWatcherRequiredWithoutPolling">
            <summary>The fileSystemWatcher parameter must be non-null when pollForChanges is false.</summary>
        </member>
        <member name="P:System.SR.CannotCreateStream">
            <summary>Cannot create a stream for a directory.</summary>
        </member>
        <member name="P:System.SR.CannotModifyWhenFileWatcherInitialized">
            <summary>Cannot modify {0} once file watcher has been initialized.</summary>
        </member>
        <member name="P:System.SR.UnexpectedFileSystemInfo">
            <summary>Unexpected type of FileSystemInfo</summary>
        </member>
        <member name="P:System.SR.FileSystemWatcher_PlatformNotSupported">
            <summary>The type '{0}' is not supported on this platform, use polling instead.</summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
            <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
            <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
            <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase">
            <summary>
            Represents a directory
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos">
            <summary>
            Enumerates all files and directories in the directory.
            </summary>
            <returns>Collection of files and directories</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase.GetDirectory(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase" /> that represents a subdirectory
            </summary>
            <param name="path">The directory name</param>
            <returns>Instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase" /> even if directory does not exist</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase.GetFile(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase" /> that represents a file in the directory
            </summary>
            <param name="path">The file name</param>
            <returns>Instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase" /> even if file does not exist</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper">
            <summary>
            Wraps an instance of <see cref="T:System.IO.DirectoryInfo" /> and provides implementation of
            <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper" />.
            </summary>
            <param name="directoryInfo">The <see cref="T:System.IO.DirectoryInfo" />.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.GetDirectory(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase" /> that represents a subdirectory.
            </summary>
            <remarks>
            If <paramref name="name" /> equals '..', this returns the parent directory.
            </remarks>
            <param name="name">The directory name</param>
            <returns>The directory</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.GetFile(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.FullName">
            <summary>
            Returns the full path to the directory.
            </summary>
            <remarks>
            Equals the value of <seealso cref="P:System.IO.FileSystemInfo.FullName" />.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.ParentDirectory">
            <summary>
            Returns the parent directory.
            </summary>
            <remarks>
            Equals the value of <seealso cref="P:System.IO.DirectoryInfo.Parent" />.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase">
            <summary>
            Represents a file
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper">
            <summary>
            Wraps an instance of <see cref="T:System.IO.FileInfo" /> to provide implementation of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper" /> to wrap the specified object <see cref="T:System.IO.FileInfo" />.
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo" /></param>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper.Name">
            <summary>
            The file name. (Overrides <see cref="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.Name" />).
            </summary>
            <remarks>
            Equals the value of <see cref="P:System.IO.FileInfo.Name" />.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper.FullName">
            <summary>
            The full path of the file. (Overrides <see cref="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.FullName" />).
            </summary>
            <remarks>
            Equals the value of <see cref="P:System.IO.FileSystemInfo.Name" />.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoWrapper.ParentDirectory">
            <summary>
            The directory containing the file. (Overrides <see cref="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.ParentDirectory" />).
            </summary>
            <remarks>
            Equals the value of <see cref="P:System.IO.FileInfo.Directory" />.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase">
            <summary>
            Shared abstraction for files and directories
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.Name">
            <summary>
            A string containing the name of the file or directory
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.FullName">
            <summary>
            A string containing the full path of the file or directory
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.ParentDirectory">
            <summary>
            The parent directory for the current file or directory
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch">
            <summary>
            Represents a file that was matched by searching using a globbing pattern
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path">
            <summary>
            The path to the file matched, relative to the beginning of the matching search pattern.
            </summary>
            <remarks>
            If the matcher searched for "src/Project/**/*.cs" and the pattern matcher found "src/Project/Interfaces/IFile.cs",
            then <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem" /> = "Interfaces/IFile.cs" and <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path" /> = "src/Project/Interfaces/IFile.cs".
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem">
            <summary>
            The subpath to the file matched, relative to the first wildcard in the matching search pattern.
            </summary>
            <remarks>
            If the matcher searched for "src/Project/**/*.cs" and the pattern matcher found "src/Project/Interfaces/IFile.cs",
            then <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem" /> = "Interfaces/IFile.cs" and <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path" /> = "src/Project/Interfaces/IFile.cs".
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch" /></summary>
            <param name="path">The path to the file matched, relative to the beginning of the matching search pattern.</param>
            <param name="stem">The subpath to the file matched, relative to the first wildcard in the matching search pattern.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)">
            <summary>
            Determines if the specified match is equivalent to the current match using a case-insensitive comparison.
            </summary>
            <param name="other">The other match to be compared</param>
            <returns>True if <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path" /> and <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem" /> are equal using case-insensitive comparison</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(System.Object)">
            <summary>
            Determines if the specified object is equivalent to the current match using a case-insensitive comparison.
            </summary>
            <param name="obj">The object to be compared</param>
            <returns>True when <see cref="M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.GetHashCode">
            <summary>
            Gets a hash for the file pattern match.
            </summary>
            <returns>Some number</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo">
            <summary>
            Avoids using disk for uses like Pattern Matching.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new InMemoryDirectoryInfo with the root directory and files given.
            </summary>
            <param name="rootDir">The root directory that this FileSystem will use.</param>
            <param name="files">Collection of file names. If relative paths <paramref name="rootDir" /> will be prepended to the paths.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.FullName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.ParentDirectory">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.EnumerateFileSystemInfos">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.GetDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.GetFile(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase" /> that matches the <paramref name="path" /> given.
            </summary>
            <param name="path">The filename.</param>
            <returns>Instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase" /> if the file exists, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Internal.ILinearPattern">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Internal.IPattern">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Internal.IPatternContext">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Internal.IRaggedPattern">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Internal.PatternTestResult">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.Matcher">
            <summary>
            Searches the file system for files with names that match specified patterns.
            </summary>
            <remarks>
                <para>
                Patterns specified in <seealso cref="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.AddInclude(System.String)" /> and <seealso cref="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.AddExclude(System.String)" /> can use
                the following formats to match multiple files or directories.
                </para>
                <list type="bullet">
                    <item>
                        <term>
                        exact directory and file name
                        </term>
                        <description>
                            <list type="bullet">
                                <item>
                                    <term>"one.txt"</term>
                                </item>
                                <item>
                                    <term>"dir/two.txt"</term>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>
                        wildcards (*) in file and directory names that represent zero to many characters not including
                        directory separators characters
                        </term>
                        <description>
                            <list type="bullet">
                                <item>
                                    <term>"*.txt"</term>
                                    <description>all files with .txt file extension</description>
                                </item>
                                <item>
                                    <term>"*.*"</term>
                                    <description>all files with an extension</description>
                                </item>
                                <item>
                                    <term>"*"</term>
                                    <description>all files in top level directory</description>
                                </item>
                                <item>
                                    <term>".*"</term>
                                    <description>filenames beginning with '.'</description>
                                </item>
                            - "*word* - all files with 'word' in the filename
                            <item><term>"readme.*"</term><description>all files named 'readme' with any file extension</description></item><item><term>"styles/*.css"</term><description>all files with extension '.css' in the directory 'styles/'</description></item><item><term>"scripts/*/*"</term><description>all files in 'scripts/' or one level of subdirectory under 'scripts/'</description></item><item><term>"images*/*"</term><description>all files in a folder with name that is or begins with 'images'</description></item></list>
                        </description>
                    </item>
                    <item>
                        <term>arbitrary directory depth ("/**/")</term>
                        <description>
                            <list type="bullet">
                                <item>
                                    <term>"**/*"</term>
                                    <description>all files in any subdirectory</description>
                                </item>
                                <item>
                                    <term>"dir/**/*"</term>
                                    <description>all files in any subdirectory under 'dir/'</description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>relative paths</term>
                        <description>
                        '../shared/*' - all files in a diretory named 'shared' at the sibling level to the base directory given
                        to <see cref="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.Execute(Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase)" /></description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" /> using case-insensitive matching
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.#ctor(System.StringComparison)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" /> using the string comparison method specified
            </summary>
            <param name="comparisonType">The <see cref="T:System.StringComparison" /> to use</param>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.AddInclude(System.String)">
            <summary>
                <para>
                Add a file name pattern that the matcher should use to discover files. Patterns are relative to the root
                directory given when <see cref="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.Execute(Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase)" /> is called.
                </para>
                <para>
                Use the forward slash '/' to represent directory separator. Use '*' to represent wildcards in file and
                directory names. Use '**' to represent arbitrary directory depth. Use '..' to represent a parent directory.
                </para>
            </summary>
            <param name="pattern">The globbing pattern</param>
            <returns>The matcher</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.AddExclude(System.String)">
            <summary>
                <para>
                Add a file name pattern for files the matcher should exclude from the results. Patterns are relative to the
                root directory given when <see cref="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.Execute(Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase)" /> is called.
                </para>
                <para>
                Use the forward slash '/' to represent directory separator. Use '*' to represent wildcards in file and
                directory names. Use '**' to represent arbitrary directory depth. Use '..' to represent a parent directory.
                </para>
            </summary>
            <param name="pattern">The globbing pattern</param>
            <returns>The matcher</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.Execute(Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase)">
            <summary>
            Searches the directory specified for all files matching patterns added to this instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" /></summary>
            <param name="directoryInfo">The root directory for the search</param>
            <returns>Always returns instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult" />, even if not files were matched</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.AddExcludePatterns(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String}[])">
            <summary>
            Adds multiple exclude patterns to <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />. <seealso cref="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.AddExclude(System.String)" /></summary>
            <param name="matcher">The matcher to which the exclude patterns are added</param>
            <param name="excludePatternsGroups">A list of globbing patterns</param>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.AddIncludePatterns(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String}[])">
            <summary>
            Adds multiple patterns to include in <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />. See <seealso cref="M:Microsoft.Extensions.FileSystemGlobbing.Matcher.AddInclude(System.String)" /></summary>
            <param name="matcher">The matcher to which the include patterns are added</param>
            <param name="includePatternsGroups">A list of globbing patterns</param>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.GetResultsInFullPath(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String)">
            <summary>
            Searches the directory specified for all files matching patterns added to this instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" /></summary>
            <param name="matcher">The matcher</param>
            <param name="directoryPath">The root directory for the search</param>
            <returns>Absolute file paths of all files matched. Empty enumerable if no files matched given patterns.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String)">
            <summary>
            Matches the file passed in with the patterns in the matcher without going to disk.
            </summary>
            <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
            <param name="file">The file to run the matcher against.</param>
            <returns>The match results.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String,System.String)">
            <summary>
            Matches the file passed in with the patterns in the matcher without going to disk.
            </summary>
            <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
            <param name="rootDir">The root directory for the matcher to match the file from.</param>
            <param name="file">The file to run the matcher against.</param>
            <returns>The match results.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Matches the files passed in with the patterns in the matcher without going to disk.
            </summary>
            <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
            <param name="files">The files to run the matcher against.</param>
            <returns>The match results.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Matches the files passed in with the patterns in the matcher without going to disk.
            </summary>
            <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
            <param name="rootDir">The root directory for the matcher to match the files from.</param>
            <param name="files">The files to run the matcher against.</param>
            <returns>The match results.</returns>
        </member>
        <member name="T:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch" /></summary>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch})">
            <summary>
            Initializes the result with a collection of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch" /></summary>
            <param name="files">A collection of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch" /></param>
        </member>
        <member name="M:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch},System.Boolean)">
            <summary>
            Initializes the result with a collection of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch" /></summary>
            <param name="files">A collection of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch" /></param>
            <param name="hasMatches">A value that determines if <see cref="T:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult" /> has any matches.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult.Files">
            <summary>
            A collection of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch" /></summary>
        </member>
        <member name="P:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult.HasMatches">
            <summary>
            Gets a value that determines if this instance of <see cref="T:Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult" /> has any matches.
            </summary>
        </member>
        <member name="P:System.SR.CannotDeclarePathSegment">
            <summary>Cannot declare path segment before entering a directory.</summary>
        </member>
        <member name="P:System.SR.CannotTestDirectory">
            <summary>Cannot test directory before entering a directory.</summary>
        </member>
        <member name="P:System.SR.CannotTestFile">
            <summary>Cannot test file before entering a directory.</summary>
        </member>
        <member name="P:System.SR.UnexpectedStringComparisonType">
            <summary>Unexpected StringComparison type: {0}</summary>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.CancellationChangeToken">
            <summary>
            A <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> implementation using <see cref="T:System.Threading.CancellationToken" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CancellationChangeToken.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Primitives.CancellationChangeToken" />.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CancellationChangeToken.ActiveChangeCallbacks">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CancellationChangeToken.HasChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CancellationChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Primitives.ChangeToken">
            <summary>
            Propagates notifications that a change has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.ChangeToken.OnChange(System.Func{Microsoft.Extensions.Primitives.IChangeToken},System.Action)">
            <summary>
            Registers the <paramref name="changeTokenConsumer" /> action to be called whenever the token produced changes.
            </summary>
            <param name="changeTokenProducer">Produces the change token.</param>
            <param name="changeTokenConsumer">Action called when the token changes.</param>
            <returns />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.ChangeToken.OnChange``1(System.Func{Microsoft.Extensions.Primitives.IChangeToken},System.Action{``0},``0)">
            <summary>
            Registers the <paramref name="changeTokenConsumer" /> action to be called whenever the token produced changes.
            </summary>
            <param name="changeTokenProducer">Produces the change token.</param>
            <param name="changeTokenConsumer">Action called when the token changes.</param>
            <param name="state">state for the consumer.</param>
            <returns />
        </member>
        <member name="T:Microsoft.Extensions.Primitives.CompositeChangeToken">
            <summary>
            An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> which represents one or more <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CompositeChangeToken.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.Primitives.IChangeToken})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Extensions.Primitives.CompositeChangeToken" />.
            </summary>
            <param name="changeTokens">The list of <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> to compose.</param>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CompositeChangeToken.ChangeTokens">
            <summary>
            Returns the list of <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> which compose the current <see cref="T:Microsoft.Extensions.Primitives.CompositeChangeToken" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.CompositeChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CompositeChangeToken.HasChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Extensions.Primitives.CompositeChangeToken.ActiveChangeCallbacks">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.Extensions.Append(System.Text.StringBuilder,Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Add the given <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to the <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to add to.</param>
            <param name="segment">The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to add.</param>
            <returns>The original <see cref="T:System.Text.StringBuilder" />.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.IChangeToken">
            <summary>
            Propagates notifications that a change has occurred.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged">
            <summary>
            Gets a value that indicates if a change has occurred.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks">
            <summary>
            Indicates if this token will pro-actively raise callbacks. If <c>false</c>, the token consumer must
            poll <see cref="P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged" /> to detect changes.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <summary>
            Registers for a callback that will be invoked when the entry has changed.
            <see cref="P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged" /> MUST be set before the callback is invoked.
            </summary>
            <param name="callback">The <see cref="T:System.Action`1" /> to invoke.</param>
            <param name="state">State to be passed into the callback.</param>
            <returns>An <see cref="T:System.IDisposable" /> that is used to unregister the callback.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.StringSegment">
            <summary>
            An optimized representation of a substring.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Primitives.StringSegment.Empty">
            <summary>
            A <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> for <see cref="F:System.String.Empty" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> struct.
            </summary>
            <param name="buffer">
            The original <see cref="T:System.String" />. The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> includes the whole <see cref="T:System.String" />.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> struct.
            </summary>
            <param name="buffer">The original <see cref="T:System.String" /> used as buffer.</param>
            <param name="offset">The offset of the segment within the <paramref name="buffer" />.</param>
            <param name="length">The length of the segment.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="length" /> is less than zero, or <paramref name="offset" /> +
            <paramref name="length" /> is greater than the number of characters in <paramref name="buffer" />.
            </exception>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Buffer">
            <summary>
            Gets the <see cref="T:System.String" /> buffer for this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Offset">
            <summary>
            Gets the offset within the buffer for this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Length">
            <summary>
            Gets the length of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Value">
            <summary>
            Gets the value of this segment as a <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.HasValue">
            <summary>
            Gets whether this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> contains a valid value.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringSegment.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Char" /> at a specified position in the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <param name="index">The offset into the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /></param>
            <returns>The <see cref="T:System.Char" /> at a specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is greater than or equal to <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" /> or less than zero.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.AsSpan">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1" /> from the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <returns>The <see cref="T:System.ReadOnlySpan`1" /> from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.AsSpan(System.Int32)">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1" /> from the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> that starts
            at the position specified by <paramref name="start" />, and has the remaining length.
            </summary>
            <param name="start">The zero-based starting character position in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1" /> with the remaining chars that begins at <paramref name="start" /> in
            this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="start" /> is greater than or equal to <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" /> or less than zero.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.AsSpan(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1" /> from the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> that starts
            at the position specified by <paramref name="start" />, and has the specified <paramref name="length" />.
            </summary>
            <param name="start">The zero-based starting character position in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <param name="length">The number of characters in the span.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1" /> with length <paramref name="length" /> that begins at
            <paramref name="start" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="start" /> or <paramref name="length" /> is less than zero, or <paramref name="start" /> + <paramref name="length" /> is
            greater than <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.AsMemory">
            <summary>
            Gets a <see cref="T:System.ReadOnlyMemory`1" /> from the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <returns>The <see cref="T:System.ReadOnlyMemory`1" /> from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Compare(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)">
            <summary>
            Compares substrings of two specified <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> objects using the specified rules,
            and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="a">The first <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare.</param>
            <param name="b">The second <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.
            The value is negative if <paramref name="a" /> is less than <paramref name="b" />, 0 if the two comparands are equal,
            and positive if <paramref name="a" /> is greater than <paramref name="b" />.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
                <see langword="true" /> if the current object is equal to the other parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                <see langword="true" /> if the current object is equal to the other parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
                <see langword="true" /> if the current object is equal to the other parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)">
            <summary>
            Determines whether two specified <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> objects have the same value. A parameter specifies the culture, case, and
            sort rules used in the comparison.
            </summary>
            <param name="a">The first <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare.</param>
            <param name="b">The second <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
                <see langword="true" /> if the objects are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)">
            <summary>
            Checks if the specified <see cref="T:System.String" /> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <param name="text">The <see cref="T:System.String" /> to compare with the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <returns>
                <see langword="true" /> if the specified <see cref="T:System.String" /> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,System.StringComparison)">
            <summary>
            Checks if the specified <see cref="T:System.String" /> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <param name="text">The <see cref="T:System.String" /> to compare with the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
                <see langword="true" /> if the specified <see cref="T:System.String" /> is equal to the current <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="text" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Checks if two specified <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> have the same value.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare, or <see langword="null" />.</param>
            <param name="right">The second <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare, or <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Checks if two specified <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> have different values.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare, or <see langword="null" />.</param>
            <param name="right">The second <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to compare, or <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if the value of <paramref name="left" /> is different from the value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Implicit(System.String)~Microsoft.Extensions.Primitives.StringSegment">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> from the given <see cref="T:System.String" />.
            </summary>
            <param name="value">The <see cref="T:System.String" /> to convert to a <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /></param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Implicit(Microsoft.Extensions.Primitives.StringSegment)~System.ReadOnlySpan{System.Char}">
            <summary>
            Creates a see <see cref="T:System.ReadOnlySpan`1" /> from the given <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <param name="segment">The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to convert to a <see cref="T:System.ReadOnlySpan`1" />.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.op_Implicit(Microsoft.Extensions.Primitives.StringSegment)~System.ReadOnlyMemory{System.Char}">
            <summary>
            Creates a see <see cref="T:System.ReadOnlyMemory`1" /> from the given <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <param name="segment">The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to convert to a <see cref="T:System.ReadOnlyMemory`1" />.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,System.StringComparison)">
            <summary>
            Checks if the beginning of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> matches the specified <see cref="T:System.String" /> when compared using the specified <paramref name="comparisonType" />.
            </summary>
            <param name="text">The <see cref="T:System.String" />to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
                <see langword="true" /> if <paramref name="text" /> matches the beginning of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="text" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,System.StringComparison)">
            <summary>
            Checks if the end of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> matches the specified <see cref="T:System.String" /> when compared using the specified <paramref name="comparisonType" />.
            </summary>
            <param name="text">The <see cref="T:System.String" />to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
                <see langword="true" /> if <paramref name="text" /> matches the end of this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="text" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32)">
            <summary>
            Retrieves a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            The substring starts at the position specified by <paramref name="offset" /> and has the remaining length.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <returns>A <see cref="T:System.String" /> that is equivalent to the substring of remaining length that begins at
            <paramref name="offset" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is greater than or equal to <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" /> or less than zero.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            The substring starts at the position specified by <paramref name="offset" /> and has the specified <paramref name="length" />.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A <see cref="T:System.String" /> that is equivalent to the substring of length <paramref name="length" /> that begins at
            <paramref name="offset" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="length" /> is less than zero, or <paramref name="offset" /> + <paramref name="length" /> is
            greater than <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32)">
            <summary>
            Retrieves a <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> that represents a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> starts at the position specified by <paramref name="offset" />.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> that begins at <paramref name="offset" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />
            whose length is the remainder.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is greater than or equal to <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" /> or less than zero.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)">
            <summary>
            Retrieves a <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> that represents a substring from this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> starts at the position specified by <paramref name="offset" /> and has the specified <paramref name="length" />.
            </summary>
            <param name="offset">The zero-based starting character position of a substring in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="offset" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="length" /> is less than zero, or <paramref name="offset" /> + <paramref name="length" /> is
            greater than <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Gets the zero-based index of the first occurrence of the character <paramref name="c" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            The search starts at <paramref name="start" /> and examines a specified number of <paramref name="count" /> character positions.
            </summary>
            <param name="c">The Unicode character to seek.</param>
            <param name="start">The zero-based index position at which the search starts. </param>
            <param name="count">The number of characters to examine.</param>
            <returns>The zero-based index position of <paramref name="c" /> from the beginning of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> if that character is found, or -1 if it is not.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="start" /> or <paramref name="count" /> is less than zero, or <paramref name="start" /> + <paramref name="count" /> is
            greater than <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)">
            <summary>
            Gets the zero-based index of the first occurrence of the character <paramref name="c" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            The search starts at <paramref name="start" />.
            </summary>
            <param name="c">The Unicode character to seek.</param>
            <param name="start">The zero-based index position at which the search starts. </param>
            <returns>The zero-based index position of <paramref name="c" /> from the beginning of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> if that character is found, or -1 if it is not.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="start" /> is greater than or equal to <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" /> or less than zero.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)">
            <summary>
            Gets the zero-based index of the first occurrence of the character <paramref name="c" /> in this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.
            </summary>
            <param name="c">The Unicode character to seek.</param>
            <returns>The zero-based index position of <paramref name="c" /> from the beginning of the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters. The search starts at a specified character position and examines a specified number
            of character positions.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" />
            was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="anyOf" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex" /> or <paramref name="count" /> is less than zero, or <paramref name="startIndex" /> + <paramref name="count" /> is
            greater than <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" />.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters. The search starts at a specified character position.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" />
            was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex" /> is greater than or equal to <see cref="P:Microsoft.Extensions.Primitives.StringSegment.Length" /> or less than zero.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" />
            was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.LastIndexOf(System.Char)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.
            </summary>
            <param name="value">The Unicode character to seek.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Trim">
            <summary>
            Removes all leading and trailing whitespaces.
            </summary>
            <returns>The trimmed <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.TrimStart">
            <summary>
            Removes all leading whitespaces.
            </summary>
            <returns>The trimmed <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.TrimEnd">
            <summary>
            Removes all trailing whitespaces.
            </summary>
            <returns>The trimmed <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.Split(System.Char[])">
            <summary>
            Splits a string into <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />s that are based on the characters in an array.
            </summary>
            <param name="chars">A character array that delimits the substrings in this string, an empty array that
            contains no delimiters, or null.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Primitives.StringTokenizer" /> whose elements contain the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />s from this instance
            that are delimited by one or more characters in <paramref name="chars" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringSegment)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> is null or an Empty string.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to test.</param>
            <returns />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.ToString">
            <summary>
            Returns the <see cref="T:System.String" /> represented by this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> or <see cref="F:System.String.Empty" /> if the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> does not contain a value.
            </summary>
            <returns>The <see cref="T:System.String" /> represented by this <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> or <see cref="F:System.String.Empty" /> if the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> does not contain a value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringSegment.System#IEquatable{System#String}#Equals(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Primitives.StringTokenizer">
            <summary>
            Tokenizes a <see cref="T:System.String" /> into <see cref="T:Microsoft.Extensions.Primitives.StringSegment" />s.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Primitives.StringTokenizer" />.
            </summary>
            <param name="value">The <see cref="T:System.String" /> to tokenize.</param>
            <param name="separators">The characters to tokenize by.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringTokenizer.#ctor(Microsoft.Extensions.Primitives.StringSegment,System.Char[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Primitives.StringTokenizer" />.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to tokenize.</param>
            <param name="separators">The characters to tokenize by.</param>
        </member>
        <member name="T:Microsoft.Extensions.Primitives.StringValues">
            <summary>
            Represents zero/null, one, or many strings in an efficient way.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Primitives.StringValues.Empty">
            <summary>
            A readonly instance of the <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> struct whose value is an empty string array.
            </summary>
            <remarks>
            In application code, this field is most commonly used to safely represent a <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> that has null string values.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> structure using the specified string.
            </summary>
            <param name="value">A string value or <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> structure using the specified array of strings.
            </summary>
            <param name="values">A string array.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String)~Microsoft.Extensions.Primitives.StringValues">
            <summary>
            Defines an implicit conversion of a given string to a <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.
            </summary>
            <param name="value">A string to implicitly convert.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String[])~Microsoft.Extensions.Primitives.StringValues">
            <summary>
            Defines an implicit conversion of a given string array to a <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.
            </summary>
            <param name="values">A string array to implicitly convert.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String">
            <summary>
            Defines an implicit conversion of a given <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to a string, with multiple values joined as a comma separated string.
            </summary>
            <remarks>
            Returns <c>null</c> where <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> has been initialized from an empty string array or is <see cref="F:Microsoft.Extensions.Primitives.StringValues.Empty" />.
            </remarks>
            <param name="values">A <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to implicitly convert.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String[]">
            <summary>
            Defines an implicit conversion of a given <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to a string array.
            </summary>
            <param name="value">A <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to implicitly convert.</param>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringValues.Count">
            <summary>
            Gets the number of <see cref="T:System.String" /> elements contained in this <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String" /> at index.
            </summary>
            <value>The string at the specified index.</value>
            <param name="index">The zero-based index of the element to get.</param>
            <exception cref="T:System.NotSupportedException">Set operations are not supported on readonly <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.</exception>
        </member>
        <member name="P:Microsoft.Extensions.Primitives.StringValues.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String" /> at index.
            </summary>
            <value>The string at the specified index.</value>
            <param name="index">The zero-based index of the element to get.</param>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.ToString">
            <summary>
            Converts the value of the current <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> object to its equivalent string representation, with multiple values joined as a comma separated string.
            </summary>
            <returns>A string representation of the value of the current <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> object.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.ToArray">
            <summary>
            Creates a string array from the current <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> object.
            </summary>
            <returns>A string array represented by this instance.</returns>
            <remarks>
                <para>If the <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> contains a single string internally, it is copied to a new array.</para>
                <para>If the <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> contains an array internally it returns that array instance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#IndexOf(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of an item in the <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.
            </summary>
            <param name="item">The string to locate in the <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.</param>
            <returns>the zero-based index of the first occurrence of <paramref name="item" /> within the <see cref="T:Microsoft.Extensions.Primitives.StringValues" />, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Contains(System.String)">
            <summary>Determines whether a string is in the <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.</summary>
            <param name="item">The <see cref="T:System.String" /> to locate in the <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.</param>
            <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:Microsoft.Extensions.Primitives.StringValues" />; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Microsoft.Extensions.Primitives.StringValues" />to a string array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the destination array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array">array</paramref> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex">arrayIndex</paramref> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> is greater than the available space from <paramref name="arrayIndex">arrayIndex</paramref> to the end of the destination <paramref name="array">array</paramref>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.GetEnumerator">
            <summary>Retrieves an object that can iterate through the individual strings in this <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.</summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <inheritdoc cref="M:Microsoft.Extensions.Primitives.StringValues.GetEnumerator" />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:Microsoft.Extensions.Primitives.StringValues.GetEnumerator" />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> contains no string values.
            </summary>
            <param name="value">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to test.</param>
            <returns>true if <paramref name="value">value</paramref> contains a single null or empty string or an empty array; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Concatenates two specified instances of <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.
            </summary>
            <param name="values1">The first <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to concatenate.</param>
            <param name="values2">The second <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to concatenate.</param>
            <returns>The concatenation of <paramref name="values1" /> and <paramref name="values2" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues@,System.String)">
            <summary>
            Concatenates specified instance of <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> with specified <see cref="T:System.String" />.
            </summary>
            <param name="values">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to concatenate.</param>
            <param name="value">The <see cref="T:System.String" /> to concatenate.</param>
            <returns>The concatenation of <paramref name="values" /> and <paramref name="value" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Concat(System.String,Microsoft.Extensions.Primitives.StringValues@)">
            <summary>
            Concatenates specified instance of <see cref="T:System.String" /> with specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.
            </summary>
            <param name="value">The <see cref="T:System.String" /> to concatenate.</param>
            <param name="values">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to concatenate.</param>
            <returns>The concatenation of <paramref name="values" /> and <paramref name="values" />.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether two specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> objects have the same values in the same order.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether two specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> have the same values.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether two specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> have different values.
            </summary>
            <param name="left">The first <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The second <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is different to the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether this instance and another specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> object have the same values.
            </summary>
            <param name="other">The string to compare to this instance.</param>
            <returns>
                <c>true</c> if the value of <paramref name="other" /> is the same as the value of this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether the specified <see cref="T:System.String" /> and <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> objects have the same values.
            </summary>
            <param name="left">The <see cref="T:System.String" /> to compare.</param>
            <param name="right">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, <c>false</c>. If <paramref name="left" /> is <c>null</c>, the method returns <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> and <see cref="T:System.String" /> objects have the same values.
            </summary>
            <param name="left">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The <see cref="T:System.String" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, <c>false</c>. If <paramref name="right" /> is <c>null</c>, the method returns <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String)">
            <summary>
            Determines whether this instance and a specified <see cref="T:System.String" />, have the same value.
            </summary>
            <param name="other">The <see cref="T:System.String" /> to compare to this instance.</param>
            <returns>
                <c>true</c> if the value of <paramref name="other" /> is the same as this instance; otherwise, <c>false</c>. If <paramref name="other" /> is <c>null</c>, returns <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String[],Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether the specified string array and <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> objects have the same values.
            </summary>
            <param name="left">The string array to compare.</param>
            <param name="right">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String[])">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> and string array objects have the same values.
            </summary>
            <param name="left">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The string array to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String[])">
            <summary>
            Determines whether this instance and a specified string array have the same values.
            </summary>
            <param name="other">The string array to compare to this instance.</param>
            <returns>
                <c>true</c> if the value of <paramref name="other" /> is the same as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String)">
            <inheritdoc cref="M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String)" />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> and <see cref="T:System.String" /> objects have different values.
            </summary>
            <param name="left">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The <see cref="T:System.String" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is different to the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String,Microsoft.Extensions.Primitives.StringValues)">
            <inheritdoc cref="M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String,Microsoft.Extensions.Primitives.StringValues)" />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether the specified <see cref="T:System.String" /> and <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> objects have different values.
            </summary>
            <param name="left">The <see cref="T:System.String" /> to compare.</param>
            <param name="right">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is different to the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String[])">
            <inheritdoc cref="M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String[])" />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String[])">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> and string array have different values.
            </summary>
            <param name="left">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The string array to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is different to the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String[],Microsoft.Extensions.Primitives.StringValues)">
            <inheritdoc cref="M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String[],Microsoft.Extensions.Primitives.StringValues)" />
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String[],Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether the specified string array and <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> have different values.
            </summary>
            <param name="left">The string array to compare.</param>
            <param name="right">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the value of <paramref name="left" /> is different to the value of <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> and <see cref="T:System.Object" />, which must be a
            <see cref="T:Microsoft.Extensions.Primitives.StringValues" />, <see cref="T:System.String" />, or array of <see cref="T:System.String" />, have the same value.
            </summary>
            <param name="left">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The <see cref="T:System.Object" /> to compare.</param>
            <returns>
                <c>true</c> if the <paramref name="left" /> object is equal to the <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> and <see cref="T:System.Object" />, which must be a
            <see cref="T:Microsoft.Extensions.Primitives.StringValues" />, <see cref="T:System.String" />, or array of <see cref="T:System.String" />, have different values.
            </summary>
            <param name="left">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The <see cref="T:System.Object" /> to compare.</param>
            <returns>
                <c>true</c> if the <paramref name="left" /> object is equal to the <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.Object,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, which must be a
            <see cref="T:Microsoft.Extensions.Primitives.StringValues" />, <see cref="T:System.String" />, or array of <see cref="T:System.String" />, and specified <see cref="T:Microsoft.Extensions.Primitives.StringValues" />,  have the same value.
            </summary>
            <param name="left">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <param name="right">The <see cref="T:System.Object" /> to compare.</param>
            <returns>
                <c>true</c> if the <paramref name="left" /> object is equal to the <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.Object,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> and <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> object have the same values.
            </summary>
            <param name="left">The <see cref="T:System.Object" /> to compare.</param>
            <param name="right">The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> to compare.</param>
            <returns>
                <c>true</c> if the <paramref name="left" /> object is equal to the <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
                <c>true</c> if the current object is equal to <paramref name="obj" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Primitives.StringValues.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Primitives.StringValues.Enumerator">
            <summary>
            Enumerates the string values of a <see cref="T:Microsoft.Extensions.Primitives.StringValues" />.
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference">
            <summary>
            Get a pinnable reference to the builder.
            Does not ensure there is a null char after <see cref="P:System.Text.ValueStringBuilder.Length" />
            This overload is pattern matched in the C# 7.3+ compiler so you can omit
            the explicit method call, and write eg "fixed (char* c = builder)"
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference(System.Boolean)">
            <summary>
            Get a pinnable reference to the builder.
            </summary>
            <param name="terminate">Ensures that the builder has a null char after <see cref="P:System.Text.ValueStringBuilder.Length" /></param>
        </member>
        <member name="P:System.Text.ValueStringBuilder.RawChars">
            <summary>Returns the underlying storage of the builder.</summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AsSpan(System.Boolean)">
            <summary>
            Returns a span around the contents of the builder.
            </summary>
            <param name="terminate">Ensures that the builder has a null char after <see cref="P:System.Text.ValueStringBuilder.Length" /></param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Grow(System.Int32)">
            <summary>
            Resize the internal buffer either by doubling current buffer size or
            by adding <paramref name="additionalCapacityBeyondPos" /> to
            <see cref="F:System.Text.ValueStringBuilder._pos" /> whichever is greater.
            </summary>
            <param name="additionalCapacityBeyondPos">
            Number of chars requested beyond current position.
            </param>
        </member>
        <member name="P:System.SR.Argument_InvalidOffsetLength">
            <summary>Offset and length are out of bounds for the string or length is greater than the number of characters from index to the end of the string.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidOffsetLengthStringSegment">
            <summary>Offset and length are out of bounds for this StringSegment or length is greater than the number of characters to the end of this StringSegment.</summary>
        </member>
        <member name="P:System.SR.Capacity_CannotChangeAfterWriteStarted">
            <summary>Cannot change capacity after write started.</summary>
        </member>
        <member name="P:System.SR.Capacity_NotEnough">
            <summary>Not enough capacity to write '{0}' characters, only '{1}' left.</summary>
        </member>
        <member name="P:System.SR.Capacity_NotUsedEntirely">
            <summary>Entire reserved capacity was not used. Capacity: '{0}', written '{1}'.</summary>
        </member>
        <member name="T:Microsoft.Win32.Registry">
            <summary>Provides <see cref="T:Microsoft.Win32.RegistryKey" /> objects that represent the root keys in the Windows registry, and <see langword="static" /> methods to access key/value pairs.</summary>
        </member>
        <member name="F:Microsoft.Win32.Registry.ClassesRoot">
            <summary>Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.</summary>
        </member>
        <member name="F:Microsoft.Win32.Registry.CurrentConfig">
            <summary>Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.</summary>
        </member>
        <member name="F:Microsoft.Win32.Registry.CurrentUser">
            <summary>Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER.</summary>
        </member>
        <member name="F:Microsoft.Win32.Registry.LocalMachine">
            <summary>Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.</summary>
        </member>
        <member name="F:Microsoft.Win32.Registry.PerformanceData">
            <summary>Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.</summary>
        </member>
        <member name="F:Microsoft.Win32.Registry.Users">
            <summary>Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.</summary>
        </member>
        <member name="M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)">
            <summary>Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or <see langword="null" /> if the specified key does not exist.</summary>
            <param name="keyName">The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</param>
            <param name="valueName">The name of the name/value pair.</param>
            <param name="defaultValue">The value to return if <paramref name="valueName" /> does not exist.</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="keyName" /> does not begin with a valid registry root.</exception>
            <returns>
                <see langword="null" /> if the subkey specified by <paramref name="keyName" /> does not exist; otherwise, the value associated with <paramref name="valueName" />, or <paramref name="defaultValue" /> if <paramref name="valueName" /> is not found.</returns>
        </member>
        <member name="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)">
            <summary>Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.</summary>
            <param name="keyName">The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</param>
            <param name="valueName">The name of the name/value pair.</param>
            <param name="value">The value to be stored.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="keyName" /> does not begin with a valid registry root.  
  
 -or-  
  
 <paramref name="keyName" /> is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and thus cannot be written to; for example, it is a root-level node.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys.</exception>
        </member>
        <member name="M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.</summary>
            <param name="keyName">The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".</param>
            <param name="valueName">The name of the name/value pair.</param>
            <param name="value">The value to be stored.</param>
            <param name="valueKind">The registry data type to use when storing the data.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="keyName" /> does not begin with a valid registry root.  
  
 -or-  
  
 <paramref name="keyName" /> is longer than the maximum length allowed (255 characters).  
  
 -or-  
  
 The type of <paramref name="value" /> did not match the registry data type specified by <paramref name="valueKind" />, therefore the data could not be converted properly.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys.</exception>
        </member>
        <member name="T:Microsoft.Win32.RegistryHive">
            <summary>Represents the possible values for a top-level node on a foreign machine.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryHive.ClassesRoot">
            <summary>Represents the HKEY_CLASSES_ROOT base key on another computer. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node remotely.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryHive.CurrentConfig">
            <summary>Represents the HKEY_CURRENT_CONFIG base key on another computer. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node remotely.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryHive.CurrentUser">
            <summary>Represents the HKEY_CURRENT_USER base key on another computer. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node remotely.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryHive.LocalMachine">
            <summary>Represents the HKEY_LOCAL_MACHINE base key on another computer. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node remotely.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryHive.PerformanceData">
            <summary>Represents the HKEY_PERFORMANCE_DATA base key on another computer. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node remotely.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryHive.Users">
            <summary>Represents the HKEY_USERS base key on another computer. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node remotely.</summary>
        </member>
        <member name="T:Microsoft.Win32.RegistryKey">
            <summary>Represents a key-level node in the Windows registry. This class is a registry encapsulation.</summary>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.Close">
            <summary>Closes the key and flushes it to disk if its contents have been modified.</summary>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)">
            <summary>Creates a new subkey or opens an existing subkey for write access.</summary>
            <param name="subkey">The name or path of the subkey to create or open. This string is not case-sensitive.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or open the registry key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> cannot be written to; for example, it was not opened as a writable key , or the user does not have the necessary access rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.  
  
 -or-  
  
 A system error occurred, such as deletion of the key, or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
            <returns>The newly created subkey, or <see langword="null" /> if the operation failed. If a zero-length string is specified for <paramref name="subkey" />, the current <see cref="T:Microsoft.Win32.RegistryKey" /> object is returned.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>Creates a new subkey or opens an existing subkey for write access, using the specified permission check option.</summary>
            <param name="subkey">The name or path of the subkey to create or open. This string is not case-sensitive.</param>
            <param name="permissionCheck">One of the enumeration values that specifies whether the key is opened for read or read/write access.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or open the registry key.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="permissionCheck" /> contains an invalid value.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.  
  
 -or-  
  
 A system error occurred, such as deletion of the key, or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
            <returns>The newly created subkey, or <see langword="null" /> if the operation failed. If a zero-length string is specified for <paramref name="subkey" />, the current <see cref="T:Microsoft.Win32.RegistryKey" /> object is returned.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
            <summary>Creates a subkey or opens a subkey for write access, using the specified permission check and registry options.</summary>
            <param name="subkey">The name or path of the subkey to create or open.</param>
            <param name="permissionCheck">One of the enumeration values that specifies whether the key is opened for read or read/write access.</param>
            <param name="registryOptions">The registry option to use; for example, that creates a volatile key.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> object is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> object cannot be written to; for example, it was not opened as a writable key, or the user does not have the required access rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.  
  
 -or-  
  
 A system error occurred, such as deletion of the key or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or open the registry key.</exception>
            <returns>The newly created subkey, or <see langword="null" /> if the operation failed.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions,System.Security.AccessControl.RegistrySecurity)">
            <summary>Creates a subkey or opens a subkey for write access, using the specified permission check option, registry option, and registry security.</summary>
            <param name="subkey">The name or path of the subkey to create or open.</param>
            <param name="permissionCheck">One of the enumeration values that specifies whether the key is opened for read or read/write access.</param>
            <param name="registryOptions">The registry option to use.</param>
            <param name="registrySecurity">The access control security for the new subkey.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> object is closed. Closed keys cannot be accessed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> object cannot be written to; for example, it was not opened as a writable key, or the user does not have the required access rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.  
  
 -or-  
  
 A system error occurred, such as deletion of the key or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or open the registry key.</exception>
            <returns>The newly created subkey, or <see langword="null" /> if the operation failed.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistrySecurity)">
            <summary>Creates a new subkey or opens an existing subkey for write access, using the specified permission check option and registry security.</summary>
            <param name="subkey">The name or path of the subkey to create or open. This string is not case-sensitive.</param>
            <param name="permissionCheck">One of the enumeration values that specifies whether the key is opened for read or read/write access.</param>
            <param name="registrySecurity">The access control security for the new key.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or open the registry key.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="permissionCheck" /> contains an invalid value.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.  
  
 -or-  
  
 A system error occurred, such as deletion of the key, or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
            <returns>The newly created subkey, or <see langword="null" /> if the operation failed. If a zero-length string is specified for <paramref name="subkey" />, the current <see cref="T:Microsoft.Win32.RegistryKey" /> object is returned.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)">
            <summary>Creates a new subkey or opens an existing subkey with the specified access. Available starting with .NET Framework 4.6.</summary>
            <param name="subkey">The name or path of the subkey to create or open. This string is not case-sensitive.</param>
            <param name="writable">
                <see langword="true" /> to indicate the new subkey is writable; otherwise, <see langword="false" />.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or open the registry key.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.  
  
 -or-  
  
 A system error occurred, such as deletion of the key, or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
            <returns>The newly created subkey, or <see langword="null" /> if the operation failed. If a zero-length string is specified for <paramref name="subkey" />, the current <see cref="T:Microsoft.Win32.RegistryKey" /> object is returned.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)">
            <summary>Creates a new subkey or opens an existing subkey with the specified access. Available starting with .NET Framework 4.6.</summary>
            <param name="subkey">The name or path of the subkey to create or open. This string is not case-sensitive.</param>
            <param name="writable">
                <see langword="true" /> to indicate the new subkey is writable; otherwise, <see langword="false" />.</param>
            <param name="options">The registry option to use.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> does not specify a valid Option</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or open the registry key.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.  
  
 -or-  
  
 A system error occurred, such as deletion of the key, or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
            <returns>The newly created subkey, or <see langword="null" /> if the operation failed. If a zero-length string is specified for <paramref name="subkey" />, the current <see cref="T:Microsoft.Win32.RegistryKey" /> object is returned.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)">
            <summary>Deletes the specified subkey.</summary>
            <param name="subkey">The name of the subkey to delete. This string is not case-sensitive.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="subkey" /> has child subkeys</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="subkey" /> parameter does not specify a valid registry key</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" /></exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to delete the key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)">
            <summary>Deletes the specified subkey, and specifies whether an exception is raised if the subkey is not found.</summary>
            <param name="subkey">The name of the subkey to delete. This string is not case-sensitive.</param>
            <param name="throwOnMissingSubKey">Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <see langword="true" /> and the specified subkey does not exist, an exception is raised. If this argument is <see langword="false" /> and the specified subkey does not exist, no action is taken.</param>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="subkey" /> has child subkeys.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="subkey" /> does not specify a valid registry key, and <paramref name="throwOnMissingSubKey" /> is <see langword="true" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to delete the key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)">
            <summary>Deletes a subkey and any child subkeys recursively.</summary>
            <param name="subkey">The subkey to delete. This string is not case-sensitive.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">Deletion of a root hive is attempted.  
  
 -or-  
  
 <paramref name="subkey" /> does not specify a valid registry subkey.</exception>
            <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to delete the key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)">
            <summary>Deletes the specified subkey and any child subkeys recursively, and specifies whether an exception is raised if the subkey is not found.</summary>
            <param name="subkey">The name of the subkey to delete. This string is not case-sensitive.</param>
            <param name="throwOnMissingSubKey">Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <see langword="true" /> and the specified subkey does not exist, an exception is raised. If this argument is <see langword="false" /> and the specified subkey does not exist, no action is taken.</param>
            <exception cref="T:System.ArgumentException">An attempt was made to delete the root hive of the tree.  
  
 -or-  
  
 <paramref name="subkey" /> does not specify a valid registry subkey, and <paramref name="throwOnMissingSubKey" /> is <see langword="true" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="subkey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to delete the key.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)">
            <summary>Deletes the specified value from this key.</summary>
            <param name="name">The name of the value to delete.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="name" /> is not a valid reference to a value.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to delete the value.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is read-only.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)">
            <summary>Deletes the specified value from this key, and specifies whether an exception is raised if the value is not found.</summary>
            <param name="name">The name of the value to delete.</param>
            <param name="throwOnMissingValue">Indicates whether an exception should be raised if the specified value cannot be found. If this argument is <see langword="true" /> and the specified value does not exist, an exception is raised. If this argument is <see langword="false" /> and the specified value does not exist, no action is taken.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="name" /> is not a valid reference to a value and <paramref name="throwOnMissingValue" /> is <see langword="true" />.  
  
 -or-  
  
 <paramref name="name" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to delete the value.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is read-only.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.Dispose">
            <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.Win32.RegistryKey" /> class.</summary>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.Flush">
            <summary>Writes all the attributes of the specified open registry key into the registry.</summary>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)">
            <summary>Creates a registry key from a specified handle.</summary>
            <param name="handle">The handle to the registry key.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="handle" /> is <see langword="null" />.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to perform this action.</exception>
            <returns>A registry key.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)">
            <summary>Creates a registry key from a specified handle and registry view setting.</summary>
            <param name="handle">The handle to the registry key.</param>
            <param name="view">The registry view to use.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="view" /> is invalid.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="handle" /> is <see langword="null" />.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to perform this action.</exception>
            <returns>A registry key.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetAccessControl">
            <summary>Returns the access control security for the current registry key.</summary>
            <exception cref="T:System.Security.SecurityException">The user does not have the necessary permissions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.InvalidOperationException">The current key has been deleted.</exception>
            <returns>An object that describes the access control permissions on the registry key represented by the current <see cref="T:Microsoft.Win32.RegistryKey" />.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the specified sections of the access control security for the current registry key.</summary>
            <param name="includeSections">A bitwise combination of enumeration values that specifies the type of security information to get.</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the necessary permissions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.InvalidOperationException">The current key has been deleted.</exception>
            <returns>An object that describes the access control permissions on the registry key represented by the current <see cref="T:Microsoft.Win32.RegistryKey" />.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetSubKeyNames">
            <summary>Retrieves an array of strings that contains all the subkey names.</summary>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred, for example the current key has been deleted.</exception>
            <returns>An array of strings that contains the names of the subkeys for the current key.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetValue(System.String)">
            <summary>Retrieves the value associated with the specified name. Returns <see langword="null" /> if the name/value pair does not exist in the registry.</summary>
            <param name="name">The name of the value to retrieve. This string is not case-sensitive.</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <returns>The value associated with <paramref name="name" />, or <see langword="null" /> if <paramref name="name" /> is not found.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)">
            <summary>Retrieves the value associated with the specified name. If the name is not found, returns the default value that you provide.</summary>
            <param name="name">The name of the value to retrieve. This string is not case-sensitive.</param>
            <param name="defaultValue">The value to return if <paramref name="name" /> does not exist.</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <returns>The value associated with <paramref name="name" />, with any embedded environment variables left unexpanded, or <paramref name="defaultValue" /> if <paramref name="name" /> is not found.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)">
            <summary>Retrieves the value associated with the specified name and retrieval options. If the name is not found, returns the default value that you provide.</summary>
            <param name="name">The name of the value to retrieve. This string is not case-sensitive.</param>
            <param name="defaultValue">The value to return if <paramref name="name" /> does not exist.</param>
            <param name="options">One of the enumeration values that specifies optional processing of the retrieved value.</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> is not a valid <see cref="T:Microsoft.Win32.RegistryValueOptions" /> value; for example, an invalid value is cast to <see cref="T:Microsoft.Win32.RegistryValueOptions" />.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <returns>The value associated with <paramref name="name" />, processed according to the specified <paramref name="options" />, or <paramref name="defaultValue" /> if <paramref name="name" /> is not found.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)">
            <summary>Retrieves the registry data type of the value associated with the specified name.</summary>
            <param name="name">The name of the value whose registry data type is to be retrieved. This string is not case-sensitive.</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.IO.IOException">The subkey that contains the specified value does not exist.  
  
 -or-  
  
 The name/value pair specified by <paramref name="name" /> does not exist.  
  
 This exception is not thrown on Windows 95, Windows 98, or Windows Millennium Edition.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <returns>The registry data type of the value associated with <paramref name="name" />.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.GetValueNames">
            <summary>Retrieves an array of strings that contains all the value names associated with this key.</summary>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred; for example, the current key has been deleted.</exception>
            <returns>An array of strings that contains the value names for the current key.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)">
            <summary>Opens a new <see cref="T:Microsoft.Win32.RegistryKey" /> that represents the requested key on the local machine with the specified view.</summary>
            <param name="hKey">The HKEY to open.</param>
            <param name="view">The registry view to use.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="hKey" /> or <paramref name="view" /> is invalid.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to perform this action.</exception>
            <returns>The requested registry key.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>Opens a new <see cref="T:Microsoft.Win32.RegistryKey" /> that represents the requested key on a remote machine.</summary>
            <param name="hKey">The HKEY to open, from the <see cref="T:Microsoft.Win32.RegistryHive" /> enumeration.</param>
            <param name="machineName">The remote machine.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="hKey" /> is invalid.</exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="machineName" /> is not found.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="machineName" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the proper permissions to perform this operation.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <returns>The requested registry key.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String,Microsoft.Win32.RegistryView)">
            <summary>Opens a new registry key that represents the requested key on a remote machine with the specified view.</summary>
            <param name="hKey">The HKEY to open from the <see cref="T:Microsoft.Win32.RegistryHive" /> enumeration.</param>
            <param name="machineName">The remote machine.</param>
            <param name="view">The registry view to use.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="hKey" /> or <paramref name="view" /> is invalid.</exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="machineName" /> is not found.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="machineName" /> is <see langword="null" />.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the required permissions to perform this operation.</exception>
            <returns>The requested registry key.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String)">
            <summary>Retrieves a subkey as read-only.</summary>
            <param name="name">The name or path of the subkey to open as read-only.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name" /> is <see langword="null" /></exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read the registry key.</exception>
            <returns>The subkey requested, or <see langword="null" /> if the operation failed.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>Retrieves the specified subkey for read or read/write access.</summary>
            <param name="name">The name or path of the subkey to create or open.</param>
            <param name="permissionCheck">One of the enumeration values that specifies whether the key is opened for read or read/write access.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name" /> is <see langword="null" /></exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="permissionCheck" /> contains an invalid value.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read the registry key.</exception>
            <returns>The subkey requested, or <see langword="null" /> if the operation failed.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistryRights)">
            <summary>Retrieves the specified subkey for read or read/write access, requesting the specified access rights.</summary>
            <param name="name">The name or path of the subkey to create or open.</param>
            <param name="permissionCheck">One of the enumeration values that specifies whether the key is opened for read or read/write access.</param>
            <param name="rights">A bitwise combination of enumeration values that specifies the desired security access.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name" /> is <see langword="null" /></exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="permissionCheck" /> contains an invalid value.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.Security.SecurityException">
                <paramref name="rights" /> includes invalid registry rights values.  
  
 -or-  
  
 The user does not have the requested permissions.</exception>
            <returns>The subkey requested, or <see langword="null" /> if the operation failed.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)">
            <summary>Retrieves a specified subkey, and specifies whether write access is to be applied to the key.</summary>
            <param name="name">Name or path of the subkey to open.</param>
            <param name="writable">Set to <see langword="true" /> if you need write access to the key.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to access the registry key in the specified mode.</exception>
            <returns>The subkey requested, or <see langword="null" /> if the operation failed.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)">
            <summary>Retrieves a subkey with the specified name and access rights. Available starting with .NET Framework 4.6.</summary>
            <param name="name">The name or path of the subkey to create or open.</param>
            <param name="rights">The rights for the registry key.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to access the registry key in the specified mode.</exception>
            <returns>The subkey requested, or <see langword="null" /> if the operation failed.</returns>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)">
            <summary>Applies Windows access control security to an existing registry key.</summary>
            <param name="registrySecurity">The access control security to apply to the current subkey.</param>
            <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a key with access control security, and the caller does not have <see cref="F:System.Security.AccessControl.RegistryRights.ChangePermissions" /> rights.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="registrySecurity" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)">
            <summary>Sets the specified name/value pair.</summary>
            <param name="name">The name of the value to store.</param>
            <param name="value">The data to be stored.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> is an unsupported data type.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and cannot be written to; for example, the key has not been opened with write access.  
  
 -or-  
  
 The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys.</exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>Sets the value of a name/value pair in the registry key, using the specified registry data type.</summary>
            <param name="name">The name of the value to be stored.</param>
            <param name="value">The data to be stored.</param>
            <param name="valueKind">The registry data type to use when storing the data.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The type of <paramref name="value" /> did not match the registry data type specified by <paramref name="valueKind" />, therefore the data could not be converted properly.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and cannot be written to; for example, the key has not been opened with write access.  
  
 -or-  
  
 The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys.</exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</exception>
        </member>
        <member name="M:Microsoft.Win32.RegistryKey.ToString">
            <summary>Retrieves a string representation of this key.</summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being accessed is closed (closed keys cannot be accessed).</exception>
            <returns>A string representing the key. If the specified key is invalid (cannot be found) then <see langword="null" /> is returned.</returns>
        </member>
        <member name="P:Microsoft.Win32.RegistryKey.Handle">
            <summary>Gets a <see cref="T:Microsoft.Win32.SafeHandles.SafeRegistryHandle" /> object that represents the registry key that the current <see cref="T:Microsoft.Win32.RegistryKey" /> object encapsulates.</summary>
            <exception cref="T:System.ObjectDisposedException">The registry key is closed. Closed keys cannot be accessed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred, such as deletion of the current key.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read the key.</exception>
            <returns>The handle to the registry key.</returns>
        </member>
        <member name="P:Microsoft.Win32.RegistryKey.Name">
            <summary>Retrieves the name of the key.</summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed).</exception>
            <returns>The absolute (qualified) name of the key.</returns>
        </member>
        <member name="P:Microsoft.Win32.RegistryKey.SubKeyCount">
            <summary>Retrieves the count of subkeys of the current key.</summary>
            <exception cref="T:System.Security.SecurityException">The user does not have read permission for the key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred, for example the current key has been deleted.</exception>
            <returns>The number of subkeys of the current key.</returns>
        </member>
        <member name="P:Microsoft.Win32.RegistryKey.ValueCount">
            <summary>Retrieves the count of values in the key.</summary>
            <exception cref="T:System.Security.SecurityException">The user does not have read permission for the key.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred, for example the current key has been deleted.</exception>
            <returns>The number of name/value pairs in the key.</returns>
        </member>
        <member name="P:Microsoft.Win32.RegistryKey.View">
            <summary>Gets the view that was used to create the registry key.</summary>
            <returns>The view that was used to create the registry key.  
  
 -or-  
  
 <see cref="F:Microsoft.Win32.RegistryView.Default" />, if no view was used.</returns>
        </member>
        <member name="T:Microsoft.Win32.RegistryKeyPermissionCheck">
            <summary>Specifies whether security checks are performed when opening registry keys and accessing their name/value pairs.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryKeyPermissionCheck.Default">
            <summary>The registry key inherits the mode of its parent. Security checks are performed when trying to access subkeys or values, unless the parent was opened with <see cref="F:Microsoft.Win32.RegistryKeyPermissionCheck.ReadSubTree" /> or <see cref="F:Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree" /> mode.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryKeyPermissionCheck.ReadSubTree">
            <summary>Security checks are not performed when accessing subkeys or values. A security check is performed when trying to open the current key, unless the parent was opened with <see cref="F:Microsoft.Win32.RegistryKeyPermissionCheck.ReadSubTree" /> or <see cref="F:Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree" />.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree">
            <summary>Security checks are not performed when accessing subkeys or values. A security check is performed when trying to open the current key, unless the parent was opened with <see cref="F:Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree" />.</summary>
        </member>
        <member name="T:Microsoft.Win32.RegistryOptions">
            <summary>Specifies options to use when creating a registry key.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryOptions.None">
            <summary>A non-volatile key. This is the default.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryOptions.Volatile">
            <summary>A volatile key. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded.</summary>
        </member>
        <member name="T:Microsoft.Win32.RegistryValueKind">
            <summary>Specifies the data types to use when storing values in the registry, or identifies the data type of a value in the registry.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.Binary">
            <summary>Binary data in any form. This value is equivalent to the Windows API registry data type REG_BINARY.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.DWord">
            <summary>A 32-bit binary number. This value is equivalent to the Windows API registry data type REG_DWORD.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.ExpandString">
            <summary>A null-terminated string that contains unexpanded references to environment variables, such as %PATH%, that are expanded when the value is retrieved. This value is equivalent to the Windows API registry data type REG_EXPAND_SZ.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.MultiString">
            <summary>An array of null-terminated strings, terminated by two null characters. This value is equivalent to the Windows API registry data type REG_MULTI_SZ.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.None">
            <summary>No data type.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.QWord">
            <summary>A 64-bit binary number. This value is equivalent to the Windows API registry data type REG_QWORD.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.String">
            <summary>A null-terminated string. This value is equivalent to the Windows API registry data type REG_SZ.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueKind.Unknown">
            <summary>An unsupported registry data type. For example, the Microsoft Windows API registry data type REG_RESOURCE_LIST is unsupported. Use this value to specify that the <see cref="M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)" /> method should determine the appropriate registry data type when storing a name/value pair.</summary>
        </member>
        <member name="T:Microsoft.Win32.RegistryValueOptions">
            <summary>Specifies optional behavior when retrieving name/value pairs from a registry key.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames">
            <summary>A value of type <see cref="F:Microsoft.Win32.RegistryValueKind.ExpandString" /> is retrieved without expanding its embedded environment variables.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryValueOptions.None">
            <summary>No optional behavior is specified.</summary>
        </member>
        <member name="T:Microsoft.Win32.RegistryView">
            <summary>Specifies which registry view to target on a 64-bit operating system.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryView.Default">
            <summary>The default view.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryView.Registry32">
            <summary>The 32-bit view.</summary>
        </member>
        <member name="F:Microsoft.Win32.RegistryView.Registry64">
            <summary>The 64-bit view.</summary>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafeRegistryHandle">
            <summary>Represents a safe handle to the Windows registry.</summary>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeRegistryHandle" /> class.</summary>
            <param name="preexistingHandle">An object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
                <see langword="true" /> to reliably release the handle during the finalization phase; <see langword="false" /> to prevent reliable release.</param>
        </member>
        <member name="T:System.Security.AccessControl.RegistryAccessRule">
            <summary>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
            <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</param>
            <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values indicating whether the rights are allowed or denied.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="registryRights" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="type" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identity" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="eventRights" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</summary>
            <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the rights allowed or denied.</param>
            <param name="inheritanceFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags specifying how access rights are inherited from other objects.</param>
            <param name="propagationFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags specifying how access rights are propagated to other objects.</param>
            <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="registryRights" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="type" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="inheritanceFlags" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="propagationFlags" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identity" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="registryRights" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
            <param name="identity">The name of the user or group the rule applies to.</param>
            <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</param>
            <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values indicating whether the rights are allowed or denied.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="registryRights" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="type" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="registryRights" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identity" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="identity" /> is a zero-length string.  
  
 -or-  
  
 <paramref name="identity" /> is longer than 512 characters.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</summary>
            <param name="identity">The name of the user or group the rule applies to.</param>
            <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</param>
            <param name="inheritanceFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags specifying how access rights are inherited from other objects.</param>
            <param name="propagationFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags specifying how access rights are propagated to other objects.</param>
            <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="registryRights" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="type" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="inheritanceFlags" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="propagationFlags" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="eventRights" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identity" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="identity" /> is a zero-length string.  
  
 -or-  
  
 <paramref name="identity" /> is longer than 512 characters.</exception>
        </member>
        <member name="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights">
            <summary>Gets the rights allowed or denied by the access rule.</summary>
            <returns>A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied by the access rule.</returns>
        </member>
        <member name="T:System.Security.AccessControl.RegistryAuditRule">
            <summary>Represents a set of access rights to be audited for a user or group. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.</summary>
            <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the kinds of access to audit.</param>
            <param name="inheritanceFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying whether the audit rule applies to subkeys of the current key.</param>
            <param name="propagationFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that affect the way an inherited audit rule is propagated to subkeys of the current key.</param>
            <param name="flags">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit success, failure, or both.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="eventRights" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="flags" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="inheritanceFlags" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="propagationFlags" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identity" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="registryRights" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.</summary>
            <param name="identity">The name of the user or group the rule applies to.</param>
            <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the kinds of access to audit.</param>
            <param name="inheritanceFlags">A combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags that specifies whether the audit rule applies to subkeys of the current key.</param>
            <param name="propagationFlags">A combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags that affect the way an inherited audit rule is propagated to subkeys of the current key.</param>
            <param name="flags">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit success, failure, or both.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="eventRights" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="flags" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="inheritanceFlags" /> specifies an invalid value.  
  
 -or-  
  
 <paramref name="propagationFlags" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="registryRights" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identity" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="identity" /> is a zero-length string.  
  
 -or-  
  
 <paramref name="identity" /> is longer than 512 characters.</exception>
        </member>
        <member name="P:System.Security.AccessControl.RegistryAuditRule.RegistryRights">
            <summary>Gets the access rights affected by the audit rule.</summary>
            <returns>A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values that indicates the rights affected by the audit rule.</returns>
        </member>
        <member name="T:System.Security.AccessControl.RegistryRights">
            <summary>Specifies the access control rights that can be applied to registry objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.ChangePermissions">
            <summary>The right to change the access rules and audit rules associated with a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.CreateLink">
            <summary>Reserved for system use.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.CreateSubKey">
            <summary>The right to create subkeys of a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.Delete">
            <summary>The right to delete a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.EnumerateSubKeys">
            <summary>The right to list the subkeys of a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.ExecuteKey">
            <summary>Same as <see cref="F:System.Security.AccessControl.RegistryRights.ReadKey" />.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.FullControl">
            <summary>The right to exert full control over a registry key, and to modify its access rules and audit rules.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.Notify">
            <summary>The right to request notification of changes on a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.QueryValues">
            <summary>The right to query the name/value pairs in a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.ReadKey">
            <summary>The right to query the name/value pairs in a registry key, to request notification of changes, to enumerate its subkeys, and to read its access rules and audit rules.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.ReadPermissions">
            <summary>The right to open and copy the access rules and audit rules for a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.SetValue">
            <summary>The right to create, delete, or set name/value pairs in a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.TakeOwnership">
            <summary>The right to change the owner of a registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.RegistryRights.WriteKey">
            <summary>The right to create, delete, and set the name/value pairs in a registry key, to create or delete subkeys, to request notification of changes, to enumerate its subkeys, and to read its access rules and audit rules.</summary>
        </member>
        <member name="T:System.Security.AccessControl.RegistrySecurity">
            <summary>Represents the Windows access control security for a registry key. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class with default values.</summary>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</summary>
            <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</param>
            <param name="accessMask">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to allow or deny, cast to an integer.</param>
            <param name="isInherited">A Boolean value specifying whether the rule is inherited.</param>
            <param name="inheritanceFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</param>
            <param name="propagationFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <paramref name="inheritanceFlags" /> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identityReference" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="accessMask" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
            <returns>A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> object representing the specified rights for the specified user.</returns>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)">
            <summary>Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.</summary>
            <param name="rule">The access control rule to add.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)">
            <summary>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</summary>
            <param name="rule">The audit rule to add. The user specified by this rule determines the search.</param>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</summary>
            <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</param>
            <param name="accessMask">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to audit, cast to an integer.</param>
            <param name="isInherited">A Boolean value specifying whether the rule is inherited.</param>
            <param name="inheritanceFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</param>
            <param name="propagationFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <paramref name="inheritanceFlags" /> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="flags">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit successful access, failed access, or both.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> specifies an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identityReference" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="accessMask" /> is zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
            <returns>A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> object representing the specified audit rule for the specified user, with the specified flags. The return type of the method is the base class, <see cref="T:System.Security.AccessControl.AuditRule" />, but the return value can be cast safely to the derived class.</returns>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)">
            <summary>Searches for an access control rule with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
            <returns>
                <see langword="true" /> if a compatible rule is found; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)">
            <summary>Searches for all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule and, if found, removes them.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)">
            <summary>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</summary>
            <param name="rule">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to remove.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)">
            <summary>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
            <returns>
                <see langword="true" /> if a compatible rule is found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)">
            <summary>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)">
            <summary>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</summary>
            <param name="rule">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to be removed.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
            <summary>Removes all access control rules with the same user as the specified rule, regardless of <see cref="T:System.Security.AccessControl.AccessControlType" />, and then adds the specified rule.</summary>
            <param name="rule">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add. The user specified by this rule determines the rules to remove before this rule is added.</param>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)">
            <summary>Removes all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule, and then adds the specified rule.</summary>
            <param name="rule">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add. The user and <see cref="T:System.Security.AccessControl.AccessControlType" /> of this rule determine the rules to remove before this rule is added.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)">
            <summary>Removes all audit rules with the same user as the specified rule, regardless of the <see cref="T:System.Security.AccessControl.AuditFlags" /> value, and then adds the specified rule.</summary>
            <param name="rule">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to add. The user specified by this rule determines the rules to remove before this rule is added.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="rule" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:System.Security.AccessControl.RegistrySecurity.AccessRightType">
            <summary>Gets the enumeration type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rights.</summary>
            <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryRights" /> enumeration.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType">
            <summary>Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rules.</summary>
            <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType">
            <summary>Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent audit rules.</summary>
            <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializationException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializationException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializationException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message, JSON path and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
                <para>
            Returns detailed information about the schema exception.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
                <para>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Buffers.ArrayPool`1">
            <summary>Provides a resource pool that enables reusing instances of type <see cref="T[]" />.</summary>
            <typeparam name="T">The type of the objects that are in the resource pool.</typeparam>
        </member>
        <member name="M:System.Buffers.ArrayPool`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Buffers.ArrayPool`1" /> class.</summary>
        </member>
        <member name="M:System.Buffers.ArrayPool`1.Create">
            <summary>Creates a new instance of the <see cref="T:System.Buffers.ArrayPool`1" /> class.</summary>
            <returns>A new instance of the <see cref="System.Buffers.ArrayPool`1" /> class.</returns>
        </member>
        <member name="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
            <summary>Creates a new instance of the <see cref="T:System.Buffers.ArrayPool`1" /> class using the specifed configuration.</summary>
            <param name="maxArrayLength">The maximum length of an array instance that may be stored in the pool.</param>
            <param name="maxArraysPerBucket">The maximum number of array instances that may be stored in each bucket in the pool. The pool groups arrays of similar lengths into buckets for faster access.</param>
            <returns>A new instance of the <see cref="System.Buffers.ArrayPool`1" /> class with the specified configuration.</returns>
        </member>
        <member name="M:System.Buffers.ArrayPool`1.Rent(System.Int32)">
            <summary>Retrieves a buffer that is at least the requested length.</summary>
            <param name="minimumLength">The minimum length of the array.</param>
            <returns>An array of type <see cref="T[]" /> that is at least <paramref name="minimumLength">minimumLength</paramref> in length.</returns>
        </member>
        <member name="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
            <summary>Returns an array to the pool that was previously obtained using the <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /> method on the same <see cref="T:System.Buffers.ArrayPool`1" /> instance.</summary>
            <param name="array">A buffer to return to the pool that was previously obtained using the <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /> method.</param>
            <param name="clearArray">Indicates whether the contents of the buffer should be cleared before reuse. If <paramref name="clearArray">clearArray</paramref> is set to true, and if the pool will store the buffer to enable subsequent reuse, the <see cref="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)" /> method will clear the <paramref name="array">array</paramref> of its contents so that a subsequent caller using the <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /> method will not see the content of the previous caller. If <paramref name="clearArray">clearArray</paramref> is set to false or if the pool will release the buffer, the array&amp;#39;s contents are left unchanged.</param>
        </member>
        <member name="P:System.Buffers.ArrayPool`1.Shared">
            <summary>Gets a shared <see cref="T:System.Buffers.ArrayPool`1" /> instance.</summary>
            <returns>A shared <see cref="System.Buffers.ArrayPool`1" /> instance.</returns>
        </member>
        <member name="T:System.Configuration.DictionarySectionHandler">
            <summary>
             Simple dictionary config factory
             config is a dictionary mapping key-&gt;value
            
                 &lt;add key="name" value="text"&gt;  sets key=text
                 &lt;remove key="name"&gt;            removes the definition of key
                 &lt;clear&gt;                        removes all definitions
            
             </summary>
        </member>
        <member name="M:System.Configuration.DictionarySectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Given a partially composed config object (possibly null)
            and some input from the config system, return a
            further partially composed config object
            </summary>
        </member>
        <member name="P:System.Configuration.DictionarySectionHandler.KeyAttributeName">
            <summary>
            Make the name of the key attribute configurable by derived classes.
            </summary>
        </member>
        <member name="P:System.Configuration.DictionarySectionHandler.ValueAttributeName">
            <summary>
            Make the name of the value attribute configurable by derived classes.
            </summary>
        </member>
        <member name="T:System.Configuration.Internal.DummyDisposable">
            <summary>
            Used to satisfy legacy interfaces.
            </summary>
        </member>
        <member name="M:System.Configuration.Internal.WriteFileContext.ReplaceFile(System.String,System.String)">
            <summary>
            Replace one file with another, retrying if locked.
            </summary>
        </member>
        <member name="T:System.Configuration.IPersistComponentSettings">
            <summary>
            Components should implement this interface if they want to persist custom settings
            in a hosting application. This interface allows the application author to tell a control
            whether to persist, when to load, save etc.
            </summary>
        </member>
        <member name="P:System.Configuration.IPersistComponentSettings.SaveSettings">
            <summary>
            Indicates to the implementor that settings should be persisted.
            </summary>
        </member>
        <member name="P:System.Configuration.IPersistComponentSettings.SettingsKey">
            <summary>
            Unique key that identifies an individual instance of a settings group(s). This key is needed
            to identify which instance of a component owns a given group(s) of settings. Usually, the component
            will frame its own key, but this property allows the hosting application to override it if necessary.
            </summary>
        </member>
        <member name="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
            <summary>
            Tells the component to load its settings.
            </summary>
        </member>
        <member name="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
            <summary>
            Tells the component to save its settings.
            </summary>
        </member>
        <member name="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings">
            <summary>
            Tells the component to reset its settings. Typically, the component can call Reset on its settings class(es).
            </summary>
        </member>
        <member name="T:System.Configuration.ApplicationSettingsBase">
            <summary>
            Base settings class for client applications.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.#ctor">
            <summary>
            Default constructor without a concept of "owner" component.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Constructor that takes an IComponent. The IComponent acts as the "owner" of this settings class. One
            of the things we do is query the component's site to see if it has a SettingsProvider service. If it
            does, we allow it to override the providers specified in the metadata.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.String)">
            <summary>
            Convenience overload that takes the settings key
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)">
            <summary>
            Convenience overload that takes the owner component and settings key.
            </summary>
        </member>
        <member name="P:System.Configuration.ApplicationSettingsBase.Context">
            <summary>
            The Context to pass on to the provider. Currently, this will just contain the settings group name.
            </summary>
        </member>
        <member name="P:System.Configuration.ApplicationSettingsBase.Properties">
            <summary>
            The SettingsBase class queries this to get the collection of SettingsProperty objects. We reflect over
            the properties defined on the current object's type and use the metadata on those properties to form
            this collection.
            </summary>
        </member>
        <member name="P:System.Configuration.ApplicationSettingsBase.PropertyValues">
            <summary>
            Just overriding to add attributes.
            </summary>
        </member>
        <member name="P:System.Configuration.ApplicationSettingsBase.Providers">
            <summary>
            Provider collection
            </summary>
        </member>
        <member name="P:System.Configuration.ApplicationSettingsBase.SettingsKey">
            <summary>
            Derived classes should use this to uniquely identify separate instances of settings classes.
            </summary>
        </member>
        <member name="E:System.Configuration.ApplicationSettingsBase.PropertyChanged">
            <summary>
            Fires when the value of a setting is changed. (INotifyPropertyChanged implementation.)
            </summary>
        </member>
        <member name="E:System.Configuration.ApplicationSettingsBase.SettingChanging">
            <summary>
            Fires when the value of a setting is about to change. This is a cancellable event.
            </summary>
        </member>
        <member name="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded">
            <summary>
            Fires when settings are retrieved from a provider. It fires once for each provider.
            </summary>
        </member>
        <member name="E:System.Configuration.ApplicationSettingsBase.SettingsSaving">
            <summary>
            Fires when Save() is called. This is a cancellable event.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)">
            <summary>
            Used in conjunction with Upgrade - retrieves the previous value of a setting from the provider.
            Provider must implement IApplicationSettingsProvider to support this.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Fires the PropertyChanged event.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)">
            <summary>
            Fires the SettingChanging event.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)">
            <summary>
            Fires the SettingsLoaded event.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fires the SettingsSaving event.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.Reload">
            <summary>
            Causes a reload to happen on next setting access, by clearing the cached values.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.Reset">
            <summary>
            Calls Reset on the providers.
            Providers must implement IApplicationSettingsProvider to support this.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.Save">
            <summary>
            Overridden from SettingsBase to support validation event.
            </summary>
        </member>
        <member name="P:System.Configuration.ApplicationSettingsBase.Item(System.String)">
            <summary>
            Overridden from SettingsBase to support validation event.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.Upgrade">
            <summary>
            Called when the app is upgraded so that we can instruct the providers to upgrade their settings.
            Providers must implement IApplicationSettingsProvider to support this.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.CreateSetting(System.Reflection.PropertyInfo)">
            <summary>
            Creates a SettingsProperty object using the metadata on the given property
            and returns it.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.EnsureInitialized">
            <summary>
            Ensures this class is initialized. Initialization involves reflecting over properties and building
            a list of SettingsProperty's.
            </summary>
        </member>
        <member name="P:System.Configuration.ApplicationSettingsBase.Initializer">
            <summary>
            Returns a SettingsProperty used to initialize settings. We initialize a setting with values
            derived from class level attributes, if present. Otherwise, we initialize to
            reasonable defaults.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.GetPropertiesForProvider(System.Configuration.SettingsProvider)">
            <summary>
            Gets all the settings properties for this provider.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.GetPropertyValue(System.String)">
            <summary>
            Retrieves the value of a setting. We need this method so we can fire the SettingsLoaded event
            when settings are loaded from the providers.Ideally, this should be fired from SettingsBase,
            but unfortunately that will not happen in Whidbey. Instead, we check to see if the value has already
            been retrieved. If not, we fire the load event, since we expect SettingsBase to load all the settings
            from this setting's provider.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.IsFirstRunOfClickOnceApp">
            <summary>
            Returns true if this is a clickonce deployed app and this is the first run of the app
            since deployment or last upgrade.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.IsClickOnceDeployed(System.AppDomain)">
            <summary>
            Returns true if this is a clickonce deployed app.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.SettingsFilter(System.Reflection.PropertyInfo[])">
            <summary>
            Only those settings class properties that have a SettingAttribute on them are
            treated as settings. This routine filters out other properties.
            </summary>
        </member>
        <member name="M:System.Configuration.ApplicationSettingsBase.ResetProviders">
            <summary>
            Resets the provider collection. This needs to be called when providers change after
            first being set.
            </summary>
        </member>
        <member name="T:System.Configuration.ApplicationScopedSettingAttribute">
            <summary>
            Indicates that a setting is to be stored on a per-application basis.
            </summary>
        </member>
        <member name="T:System.Configuration.AppSettingsReader">
            <summary>
                The AppSettingsReader class provides a wrapper for System.Configuration.ConfigurationManager.AppSettings
                which provides a single method for reading values from the config file of a particular type.
            </summary>
        </member>
        <member name="M:System.Configuration.AppSettingsReader.GetValue(System.String,System.Type)">
            <summary>
            Gets the value for specified key from ConfigurationManager.AppSettings, and returns
            an object of the specified type containing the value from the config file.  If the key
            isn't in the config file, or if it is not a valid value for the given type, it will
            throw an exception with a descriptive message so the user can make the appropriate
            change
            </summary>
        </member>
        <member name="M:System.Configuration.BaseConfigurationRecord.AllowExeDefinitionToEnum(System.String,System.Configuration.XmlUtil)">
            <summary>
            Translate an ExeDefinition string from the Declaration in a file
            to the appropriate enumeration
            </summary>
            <param name="allowExeDefinition">string representation of value</param>
            <param name="xmlUtil">[optional] - can provide better error</param>
        </member>
        <member name="M:System.Configuration.BaseConfigurationRecord.AddImplicitSections(System.Collections.Hashtable)">
            <summary>
            Add implicit sections to the specified factory list.
            </summary>
            <param name="factoryList">The factory list to add to. If null, adds to the current record's factory list.</param>
        </member>
        <member name="T:System.Configuration.ClientSettingsSection">
            <summary>
            ConfigurationSection class for sections that store client settings.
            </summary>
        </member>
        <member name="T:System.Configuration.ClientSettingsStore">
            <summary>
             This class abstracts the details of config system away from the LocalFileSettingsProvider. It talks to
             the configuration API and the relevant Sections to read and write settings.
             It understands sections of type ClientSettingsSection.
            
             NOTE: This API supports reading from app.exe.config and user.config, but writing only to
                   user.config.
             </summary>
        </member>
        <member name="T:System.Configuration.ClientSettingsStore.ClientSettingsConfigurationHost">
            <summary>
            A private configuration host that we use to write settings to config. We need this so we
            can enforce a quota on the size of stuff written out.
            </summary>
        </member>
        <member name="P:System.Configuration.ClientSettingsStore.ClientSettingsConfigurationHost.ClientHost">
            <summary>
            ClientConfigurationHost implements this - a way of getting some info from it without
            depending too much on its internals.
            </summary>
        </member>
        <member name="M:System.Configuration.ClientSettingsStore.ClientSettingsConfigurationHost.InitForConfiguration(System.String@,System.String@,System.String@,System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
            <summary>
            We delegate this to the ClientConfigurationHost. The only thing we need to do here is to
            build a configPath from the ConfigurationUserLevel we get passed in.
            </summary>
        </member>
        <member name="M:System.Configuration.ClientSettingsStore.ClientSettingsConfigurationHost.OpenStreamForRead(System.String)">
            <summary>
            If the stream we are asked for represents a config file that we know about, we ask
            the host to assert appropriate permissions.
            </summary>
        </member>
        <member name="M:System.Configuration.ClientSettingsStore.ClientSettingsConfigurationHost.WriteCompleted(System.String,System.Boolean,System.Object)">
            <summary>
            If this is a stream that represents a user.config file that we know about, we ask
            the host to assert appropriate permissions.
            </summary>
        </member>
        <member name="T:System.Configuration.StoredSetting">
            <summary>
            The ClientSettingsStore talks to the LocalFileSettingsProvider through a dictionary which maps from
            setting names to StoredSetting structs. This struct contains the relevant information.
            </summary>
        </member>
        <member name="T:System.Configuration.ConfigurationCollectionAttribute">
            <summary>
            Used on classes derived from ConfigurationElementCollection. Specifies the collection item type and
            verbs used for add/remove/clear.
            </summary>
        </member>
        <member name="T:System.Configuration.ConfigurationException">
            <summary>
                A config exception can contain a filename (of a config file) and a line number (of the location in the file in
                which a
                problem was encountered). Section handlers should throw this exception (or subclasses) together with filename and
                line
                number information where possible.
            </summary>
        </member>
        <member name="T:System.Configuration.ConfigurationFileMap">
            <summary>
            Holds the configuration file mapping for machine.config. It is the base class for
            ExeConfigurationFileMap and WebConfigurationFileMap.
            </summary>
        </member>
        <member name="M:System.Configuration.ConfigurationManager.PreloadConfiguration(System.Configuration.Configuration)">
            <summary>
                Recursively loads configuration section groups and sections belonging to a configuration object.
            </summary>
        </member>
        <member name="T:System.Configuration.DefaultSettingValueAttribute">
            <summary>
            Indicates to the provider what default value to use for this setting when no stored value
            is found. The value should be encoded into a string and is interpreted based on the SerializeAs
            value for this setting. For example, if SerializeAs is Xml, the default value will be
            "stringified" Xml.
            </summary>
        </member>
        <member name="M:System.Configuration.DefaultSettingValueAttribute.#ctor(System.String)">
            <summary>
            Constructor takes the default value as string.
            </summary>
        </member>
        <member name="P:System.Configuration.DefaultSettingValueAttribute.Value">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:System.Configuration.ElementInformation.LineNumber">
            <summary>
            The line number or 0 if no source.
            </summary>
        </member>
        <member name="F:System.Configuration.ExceptionAction.NonSpecific">
            <summary>
            Not specific to a particular section, nor a global schema error
            </summary>
        </member>
        <member name="F:System.Configuration.ExceptionAction.Local">
            <summary>
            Error specific to a particular section
            </summary>
        </member>
        <member name="F:System.Configuration.ExceptionAction.Global">
            <summary>
            Error in the global (file) schema
            </summary>
        </member>
        <member name="T:System.Configuration.IApplicationSettingsProvider">
            <summary>
            This interface is an extension to SettingsProvider that a provider can implement
            to support additional functionality for settings classes that derive from ApplicationSettingsBase.
            </summary>
        </member>
        <member name="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
            <summary>
            Retrieves the previous value of a given SettingsProperty. This is used in conjunction with Upgrade.
            </summary>
        </member>
        <member name="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)">
            <summary>
            Resets all settings to their "default" values.
            </summary>
        </member>
        <member name="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Indicates to the provider that the app has been upgraded. This is a chance for the provider to upgrade
            its stored settings as appropriate.
            </summary>
        </member>
        <member name="T:System.Configuration.IConfigurationSectionHandler">
            <summary>
                The IConfigurationSectionHandler interface defines the contract that all configuration section handlers
                must implement in order to participate in the resolution of configuration settings.
                Composes and creates config objects.
                This interface is implemented by config providers. Classes implementing IConfigurationSectionHandler
                define the rules for cooking XML config into usable objects. The cooked objects can be of arbitrary
                type.
                Configuration is composable (e.g., config in a child directory is layered over config in a parent
                directory), so, IConfigurationSectionHandler is supplied with the parent config as well as any number of
                XML fragments.
            </summary>
        </member>
        <member name="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
                The function is responsible for inspecting "section", "context", and "parent", and creating
                a config object.
                Note that "parent" is guaranteed to be an object that was returned from a Create call on the
                same IConfigurationSectionHandler implementation. (E.g., if Create returns a Hashtable, then "parent"
                is always a Hashtable if it's non-null.)
                Returned objects must be immutable. In particular, it's important that the "parent" object
                being passed in is not altered: if a modification must be made, then it must be cloned before
                it is modified.
            </summary>
            <param name="parent">the object inherited from parent path</param>
            <param name="configContext">reserved, in ASP.NET used to convey virtual path of config being evaluated</param>
            <param name="section">the xml node rooted at the section to handle</param>
            <returns>a new config object</returns>
        </member>
        <member name="M:System.Configuration.IgnoreSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
                Given a partially composed config object (possibly null) and some input from the config system,
                return a further partially composed config object.
            </summary>
        </member>
        <member name="T:System.Configuration.ISettingsProviderService">
            <summary>
            The IPersistComponentSettings interface enables components hosted in an application to persist their
            settings in a manner transparent to the application. However, in some cases, the application may want to
            override the provider(s) specified by a component. For example, at design time, we may want to persist
            settings differently. This service enables this scenario. The ApplicationSettingsBase class queries this
            service from the owner component's site.
            </summary>
        </member>
        <member name="M:System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)">
            <summary>
            Queries the service whether it wants to override the provider for the given SettingsProperty. If it
            doesn't want to, it should return null, in which the provider will remain unchanged.
            </summary>
        </member>
        <member name="T:System.Configuration.LocalFileSettingsProvider">
            <summary>
            This is a provider used to store configuration settings locally for client applications.
            </summary>
        </member>
        <member name="P:System.Configuration.LocalFileSettingsProvider.ApplicationName">
            <summary>
            Abstract SettingsProvider property.
            </summary>
        </member>
        <member name="P:System.Configuration.LocalFileSettingsProvider.Store">
            <summary>
            We maintain a single instance of the ClientSettingsStore per instance of provider.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Abstract ProviderBase method.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Abstract SettingsProvider method
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
                Abstract SettingsProvider method
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)">
            <summary>
                Implementation of IClientSettingsProvider.Reset. Resets user scoped settings to the values
                in app.exe.config, does nothing for app scoped settings.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
               Implementation of IClientSettingsProvider.Upgrade.
               Tries to locate a previous version of the user.config file. If found, it migrates matching settings.
               If not, it does nothing.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
            <summary>
            Implementation of IClientSettingsProvider.GetPreviousVersion.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.GetPreviousConfigFileName(System.Boolean)">
            <summary>
            Locates the previous version of user.config, if present. The previous version is determined
            by walking up one directory level in the *UserConfigPath and searching for the highest version
            number less than the current version.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.GetSectionName(System.Configuration.SettingsContext)">
            <summary>
            Gleans information from the SettingsContext and determines the name of the config section.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.GetSettingValuesFromFile(System.String,System.String,System.Boolean,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Retrieves the values of settings from the given config file (as opposed to using
            the configuration for the current context)
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.IsRoamingSetting(System.Configuration.SettingsProperty)">
            <summary>
            Indicates whether a setting is roaming or not.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.IsUserSetting(System.Configuration.SettingsProperty)">
            <summary>
            This provider needs settings to be marked with either the UserScopedSettingAttribute or the
            ApplicationScopedSettingAttribute. This method determines whether this setting is user-scoped
            or not. It will throw if none or both of the attributes are present.
            </summary>
        </member>
        <member name="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Boolean)">
            <summary>
            Private version of upgrade that uses isRoaming to determine which config file to use.
            </summary>
        </member>
        <member name="T:System.Configuration.NameValueFileSectionHandler">
            <summary>
            This section handler allows &lt;appSettings file="user.config" /&gt;
            The file pointed to by the file= attribute is read as if it is
            an appSettings section in the config file.
            Note: the user.config file must have its root element match the
            section referring to it.  So if appSettings has a file="user.config"
            attribute the root element in user.config must also be named appSettings.
            </summary>
        </member>
        <member name="T:System.Configuration.NameValueSectionHandler">
            <summary>
            Simple dictionary config factory
            </summary>
        </member>
        <member name="P:System.Configuration.NameValueSectionHandler.KeyAttributeName">
            <summary>
                <para>[To be supplied.]</para>
            </summary>
        </member>
        <member name="P:System.Configuration.NameValueSectionHandler.ValueAttributeName">
            <summary>
                <para>[To be supplied.]</para>
            </summary>
        </member>
        <member name="P:System.Configuration.PropertyInformation.LineNumber">
            <summary>
            Line number or 0 if there is no source.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingAttribute">
            <summary>
            Use this attribute to mark properties on a settings class that are to be treated
            as settings. ApplicationSettingsBase will ignore all properties not marked with
            this or a derived attribute.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingChangingEventArgs">
            <summary>
            Event args for the SettingChanging event.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingChangingEventHandler">
            <summary>
            Event handler for the SettingChanging event.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsDescriptionAttribute">
            <summary>
            Description for a particular setting.
            </summary>
        </member>
        <member name="M:System.Configuration.SettingsDescriptionAttribute.#ctor(System.String)">
            <summary>
            Constructor takes the description string.
            </summary>
        </member>
        <member name="P:System.Configuration.SettingsDescriptionAttribute.Description">
            <summary>
            Description string.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsGroupDescriptionAttribute">
            <summary>
            Description for a particular settings group.
            </summary>
        </member>
        <member name="M:System.Configuration.SettingsGroupDescriptionAttribute.#ctor(System.String)">
            <summary>
            Constructor takes the description string.
            </summary>
        </member>
        <member name="P:System.Configuration.SettingsGroupDescriptionAttribute.Description">
            <summary>
            Description string.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsGroupNameAttribute">
            <summary>
            Name of a particular settings group.
            </summary>
        </member>
        <member name="M:System.Configuration.SettingsGroupNameAttribute.#ctor(System.String)">
            <summary>
            Constructor takes the group name.
            </summary>
        </member>
        <member name="P:System.Configuration.SettingsGroupNameAttribute.GroupName">
            <summary>
            Name of the settings group.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsLoadedEventArgs">
            <summary>
            Event args for the SettingLoaded event.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsLoadedEventHandler">
            <summary>
            Event handler for the SettingsLoaded event.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsManageabilityAttribute">
            <summary>
            Indicates the SettingsManageability for a group of/individual setting.
            </summary>
        </member>
        <member name="M:System.Configuration.SettingsManageabilityAttribute.#ctor(System.Configuration.SettingsManageability)">
            <summary>
            Constructor takes a SettingsManageability enum value.
            </summary>
        </member>
        <member name="P:System.Configuration.SettingsManageabilityAttribute.Manageability">
            <summary>
            SettingsManageability value to use
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsProviderAttribute">
            <summary>
            Indicates the provider associated with a group of/individual setting.
            </summary>
        </member>
        <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.String)">
            <summary>
            Constructor takes the provider's assembly qualified type name.
            </summary>
        </member>
        <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructor takes the provider's type.
            </summary>
        </member>
        <member name="P:System.Configuration.SettingsProviderAttribute.ProviderTypeName">
            <summary>
            Type name of the provider
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsSavingEventHandler">
            <summary>
            Event handler for the SettingsSaving event.
            </summary>
        </member>
        <member name="T:System.Configuration.SettingsSerializeAsAttribute">
            <summary>
            Indicates the SettingsSerializeAs for a group of/individual setting.
            </summary>
        </member>
        <member name="M:System.Configuration.SettingsSerializeAsAttribute.#ctor(System.Configuration.SettingsSerializeAs)">
            <summary>
            Constructor takes a SettingsSerializeAs enum value.
            </summary>
        </member>
        <member name="P:System.Configuration.SettingsSerializeAsAttribute.SerializeAs">
            <summary>
            SettingsSerializeAs value to use
            </summary>
        </member>
        <member name="T:System.Configuration.SingleTagSectionHandler">
             Single-tag dictionary config factory
            
             Use for tags of the form: &lt;MySingleTag key1="value1" ... keyN="valueN"/&gt;
        </member>
        <member name="M:System.Configuration.SingleTagSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
             Create
            
             Given a partially composed config object (possibly null)
             and some input from the config system, return a
             further partially composed config object
        </member>
        <member name="T:System.Configuration.SpecialSetting">
            <summary>
            Indicates settings that are to be treated "specially".
            </summary>
        </member>
        <member name="T:System.Configuration.SpecialSettingAttribute">
            <summary>
            Indicates the SpecialSetting for a group of/individual settings.
            </summary>
        </member>
        <member name="P:System.Configuration.SpecialSettingAttribute.SpecialSetting">
            <summary>
            SpecialSetting value to use
            </summary>
        </member>
        <member name="M:System.Configuration.TypeUtil.GetImplicitType(System.String)">
            <summary>
            Find type references that used to be found without assembly names
            </summary>
        </member>
        <member name="T:System.Configuration.UserScopedSettingAttribute">
            <summary>
                Indicates that a setting is to be stored on a per-user basis.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.SkipToNextElement">
            <summary>
            Skip this element and its children, then read to next start element,
            or until we hit end of file.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.StrictReadToNextElement(System.Configuration.ExceptionAction)">
            <summary>
            Read to the next start element, and verify that all XML nodes read are permissible.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.StrictSkipToNextElement(System.Configuration.ExceptionAction)">
            <summary>
            Skip this element and its children, then read to next start element, or until we hit
            end of file. Verify that nodes that are read after the skipped element are permissible.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.StrictSkipToOurParentsEndElement(System.Configuration.ExceptionAction)">
            <summary>
            Skip until we hit the end element for our parent, and verify that nodes at the
            parent level are permissible.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.VerifyIgnorableNodeType(System.Configuration.ExceptionAction)">
            <summary>
            Add an error if the node type is not permitted by the configuration schema.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.VerifyNoUnrecognizedAttributes(System.Configuration.ExceptionAction)">
            <summary>
            Add an error if there are attributes that have not been examined, and are therefore unrecognized.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.VerifyRequiredAttribute(System.Object,System.String,System.Configuration.ExceptionAction)">
            <summary>
            Add an error if the retrieved attribute is null, and therefore not present.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.VerifyAndGetBooleanAttribute(System.Configuration.ExceptionAction,System.Boolean,System.Boolean@)">
            <summary>
            Verify and Retrieve the Boolean Attribute.  If it is not
            a valid value then log an error and set the value to a given default.
            </summary>
        </member>
        <member name="M:System.Configuration.XmlUtil.FormatXmlElement(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Format an Xml element to be written to the config file.
            </summary>
            <param name="xmlElement">the element</param>
            <param name="linePosition">start position of the element</param>
            <param name="indent">indent for each depth</param>
            <param name="skipFirstIndent">skip indent for the first element?</param>
            <returns />
        </member>
        <member name="T:System.Configuration.NoSettingsVersionUpgradeAttribute">
            <summary>
            Indicates that the provider should disable any logic that gets invoked when an application
            upgrade is detected.
            </summary>
        </member>
        <member name="T:System.Security.IdentityHelper">
            <summary>
            Helper class for getting identity hashes for types that used
            to live in Assembly Evidence.
            </summary>
        </member>
        <member name="M:System.Security.IdentityHelper.GetNormalizedUriHash(System.Uri)">
            <summary>
            Gives a hash equivalent to what Url.Normalize() gives.
            </summary>
        </member>
        <member name="M:System.Security.IdentityHelper.GetNormalizedStrongNameHash(System.Reflection.AssemblyName)">
            <summary>
            Uses the AssemblyName's public key to generate a hash equivalent to what
            StrongName.Normalize() gives.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
                <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute" />. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" />
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId" />
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target" /> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId" /> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="P:System.SR.Parameter_Invalid">
            <summary>The parameter '{0}' is invalid.</summary>
        </member>
        <member name="P:System.SR.Parameter_NullOrEmpty">
            <summary>The string parameter '{0}' cannot be null or empty.</summary>
        </member>
        <member name="P:System.SR.Property_NullOrEmpty">
            <summary>The value assigned to property '{0}' cannot be null or empty.</summary>
        </member>
        <member name="P:System.SR.Property_Invalid">
            <summary>The value assigned to property '{0}' is invalid.</summary>
        </member>
        <member name="P:System.SR.Unexpected_Error">
            <summary>An unexpected error occurred in '{0}'.</summary>
        </member>
        <member name="P:System.SR.Wrapped_exception_message">
            <summary>{0}: {1}</summary>
        </member>
        <member name="P:System.SR.Config_error_loading_XML_file">
            <summary>An error occurred loading a configuration file</summary>
        </member>
        <member name="P:System.SR.Config_exception_creating_section_handler">
            <summary>An error occurred creating the configuration section handler for {0}</summary>
        </member>
        <member name="P:System.SR.Config_exception_creating_section">
            <summary>An error occurred creating the configuration section for {0}</summary>
        </member>
        <member name="P:System.SR.Config_tag_name_invalid">
            <summary>Invalid format for a section or section group name</summary>
        </member>
        <member name="P:System.SR.Config_add_configurationsection_already_added">
            <summary>Cannot add a ConfigurationSection that already belongs to the Configuration.</summary>
        </member>
        <member name="P:System.SR.Config_add_configurationsection_already_exists">
            <summary>Cannot add a ConfigurationSection with the same name that already exists.</summary>
        </member>
        <member name="P:System.SR.Config_add_configurationsection_in_location_config">
            <summary>Cannot add a ConfigurationSection to a Configuration with a location.</summary>
        </member>
        <member name="P:System.SR.Config_add_configurationsectiongroup_already_added">
            <summary>Cannot add a ConfigurationSectionGroup that already belongs to the Configuration.</summary>
        </member>
        <member name="P:System.SR.Config_add_configurationsectiongroup_already_exists">
            <summary>Cannot add a ConfigurationSectionGroup with the same name that already exists.</summary>
        </member>
        <member name="P:System.SR.Config_add_configurationsectiongroup_in_location_config">
            <summary>Cannot add a ConfigurationSectionGroup to a Configuration with a location.</summary>
        </member>
        <member name="P:System.SR.Config_allow_exedefinition_error_application">
            <summary>It is an error to use a section registered as allowExeDefinition='MachineToApplication' beyond the application, in the user's config.  (This is the default behavior if not specified)</summary>
        </member>
        <member name="P:System.SR.Config_allow_exedefinition_error_machine">
            <summary>It is an error to use a section registered as allowExeDefinition='MachineOnly' beyond machine.config.</summary>
        </member>
        <member name="P:System.SR.Config_allow_exedefinition_error_roaminguser">
            <summary>It is an error to use a section registered as allowExeDefinition='MachineToRoamingUser' beyond the roaming user config, in the local user config.</summary>
        </member>
        <member name="P:System.SR.Config_appsettings_declaration_invalid">
            <summary>The configuration section 'appSettings' has an unexpected declaration.</summary>
        </member>
        <member name="P:System.SR.Config_base_attribute_locked">
            <summary>The attribute '{0}' has been locked in a higher level configuration.</summary>
        </member>
        <member name="P:System.SR.Config_base_collection_item_locked_cannot_clear">
            <summary>A collection item has been locked in a higher level configuration. The collection may not be cleared.</summary>
        </member>
        <member name="P:System.SR.Config_base_collection_item_locked">
            <summary>The collection item has been locked in a higher level configuration and may not be changed.</summary>
        </member>
        <member name="P:System.SR.Config_base_cannot_add_items_above_inherited_items">
            <summary>This collection does not permit items to be added in or above the inherited items.</summary>
        </member>
        <member name="P:System.SR.Config_base_cannot_add_items_below_inherited_items">
            <summary>This collection does not permit items to be added in or below the inherited items.</summary>
        </member>
        <member name="P:System.SR.Config_base_cannot_remove_inherited_items">
            <summary>Inherited items may not be removed.</summary>
        </member>
        <member name="P:System.SR.Config_base_collection_elements_may_not_be_removed">
            <summary>Elements of this collection may not be removed.</summary>
        </member>
        <member name="P:System.SR.Config_base_collection_entry_already_exists">
            <summary>The entry '{0}' has already been added.</summary>
        </member>
        <member name="P:System.SR.Config_base_collection_entry_already_removed">
            <summary>Entry already removed.</summary>
        </member>
        <member name="P:System.SR.Config_base_collection_entry_not_found">
            <summary>The entry '{0}' is not in the collection.</summary>
        </member>
        <member name="P:System.SR.Config_base_element_cannot_have_multiple_child_elements">
            <summary>The element &lt;{0}&gt; may only appear once in this section.</summary>
        </member>
        <member name="P:System.SR.Config_base_element_locked">
            <summary>The element '{0}' has been locked in a higher level configuration.</summary>
        </member>
        <member name="P:System.SR.Config_base_expected_to_find_element">
            <summary>Expected to find an element.</summary>
        </member>
        <member name="P:System.SR.Config_base_invalid_attribute_to_lock">
            <summary>The attribute '{0}' is not valid in the locked list for this section. The following attributes can be locked: {1}. Multiple attributes may be listed separated by commas.</summary>
        </member>
        <member name="P:System.SR.Config_base_invalid_attribute_to_lock_by_add">
            <summary>The attribute '{0}' is not valid in the locked list for this section. The following attributes can be locked: {1}.</summary>
        </member>
        <member name="P:System.SR.Config_base_invalid_element_key">
            <summary>Invalid key value.</summary>
        </member>
        <member name="P:System.SR.Config_base_invalid_element_to_lock">
            <summary>The element '{0}' is not valid in the locked list for this section. The following elements can be locked: {1}. Multiple elements may be listed separated by commas.</summary>
        </member>
        <member name="P:System.SR.Config_base_invalid_element_to_lock_by_add">
            <summary>The element '{0}' is not valid in the locked list for this section. The following elements can be locked: {1}.</summary>
        </member>
        <member name="P:System.SR.Config_base_property_is_not_a_configuration_element">
            <summary>Property '{0}' is not a ConfigurationElement.</summary>
        </member>
        <member name="P:System.SR.Config_base_read_only">
            <summary>The configuration is read only.</summary>
        </member>
        <member name="P:System.SR.Config_base_required_attribute_locked">
            <summary>The attribute '{0}' is required and is locked at a higher level configuration. The configuration with the lock should lock the entire element if it needs to lock required attributes.</summary>
        </member>
        <member name="P:System.SR.Config_base_required_attribute_lock_attempt">
            <summary>The attribute '{0}' is required and cannot be locked. The configuration should lock the entire element if it needs to lock required attributes.</summary>
        </member>
        <member name="P:System.SR.Config_base_required_attribute_missing">
            <summary>Required attribute '{0}' not found.</summary>
        </member>
        <member name="P:System.SR.Config_base_section_invalid_content">
            <summary>The configuration section cannot contain a CDATA or text element.</summary>
        </member>
        <member name="P:System.SR.Config_base_unrecognized_attribute">
            <summary>Unrecognized attribute '{0}'. Note that attribute names are case-sensitive.</summary>
        </member>
        <member name="P:System.SR.Config_base_unrecognized_element">
            <summary>Unrecognized element.</summary>
        </member>
        <member name="P:System.SR.Config_base_unrecognized_element_name">
            <summary>Unrecognized element '{0}'.</summary>
        </member>
        <member name="P:System.SR.Config_base_value_cannot_contain">
            <summary>The value may not contain the '{0}' character.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsection_in_location_config">
            <summary>ConfigurationSection properties for a &lt;section&gt; declaration cannot be edited in a Configuration with a location.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsection_parentsection">
            <summary>ConfigurationSection properties can not be edited for the parent section of another section (ie. a section retrieved by calling GetParentSection on a section)</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsection_when_location_locked">
            <summary>ConfigurationSection properties for a location section cannot be edited when allowLocation=false.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsection_when_locked">
            <summary>ConfigurationSection properties cannot be edited when locked.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsection_when_not_attached">
            <summary>ConfigurationSection cannot be edited before being added to a section group belonging to an instance of class Configuration.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsection_when_it_is_implicit">
            <summary>ConfigurationSection cannot be edited because it is a built-in section.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsection_when_it_is_undeclared">
            <summary>ConfigurationSection cannot be edited because it is not declared.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsectiongroup_in_location_config">
            <summary>ConfigurationSectionGroup properties for a &lt;sectionGroup&gt; declaration cannot be edited in a Configuration with a location.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_configurationsectiongroup_when_not_attached">
            <summary>ConfigurationSectionGroup cannot be edited before being added to a section group belonging to an instance of class Configuration.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_edit_locationattriubtes">
            <summary>AllowOverride and InheritInChildApplications can not be set in the exe configuration, these settings have no meaning there.</summary>
        </member>
        <member name="P:System.SR.Config_cannot_open_config_source">
            <summary>Unable to open configSource file '{0}'.</summary>
        </member>
        <member name="P:System.SR.Config_client_config_init_error">
            <summary>Configuration system failed to initialize</summary>
        </member>
        <member name="P:System.SR.Config_client_config_too_many_configsections_elements">
            <summary>Only one &lt;configSections&gt; element allowed per config file and if present must be the first child of the root &lt;configuration&gt; element.</summary>
        </member>
        <member name="P:System.SR.Config_configmanager_open_noexe">
            <summary>exePath must be specified when not running inside a stand alone exe.</summary>
        </member>
        <member name="P:System.SR.Config_configsection_parentnotvalid">
            <summary>This is not valid for the parent section of another section (ie. a section retrieved by calling GetParentSection on a section)</summary>
        </member>
        <member name="P:System.SR.Config_connectionstrings_declaration_invalid">
            <summary>The configuration section 'connectionStrings' has an unexpected declaration.</summary>
        </member>
        <member name="P:System.SR.Config_data_read_count_mismatch">
            <summary>Data read count is not equal to data available.</summary>
        </member>
        <member name="P:System.SR.Config_element_no_context">
            <summary>This element is not currently associated with any context</summary>
        </member>
        <member name="P:System.SR.Config_empty_lock_attributes_except">
            <summary>The '{0}' attribute cannot be an empty string. {1}="*" may be used to lock all attributes.</summary>
        </member>
        <member name="P:System.SR.Config_empty_lock_element_except">
            <summary>The '{0}' attribute cannot be an empty string. {1}="*" may be used to lock all elements.</summary>
        </member>
        <member name="P:System.SR.Config_exception_in_config_section_handler">
            <summary>An error occurred executing the configuration section handler for {0}.</summary>
        </member>
        <member name="P:System.SR.Config_file_doesnt_have_root_configuration">
            <summary>Configuration file {0} does not have root &lt;configuration&gt; tag</summary>
        </member>
        <member name="P:System.SR.Config_file_has_changed">
            <summary>The configuration file has been changed by another program.</summary>
        </member>
        <member name="P:System.SR.Config_getparentconfigurationsection_first_instance">
            <summary>GetParentSection can only be applied to ConfigurationSections from the first instance of a Configuration.</summary>
        </member>
        <member name="P:System.SR.Config_inconsistent_location_attributes">
            <summary>Error in configuration section "{0}": AllowLocation is false and either AllowOverride or InheritInChildApplications is true.</summary>
        </member>
        <member name="P:System.SR.Config_invalid_attributes_for_write">
            <summary>Unable to open file '{0}' for writing because it is read-only or hidden.</summary>
        </member>
        <member name="P:System.SR.Config_invalid_boolean_attribute">
            <summary>The property '{0}' must have value 'true' or 'false'.</summary>
        </member>
        <member name="P:System.SR.Config_invalid_node_type">
            <summary>Invalid node type.</summary>
        </member>
        <member name="P:System.SR.Config_location_location_not_allowed">
            <summary>&lt;location&gt; sections are allowed only within &lt;configuration&gt; sections.</summary>
        </member>
        <member name="P:System.SR.Config_location_path_invalid_character">
            <summary>&lt;location&gt; path attribute must be a relative virtual path.  It cannot contain any of '?' ':' '\\' '*' '"' '&lt;' '&gt;' or '|'.</summary>
        </member>
        <member name="P:System.SR.Config_location_path_invalid_first_character">
            <summary>&lt;location&gt; path attribute must be a relative virtual path.  It cannot start with any of ' ' '.' '/' or '\\'.</summary>
        </member>
        <member name="P:System.SR.Config_location_path_invalid_last_character">
            <summary>&lt;location&gt; path attribute must be a relative virtual path.  It cannot end with any of ' ' '.' '/' or '\\'.</summary>
        </member>
        <member name="P:System.SR.Config_missing_required_attribute">
            <summary>The '{0}' attribute must be specified on the '{1}' tag.</summary>
        </member>
        <member name="P:System.SR.Config_more_data_than_expected">
            <summary>More data than expected.</summary>
        </member>
        <member name="P:System.SR.Config_name_value_file_section_file_invalid_root">
            <summary>The root element must match the name of the section referencing the file, '{0}'</summary>
        </member>
        <member name="P:System.SR.Config_namespace_invalid">
            <summary>Namespace of '{0}' on configuration element is invalid, only '{1}' is valid.</summary>
        </member>
        <member name="P:System.SR.Config_no_stream_to_write">
            <summary>A configuration file cannot be created for the requested Configuration object.</summary>
        </member>
        <member name="P:System.SR.Config_not_allowed_to_encrypt_this_section">
            <summary>This configuration section cannot be encrypted.</summary>
        </member>
        <member name="P:System.SR.Config_object_is_null">
            <summary>Configuration section handler returned a null object.</summary>
        </member>
        <member name="P:System.SR.Config_operation_not_runtime">
            <summary>This operation does not apply at runtime.</summary>
        </member>
        <member name="P:System.SR.Config_properties_may_not_be_derived_from_configuration_section">
            <summary>The Configuration property '{0}' may not be derived from ConfigurationSection.</summary>
        </member>
        <member name="P:System.SR.Config_provider_must_implement_type">
            <summary>Provider must implement the class '{0}'.</summary>
        </member>
        <member name="P:System.SR.Config_root_section_group_cannot_be_edited">
            <summary>The RootSectionGroup cannot be edited</summary>
        </member>
        <member name="P:System.SR.Config_section_allow_definition_attribute_invalid">
            <summary>The 'allowDefinition' attribute must be one of the following values: Everywhere, MachineOnly, MachineToWebRoot, MachineToApplication.</summary>
        </member>
        <member name="P:System.SR.Config_section_allow_exe_definition_attribute_invalid">
            <summary>The 'allowExeDefinition' attribute must be one of the following values: MachineOnly, MachineToApplication, MachineToRoamingUser, MachineToLocalUser.</summary>
        </member>
        <member name="P:System.SR.Config_section_cannot_be_used_in_location">
            <summary>This section is not allowed in &lt;location&gt; elements.  This section has been marked allowLocation="false".</summary>
        </member>
        <member name="P:System.SR.Config_section_locked">
            <summary>This configuration section cannot be used at this path.  This happens when the site administrator has locked access to this section using &lt;location allowOverride="false"&gt; from an inherited configuration file.</summary>
        </member>
        <member name="P:System.SR.Config_sections_must_be_unique">
            <summary>Sections must only appear once per config file.  See the help topic &lt;location&gt; for exceptions.</summary>
        </member>
        <member name="P:System.SR.Config_source_cannot_be_shared">
            <summary>The configSource file '{0}' can only be used by one type of section, and may not be the same as the configuration file.</summary>
        </member>
        <member name="P:System.SR.Config_source_parent_conflict">
            <summary>The configSource file '{0}' is also used in a parent, this is not allowed.</summary>
        </member>
        <member name="P:System.SR.Config_source_file_format">
            <summary>The format of a configSource file must be an element containing the name of the section.</summary>
        </member>
        <member name="P:System.SR.Config_source_invalid_format">
            <summary>The configSource attribute must be a relative physical path.</summary>
        </member>
        <member name="P:System.SR.Config_source_invalid_chars">
            <summary>The configSource attribute must be a relative physical path, so the '/' character is not allowed.</summary>
        </member>
        <member name="P:System.SR.Config_source_requires_file">
            <summary>The 'configSource' property may not be set in a configuration that has no associated file.</summary>
        </member>
        <member name="P:System.SR.Config_source_syntax_error">
            <summary>A section using 'configSource' may contain no other attributes or elements.</summary>
        </member>
        <member name="P:System.SR.Config_system_already_set">
            <summary>The configuration system has already been initialized.</summary>
        </member>
        <member name="P:System.SR.Config_tag_name_already_defined">
            <summary>Section or group name '{0}' is already defined. Updates to this may only occur at the configuration level where it is defined.</summary>
        </member>
        <member name="P:System.SR.Config_tag_name_already_defined_at_this_level">
            <summary>Section or group name '{0}' is already defined. This can not be defined multiple times.</summary>
        </member>
        <member name="P:System.SR.Config_tag_name_cannot_be_location">
            <summary>The section name 'location' is reserved for &lt;location&gt; sections.</summary>
        </member>
        <member name="P:System.SR.Config_tag_name_cannot_begin_with_config">
            <summary>Section names beginning with config are reserved.</summary>
        </member>
        <member name="P:System.SR.Config_type_doesnt_inherit_from_type">
            <summary>Type '{0}' does not inherit from '{1}'.</summary>
        </member>
        <member name="P:System.SR.Config_unexpected_element_end">
            <summary>Unexpected end of element {0}.</summary>
        </member>
        <member name="P:System.SR.Config_unexpected_element_name">
            <summary>Unexpected element name {0}.</summary>
        </member>
        <member name="P:System.SR.Config_unexpected_node_type">
            <summary>expected XmlNodeType.Element, type is {0}.</summary>
        </member>
        <member name="P:System.SR.Config_unrecognized_configuration_section">
            <summary>Unrecognized configuration section {0}.</summary>
        </member>
        <member name="P:System.SR.Config_write_failed">
            <summary>Unable to save config to file '{0}'.</summary>
        </member>
        <member name="P:System.SR.Converter_timespan_not_in_second">
            <summary>The expected format is an integer value in seconds.</summary>
        </member>
        <member name="P:System.SR.Converter_unsupported_value_type">
            <summary>The converter cannot convert values with type '{0}'.</summary>
        </member>
        <member name="P:System.SR.Decryption_failed">
            <summary>Failed to decrypt using provider '{0}'. Error message from the provider: {1}</summary>
        </member>
        <member name="P:System.SR.Default_value_conversion_error_from_string">
            <summary>The default value of the property '{0}' cannot be parsed. The error is: {1}</summary>
        </member>
        <member name="P:System.SR.Default_value_wrong_type">
            <summary>The default value for the property '{0}' has different type than the one of the property itself.</summary>
        </member>
        <member name="P:System.SR.DPAPI_bad_data">
            <summary>The data specified for decryption is bad.</summary>
        </member>
        <member name="P:System.SR.Empty_attribute">
            <summary>The '{0}' attribute cannot be an empty string.</summary>
        </member>
        <member name="P:System.SR.EncryptedNode_not_found">
            <summary>The section is marked as being protected. However, the &lt;EncryptedData&gt; child node was not found in the section's node. Make sure that the section is correctly encrypted.</summary>
        </member>
        <member name="P:System.SR.EncryptedNode_is_in_invalid_format">
            <summary>The section is marked as being protected, but it does not have the correct format. It should contain only the &lt;EncryptedData&gt; child node.</summary>
        </member>
        <member name="P:System.SR.Encryption_failed">
            <summary>Failed to encrypt the section '{0}' using provider '{1}'. Error message from the provider: {2}</summary>
        </member>
        <member name="P:System.SR.IndexOutOfRange">
            <summary>Index {0} is out of range.</summary>
        </member>
        <member name="P:System.SR.Invalid_enum_value">
            <summary>The enumeration value must be one of the following: {0}.</summary>
        </member>
        <member name="P:System.SR.Must_add_to_config_before_protecting_it">
            <summary>The configuration section must be added to a configuration hierarchy before you can protect it.</summary>
        </member>
        <member name="P:System.SR.No_converter">
            <summary>Unable to find a converter that supports conversion to/from string for the property '{0}' of type '{1}'.</summary>
        </member>
        <member name="P:System.SR.No_exception_information_available">
            <summary>No information about the exception is available.</summary>
        </member>
        <member name="P:System.SR.Property_name_reserved">
            <summary>A configuration property cannot have the name '{0}' because it starts with the reserved prefix 'config' or 'lock'.</summary>
        </member>
        <member name="P:System.SR.Item_name_reserved">
            <summary>A configuration item alias for '{0}' cannot have the name '{1}' because it starts with the reserved prefix 'config' or 'lock'.</summary>
        </member>
        <member name="P:System.SR.Basicmap_item_name_reserved">
            <summary>A configuration item cannot have the name '{0}' because it starts with the reserved prefix 'config' or 'lock'.</summary>
        </member>
        <member name="P:System.SR.ProtectedConfigurationProvider_not_found">
            <summary>The protection provider '{0}' was not found.</summary>
        </member>
        <member name="P:System.SR.Regex_validator_error">
            <summary>The value does not conform to the validation regex string '{0}'.</summary>
        </member>
        <member name="P:System.SR.String_null_or_empty">
            <summary>The string cannot be null or empty.</summary>
        </member>
        <member name="P:System.SR.Subclass_validator_error">
            <summary>The type '{0}' must be derived from the type '{1}'.</summary>
        </member>
        <member name="P:System.SR.Top_level_conversion_error_from_string">
            <summary>The value of the property '{0}' cannot be parsed. The error is: {1}</summary>
        </member>
        <member name="P:System.SR.Top_level_conversion_error_to_string">
            <summary>The value of the property '{0}' cannot be converted to string. The error is: {1}</summary>
        </member>
        <member name="P:System.SR.Top_level_validation_error">
            <summary>The value for the property '{0}' is not valid. The error is: {1}</summary>
        </member>
        <member name="P:System.SR.Type_cannot_be_resolved">
            <summary>The type '{0}' cannot be resolved. Please verify the spelling is correct or that the full type name is provided.</summary>
        </member>
        <member name="P:System.SR.TypeNotPublic">
            <summary>Unable to load type '{0}' because it is not public.</summary>
        </member>
        <member name="P:System.SR.Unrecognized_initialization_value">
            <summary>The configuration setting '{0}' was not recognized.</summary>
        </member>
        <member name="P:System.SR.Validation_scalar_range_violation_not_different">
            <summary>The value must be different than {0}.</summary>
        </member>
        <member name="P:System.SR.Validation_scalar_range_violation_not_equal">
            <summary>The value must be equal to {0}.</summary>
        </member>
        <member name="P:System.SR.Validation_scalar_range_violation_not_in_range">
            <summary>The value must be inside the range {0}-{1}.</summary>
        </member>
        <member name="P:System.SR.Validation_scalar_range_violation_not_outside_range">
            <summary>The value must not be in the range {0}-{1}.</summary>
        </member>
        <member name="P:System.SR.Validator_Attribute_param_not_validator">
            <summary>Only types derived from {0} are valid validator types.</summary>
        </member>
        <member name="P:System.SR.Validator_does_not_support_elem_type">
            <summary>The supplied validator does not support validating the configuration element type {0}.</summary>
        </member>
        <member name="P:System.SR.Validator_does_not_support_prop_type">
            <summary>The supplied validator does not support the type of the property '{0}'.</summary>
        </member>
        <member name="P:System.SR.Validator_element_not_valid">
            <summary>The configuration element '{0}' is not valid. The error is: {1}</summary>
        </member>
        <member name="P:System.SR.Validator_method_not_found">
            <summary>The supplied method name '{0}' was not found. The callback method must be a public static void method with one object parameter.</summary>
        </member>
        <member name="P:System.SR.Validator_min_greater_than_max">
            <summary>The upper range limit value must be greater than the lower range limit value.</summary>
        </member>
        <member name="P:System.SR.Validator_scalar_resolution_violation">
            <summary>The value must have a resolution of {0}.</summary>
        </member>
        <member name="P:System.SR.Validator_string_invalid_chars">
            <summary>The string cannot contain any of the following characters: '{0}'.</summary>
        </member>
        <member name="P:System.SR.Validator_string_max_length">
            <summary>The string must be no more than {0} characters long.</summary>
        </member>
        <member name="P:System.SR.Validator_string_min_length">
            <summary>The string must be at least {0} characters long.</summary>
        </member>
        <member name="P:System.SR.Validator_value_type_invalid">
            <summary>The supplied value is not of type which the validator can process.</summary>
        </member>
        <member name="P:System.SR.Validator_multiple_validator_attributes">
            <summary>Multiple validator attributes are not currently supported. The property '{0}' has more than one validator attribute associated with it.</summary>
        </member>
        <member name="P:System.SR.Validator_timespan_value_must_be_positive">
            <summary>The time span value must be positive.</summary>
        </member>
        <member name="P:System.SR.WrongType_of_Protected_provider">
            <summary>The type specified does not extend ProtectedConfigurationProvider class.</summary>
        </member>
        <member name="P:System.SR.Config_element_locking_not_supported">
            <summary>Locking of elements or attributes within a configuration section is not supported for legacy section '{0}'.</summary>
        </member>
        <member name="P:System.SR.Protection_provider_syntax_error">
            <summary>A section using 'configProtectionProvider' may contain no other attributes.</summary>
        </member>
        <member name="P:System.SR.Protection_provider_invalid_format">
            <summary>The configProtectionProvider attribute cannot be an empty string.</summary>
        </member>
        <member name="P:System.SR.Cannot_declare_or_remove_implicit_section">
            <summary>The section '{0}' is a built-in section.  It cannot be declared by the user.</summary>
        </member>
        <member name="P:System.SR.Config_reserved_attribute">
            <summary>The attribute '{0}' cannot be specified because its name starts with the reserved prefix 'config' or 'lock'.</summary>
        </member>
        <member name="P:System.SR.Filename_in_SaveAs_is_used_already">
            <summary>The file name '{0}' is invalid because the same file name is already referenced by the configuration hierarchy you have opened.</summary>
        </member>
        <member name="P:System.SR.Provider_Already_Initialized">
            <summary>This provider instance has already been initialized.</summary>
        </member>
        <member name="P:System.SR.Config_provider_name_null_or_empty">
            <summary>Provider name cannot be null or empty.</summary>
        </member>
        <member name="P:System.SR.CollectionReadOnly">
            <summary>Collection is read-only.</summary>
        </member>
        <member name="P:System.SR.Config_source_not_under_config_dir">
            <summary>The configSource '{0}' is invalid. It must refer to a file in the same directory or in a subdirectory as the configuration file.</summary>
        </member>
        <member name="P:System.SR.Config_source_invalid">
            <summary>The configSource attribute is invalid.</summary>
        </member>
        <member name="P:System.SR.Location_invalid_inheritInChildApplications_in_machine_or_root_web_config">
            <summary>InheritInChildApplications cannot be set to "false" if the location path is referring to machine.config or the root web.config.</summary>
        </member>
        <member name="P:System.SR.Cannot_change_both_AllowOverride_and_OverrideMode">
            <summary>Changing both AllowOverride and OverrideMode is not supported for compatibility reasons. Please use only one or the other.</summary>
        </member>
        <member name="P:System.SR.Config_section_override_mode_attribute_invalid">
            <summary>The 'overrideMode' and 'overrideModeDefault' attributes must be one of the following values: Inherited, Allow, Deny.</summary>
        </member>
        <member name="P:System.SR.Invalid_override_mode_declaration">
            <summary>A &lt;location&gt; tag may contain only one of the 'allowOverride' or 'overrideMode' attributes.</summary>
        </member>
        <member name="P:System.SR.Machine_config_file_not_found">
            <summary>The machine.config file '{0}' was not found.</summary>
        </member>
        <member name="P:System.SR.ObjectDisposed_StreamClosed">
            <summary>Cannot access a closed stream.</summary>
        </member>
        <member name="P:System.SR.Unable_to_convert_type_from_string">
            <summary>Could not find a type-converter to convert object if type '{0}' from string.</summary>
        </member>
        <member name="P:System.SR.Unable_to_convert_type_to_string">
            <summary>Could not find a type-converter to convert object if type '{0}' to string.</summary>
        </member>
        <member name="P:System.SR.Could_not_create_from_default_value">
            <summary>The property '{0}' could not be created from it's default value. Error message: {1}</summary>
        </member>
        <member name="P:System.SR.Could_not_create_from_default_value_2">
            <summary>The property '{0}' could not be created from it's default value because the default value is of a different type.</summary>
        </member>
        <member name="P:System.SR.UserSettingsNotSupported">
            <summary>The current configuration system does not support user-scoped settings.</summary>
        </member>
        <member name="P:System.SR.SettingsSaveFailed">
            <summary>Failed to save settings: {0}</summary>
        </member>
        <member name="P:System.SR.SettingsSaveFailedNoSection">
            <summary>Failed to save settings: unable to access the configuration section.</summary>
        </member>
        <member name="P:System.SR.UnknownUserLevel">
            <summary>Unknown ConfigurationUserLevel specified.</summary>
        </member>
        <member name="P:System.SR.BothScopeAttributes">
            <summary>The setting {0} has both an ApplicationScopedSettingAttribute and a UserScopedSettingAttribute.</summary>
        </member>
        <member name="P:System.SR.NoScopeAttributes">
            <summary>The setting {0} does not have either an ApplicationScopedSettingAttribute or UserScopedSettingAttribute.</summary>
        </member>
        <member name="P:System.SR.SettingsPropertyNotFound">
            <summary>The settings property '{0}' was not found.</summary>
        </member>
        <member name="P:System.SR.SettingsPropertyReadOnly">
            <summary>The settings property '{0}' is read-only.</summary>
        </member>
        <member name="P:System.SR.SettingsPropertyWrongType">
            <summary>The settings property '{0}' is of a non-compatible type.</summary>
        </member>
        <member name="P:System.SR.ProviderInstantiationFailed">
            <summary>Failed to instantiate provider: {0}.</summary>
        </member>
        <member name="P:System.SR.ProviderTypeLoadFailed">
            <summary>Failed to load provider type: {0}.</summary>
        </member>
        <member name="P:System.SR.AppSettingsReaderNoKey">
            <summary>The key '{0}' does not exist in the appSettings configuration section.</summary>
        </member>
        <member name="P:System.SR.AppSettingsReaderCantParse">
            <summary>The value '{0}' was found in the appSettings configuration section for key '{1}', and this value is not a valid {2}.</summary>
        </member>
        <member name="P:System.SR.AppSettingsReaderEmptyString">
            <summary>(empty string)</summary>
        </member>
        <member name="P:System.SR.Config_invalid_integer_attribute">
            <summary>The '{0}' attribute must be set to an integer value.</summary>
        </member>
        <member name="P:System.SR.Config_base_required_attribute_empty">
            <summary>Required attribute '{0}' cannot be empty.</summary>
        </member>
        <member name="P:System.SR.Config_base_elements_only">
            <summary>Only elements allowed.</summary>
        </member>
        <member name="P:System.SR.Config_base_no_child_nodes">
            <summary>Child nodes not allowed.</summary>
        </member>
        <member name="P:System.SR.InvalidNullEmptyArgument">
            <summary>Argument {0} cannot be null or zero-length.</summary>
        </member>
        <member name="P:System.SR.DuplicateFileName">
            <summary>The file name '{0}' was already in the collection.</summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
            <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
            <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
            <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.Unsafe">
            <summary>Contains generic, low-level functionality for manipulating pointers.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
            <summary>Adds an element offset to the given reference.</summary>
            <param name="source">The reference to add the offset to.</param>
            <param name="elementOffset">The offset to add.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
            <summary>Adds an element offset to the given reference.</summary>
            <param name="source">The reference to add the offset to.</param>
            <param name="elementOffset">The offset to add.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.UIntPtr)">
            <summary>Adds an element offset to the given reference.</summary>
            <param name="source">The reference to add the offset to.</param>
            <param name="elementOffset">The offset to add.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
            <summary>Adds an element offset to the given void pointer.</summary>
            <param name="source">The void pointer to add the offset to.</param>
            <param name="elementOffset">The offset to add.</param>
            <typeparam name="T">The type of void pointer.</typeparam>
            <returns>A new void pointer that reflects the addition of offset to the specified pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
            <summary>Adds a byte offset to the given reference.</summary>
            <param name="source">The reference to add the offset to.</param>
            <param name="byteOffset">The offset to add.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the addition of byte offset to pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.UIntPtr)">
            <summary>Adds a byte offset to the given reference.</summary>
            <param name="source">The reference to add the offset to.</param>
            <param name="byteOffset">The offset to add.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the addition of byte offset to pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
            <summary>Determines whether the specified references point to the same location.</summary>
            <param name="left">The first reference to compare.</param>
            <param name="right">The second reference to compare.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
            <summary>Casts the given object to the specified type.</summary>
            <param name="o">The object to cast.</param>
            <typeparam name="T">The type which the object will be cast to.</typeparam>
            <returns>The original object, casted to the given type.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
            <summary>Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</summary>
            <param name="source">The reference to reinterpret.</param>
            <typeparam name="TFrom">The type of reference to reinterpret.</typeparam>
            <typeparam name="TTo">The desired type of the reference.</typeparam>
            <returns>A reference to a value of type <typeparamref name="TTo" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
            <summary>Returns a pointer to the given by-ref parameter.</summary>
            <param name="value">The object whose pointer is obtained.</param>
            <typeparam name="T">The type of object.</typeparam>
            <returns>A pointer to the given value.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
            <summary>Reinterprets the given read-only reference as a reference.</summary>
            <param name="source">The read-only reference to reinterpret.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A reference to a value of type <typeparamref name="T" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
            <summary>Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</summary>
            <param name="source">The location of the value to reference.</param>
            <typeparam name="T">The type of the interpreted location.</typeparam>
            <returns>A reference to a value of type <typeparamref name="T" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
            <summary>Determines the byte offset from origin to target from the given references.</summary>
            <param name="origin">The reference to origin.</param>
            <param name="target">The reference to target.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
            <summary>Copies a value of type <typeparamref name="T" /> to the given location.</summary>
            <param name="destination">The location to copy to.</param>
            <param name="source">A pointer to the value to copy.</param>
            <typeparam name="T">The type of value to copy.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
            <summary>Copies a value of type <typeparamref name="T" /> to the given location.</summary>
            <param name="destination">The location to copy to.</param>
            <param name="source">A reference to the value to copy.</param>
            <typeparam name="T">The type of value to copy.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
            <summary>Copies bytes from the source address to the destination address.</summary>
            <param name="destination">The destination address to copy to.</param>
            <param name="source">The source address to copy from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
            <summary>Copies bytes from the source address to the destination address.</summary>
            <param name="destination">The destination address to copy to.</param>
            <param name="source">The source address to copy from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
            <summary>Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</summary>
            <param name="destination">The destination address to copy to.</param>
            <param name="source">The source address to copy from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
            <summary>Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</summary>
            <param name="destination">The destination address to copy to.</param>
            <param name="source">The source address to copy from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
            <summary>Initializes a block of memory at the given location with a given initial value.</summary>
            <param name="startAddress">The address of the start of the memory block to initialize.</param>
            <param name="value">The value to initialize the block to.</param>
            <param name="byteCount">The number of bytes to initialize.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
            <summary>Initializes a block of memory at the given location with a given initial value.</summary>
            <param name="startAddress">The address of the start of the memory block to initialize.</param>
            <param name="value">The value to initialize the block to.</param>
            <param name="byteCount">The number of bytes to initialize.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
            <summary>Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</summary>
            <param name="startAddress">The address of the start of the memory block to initialize.</param>
            <param name="value">The value to initialize the block to.</param>
            <param name="byteCount">The number of bytes to initialize.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
            <summary>Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</summary>
            <param name="startAddress">The address of the start of the memory block to initialize.</param>
            <param name="value">The value to initialize the block to.</param>
            <param name="byteCount">The number of bytes to initialize.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
            <summary>Returns a value that indicates whether a specified reference is greater than another specified reference.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of the reference.</typeparam>
            <returns>
                <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
            <summary>Returns a value that indicates whether a specified reference is less than another specified reference.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of the reference.</typeparam>
            <returns>
                <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)">
            <summary>Determines if a given reference to a value of type <typeparamref name="T" /> is a null reference.</summary>
            <param name="source">The reference to check.</param>
            <typeparam name="T">The type of the reference.</typeparam>
            <returns>
                <see langword="true" /> if <paramref name="source" /> is a null reference; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.NullRef``1">
            <summary>Returns a reference to a value of type <typeparamref name="T" /> that is a null reference.</summary>
            <typeparam name="T">The type of the reference.</typeparam>
            <returns>A reference to a value of type <typeparamref name="T" /> that is a null reference.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
            <summary>Reads a value of type <typeparamref name="T" /> from the given location.</summary>
            <param name="source">The location to read from.</param>
            <typeparam name="T">The type to read.</typeparam>
            <returns>An object of type <typeparamref name="T" /> read from the given location.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
            <summary>Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</summary>
            <param name="source">The location to read from.</param>
            <typeparam name="T">The type to read.</typeparam>
            <returns>An object of type <typeparamref name="T" /> read from the given location.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
            <summary>Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</summary>
            <param name="source">The location to read from.</param>
            <typeparam name="T">The type to read.</typeparam>
            <returns>An object of type <typeparamref name="T" /> read from the given location.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
            <summary>Returns the size of an object of the given type parameter.</summary>
            <typeparam name="T">The type of object whose size is retrieved.</typeparam>
            <returns>The size of an object of type <typeparamref name="T" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.SkipInit``1(``0@)">
            <summary>Bypasses definite assignment rules for a given value.</summary>
            <param name="value">The uninitialized object.</param>
            <typeparam name="T">The type of the uninitialized object.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
            <summary>Subtracts an element offset from the given reference.</summary>
            <param name="source">The reference to subtract the offset from.</param>
            <param name="elementOffset">The offset to subtract.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the subtraction of offset from pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
            <summary>Subtracts an element offset from the given reference.</summary>
            <param name="source">The reference to subtract the offset from.</param>
            <param name="elementOffset">The offset to subtract.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the subtraction of offset from pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.UIntPtr)">
            <summary>Subtracts an element offset from the given reference.</summary>
            <param name="source">The reference to subtract the offset from.</param>
            <param name="elementOffset">The offset to subtract.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the subraction of offset from pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
            <summary>Subtracts an element offset from the given void pointer.</summary>
            <param name="source">The void pointer to subtract the offset from.</param>
            <param name="elementOffset">The offset to subtract.</param>
            <typeparam name="T">The type of the void pointer.</typeparam>
            <returns>A new void pointer that reflects the subtraction of offset from the specified pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
            <summary>Subtracts a byte offset from the given reference.</summary>
            <param name="source">The reference to subtract the offset from.</param>
            <param name="byteOffset">The offset to subtract.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the subtraction of byte offset from pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.UIntPtr)">
            <summary>Subtracts a byte offset from the given reference.</summary>
            <param name="source">The reference to subtract the offset from.</param>
            <param name="byteOffset">The offset to subtract.</param>
            <typeparam name="T">The type of reference.</typeparam>
            <returns>A new reference that reflects the subraction of byte offset from pointer.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
            <summary>Returns a <see langword="mutable ref" /> to a boxed value.</summary>
            <param name="box">The value to unbox.</param>
            <typeparam name="T">The type to be unboxed.</typeparam>
            <exception cref="T:System.NullReferenceException">
                <paramref name="box" /> is <see langword="null" />, and <typeparamref name="T" /> is a non-nullable value type.</exception>
            <exception cref="T:System.InvalidCastException">
                <paramref name="box" /> is not a boxed value type.
         
-or-

<paramref name="box" /> is not a boxed <typeparamref name="T" />.</exception>
            <exception cref="T:System.TypeLoadException">
                <typeparamref name="T" /> cannot be found.</exception>
            <returns>A <see langword="mutable ref" /> to the boxed value <paramref name="box" />.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
            <summary>Writes a value of type <typeparamref name="T" /> to the given location.</summary>
            <param name="destination">The location to write to.</param>
            <param name="value">The value to write.</param>
            <typeparam name="T">The type of value to write.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
            <summary>Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</summary>
            <param name="destination">The location to write to.</param>
            <param name="value">The value to write.</param>
            <typeparam name="T">The type of value to write.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
            <summary>Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</summary>
            <param name="destination">The location to write to.</param>
            <param name="value">The value to write.</param>
            <typeparam name="T">The type of value to write.</typeparam>
        </member>
        <member name="T:System.Security.AccessControl.AccessControlActions">
            <summary>Specifies the actions that are permitted for securable objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlActions.Change">
            <summary>Specifies write-only access.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlActions.None">
            <summary>Specifies no access.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlActions.View">
            <summary>Specifies read-only access.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AccessControlModification">
            <summary>Specifies the type of access control modification to perform. This enumeration is used by methods of the <see cref="T:System.Security.AccessControl.ObjectSecurity" /> class and its descendants.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlModification.Add">
            <summary>Add the specified authorization rule to the access control list (ACL).</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlModification.Remove">
            <summary>Remove authorization rules that contain the same security identifier (SID) and access mask as the specified authorization rule from the ACL.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlModification.RemoveAll">
            <summary>Remove authorization rules that contain the same SID as the specified authorization rule from the ACL.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlModification.RemoveSpecific">
            <summary>Remove authorization rules that exactly match the specified authorization rule from the ACL.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlModification.Reset">
            <summary>Remove authorization rules that contain the same SID as the specified authorization rule from the ACL, and then add the specified authorization rule to the ACL.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlModification.Set">
            <summary>Remove all authorization rules from the ACL, then add the specified authorization rule to the ACL.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AccessControlSections">
            <summary>Specifies which sections of a security descriptor to save or load.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlSections.Access">
            <summary>The discretionary access control list (DACL).</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlSections.All">
            <summary>The entire security descriptor.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlSections.Audit">
            <summary>The system access control list (SACL).</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlSections.Group">
            <summary>The primary group.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlSections.None">
            <summary>No sections.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlSections.Owner">
            <summary>The owner.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AccessControlType">
            <summary>Specifies whether an <see cref="T:System.Security.AccessControl.AccessRule" /> object is used to allow or deny access. These values are not flags, and they cannot be combined.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlType.Allow">
            <summary>The <see cref="T:System.Security.AccessControl.AccessRule" /> object is used to allow access to a secured object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AccessControlType.Deny">
            <summary>The <see cref="T:System.Security.AccessControl.AccessRule" /> object is used to deny access to a secured object.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AccessRule">
            <summary>Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An <see cref="T:System.Security.AccessControl.AccessRule" /> object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.</summary>
        </member>
        <member name="M:System.Security.AccessControl.AccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AccessRule" /> class by using the specified values.</summary>
            <param name="identity">The identity to which the access rule applies. This parameter must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</param>
            <param name="isInherited">
                <see langword="true" /> if this rule is inherited from a parent container.</param>
            <param name="inheritanceFlags">The inheritance properties of the access rule.</param>
            <param name="propagationFlags">Whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="type">The valid access control type.</param>
            <exception cref="T:System.ArgumentException">The value of the <paramref name="identity" /> parameter cannot be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />, or the <paramref name="type" /> parameter contains an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="accessMask" /> parameter is zero, or the <paramref name="inheritanceFlags" /> or <paramref name="propagationFlags" /> parameters contain unrecognized flag values.</exception>
        </member>
        <member name="P:System.Security.AccessControl.AccessRule.AccessControlType">
            <summary>Gets the <see cref="T:System.Security.AccessControl.AccessControlType" /> value associated with this <see cref="T:System.Security.AccessControl.AccessRule" /> object.</summary>
            <returns>The <see cref="T:System.Security.AccessControl.AccessControlType" /> value associated with this <see cref="T:System.Security.AccessControl.AccessRule" /> object.</returns>
        </member>
        <member name="T:System.Security.AccessControl.AccessRule`1">
            <summary>Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.</summary>
            <typeparam name="T">The access rights type for the access rule.</typeparam>
        </member>
        <member name="M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the AccessRule'1 class by using the specified values.</summary>
            <param name="identity">The identity to which the access rule applies.</param>
            <param name="rights">The rights of the access rule.</param>
            <param name="type">The valid access control type.</param>
        </member>
        <member name="M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the AccessRule'1 class by using the specified values.</summary>
            <param name="identity">The identity to which the access rule applies.</param>
            <param name="rights">The rights of the access rule.</param>
            <param name="inheritanceFlags">The inheritance properties of the access rule.</param>
            <param name="propagationFlags">Whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="type">The valid access control type.</param>
        </member>
        <member name="M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the AccessRule'1 class by using the specified values.</summary>
            <param name="identity">The identity to which the access rule applies.</param>
            <param name="rights">The rights of the access rule.</param>
            <param name="type">The valid access control type.</param>
        </member>
        <member name="M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the AccessRule'1 class by using the specified values.</summary>
            <param name="identity">The identity to which the access rule applies.</param>
            <param name="rights">The rights of the access rule.</param>
            <param name="inheritanceFlags">The inheritance properties of the access rule.</param>
            <param name="propagationFlags">Whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="type">The valid access control type.</param>
        </member>
        <member name="P:System.Security.AccessControl.AccessRule`1.Rights">
            <summary>Gets the rights of the current instance.</summary>
            <returns>The rights, cast as type &lt;T&gt;, of the current instance.</returns>
        </member>
        <member name="T:System.Security.AccessControl.AceEnumerator">
            <summary>Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</summary>
        </member>
        <member name="M:System.Security.AccessControl.AceEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
            <returns>
                <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:System.Security.AccessControl.AceEnumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:System.Security.AccessControl.AceEnumerator.Current">
            <summary>Gets the current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection. This property gets the type-friendly version of the object.</summary>
            <returns>The current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</returns>
        </member>
        <member name="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
            <summary>Gets the current element in the collection.</summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
            <returns>The current element in the collection.</returns>
        </member>
        <member name="T:System.Security.AccessControl.AceFlags">
            <summary>Specifies the inheritance and auditing behavior of an access control entry (ACE).</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.AuditFlags">
            <summary>All access attempts are audited.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.ContainerInherit">
            <summary>The access mask is propagated to child container objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.FailedAccess">
            <summary>Failed access attempts are audited.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.InheritanceFlags">
            <summary>A logical <see langword="OR" /> of <see cref="F:System.Security.AccessControl.AceFlags.ObjectInherit" />, <see cref="F:System.Security.AccessControl.AceFlags.ContainerInherit" />, <see cref="F:System.Security.AccessControl.AceFlags.NoPropagateInherit" />, and <see cref="F:System.Security.AccessControl.AceFlags.InheritOnly" />.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.Inherited">
            <summary>An ACE is inherited from a parent container rather than being explicitly set for an object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.InheritOnly">
            <summary>The access mask is propagated only to child objects. This includes both container and leaf child objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.None">
            <summary>No ACE flags are set.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.NoPropagateInherit">
            <summary>The access checks do not apply to the object; they only apply to its children.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.ObjectInherit">
            <summary>The access mask is propagated onto child leaf objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceFlags.SuccessfulAccess">
            <summary>Successful access attempts are audited.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AceQualifier">
            <summary>Specifies the function of an access control entry (ACE).</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceQualifier.AccessAllowed">
            <summary>Allow access.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceQualifier.AccessDenied">
            <summary>Deny access.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceQualifier.SystemAlarm">
            <summary>Cause a system alarm.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceQualifier.SystemAudit">
            <summary>Cause a system audit.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AceType">
            <summary>Defines the available access control entry (ACE) types.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessAllowed">
            <summary>Allows access to an object for a specific trustee identified by an <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessAllowedCallback">
            <summary>Allows access to an object for a specific trustee identified by an <see cref="T:System.Security.Principal.IdentityReference" /> object. This ACE type may contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessAllowedCallbackObject">
            <summary>Allows access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects. This ACE type may contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessAllowedCompound">
            <summary>Defined but never used. Included here for completeness.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessAllowedObject">
            <summary>Allows access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessDenied">
            <summary>Denies access to an object for a specific trustee identified by an <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessDeniedCallback">
            <summary>Denies access to an object for a specific trustee identified by an <see cref="T:System.Security.Principal.IdentityReference" /> object. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessDeniedCallbackObject">
            <summary>Denies access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.AccessDeniedObject">
            <summary>Denies access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.MaxDefinedAceType">
            <summary>Tracks the maximum defined ACE type in the enumeration.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAlarm">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAlarmCallback">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAlarmCallbackObject">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAlarmObject">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAudit">
            <summary>Causes an audit message to be logged when a specified trustee attempts to gain access to an object. The trustee is identified by an <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAuditCallback">
            <summary>Causes an audit message to be logged when a specified trustee attempts to gain access to an object. The trustee is identified by an <see cref="T:System.Security.Principal.IdentityReference" /> object. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAuditCallbackObject">
            <summary>Causes an audit message to be logged when a specified trustee attempts to gain access to an object or subobjects such as property sets or properties. The ACE contains a set of access rights, a GUID that identifies the type of object or subobject, and an <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee for whom the system will audit access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AceType.SystemAuditObject">
            <summary>Causes an audit message to be logged when a specified trustee attempts to gain access to an object or subobjects such as property sets or properties. The ACE contains a set of access rights, a GUID that identifies the type of object or subobject, and an <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee for whom the system will audit access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AuditFlags">
            <summary>Specifies the conditions for auditing attempts to access a securable object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AuditFlags.Failure">
            <summary>Failed access attempts are to be audited.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AuditFlags.None">
            <summary>No access attempts are to be audited.</summary>
        </member>
        <member name="F:System.Security.AccessControl.AuditFlags.Success">
            <summary>Successful access attempts are to be audited.</summary>
        </member>
        <member name="T:System.Security.AccessControl.AuditRule">
            <summary>Represents a combination of a user's identity and an access mask. An <see cref="T:System.Security.AccessControl.AuditRule" /> object also contains information about how the rule is inherited by child objects, how that inheritance is propagated, and for what conditions it is audited.</summary>
        </member>
        <member name="M:System.Security.AccessControl.AuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule" /> class by using the specified values.</summary>
            <param name="identity">The identity to which the audit rule applies. It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</param>
            <param name="isInherited">
                <see langword="true" /> to inherit this rule from a parent container.</param>
            <param name="inheritanceFlags">The inheritance properties of the audit rule.</param>
            <param name="propagationFlags">Whether inherited audit rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="auditFlags">The conditions for which the rule is audited.</param>
            <exception cref="T:System.ArgumentException">The value of the <paramref name="identity" /> parameter cannot be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />, or the <paramref name="auditFlags" /> parameter contains an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="accessMask" /> parameter is zero, or the <paramref name="inheritanceFlags" /> or <paramref name="propagationFlags" /> parameters contain unrecognized flag values.</exception>
        </member>
        <member name="P:System.Security.AccessControl.AuditRule.AuditFlags">
            <summary>Gets the audit flags for this audit rule.</summary>
            <returns>A bitwise combination of the enumeration values. This combination specifies the audit conditions for this audit rule.</returns>
        </member>
        <member name="T:System.Security.AccessControl.AuditRule`1">
            <summary>Represents a combination of a user's identity and an access mask.</summary>
            <typeparam name="T">The type of the audit rule.</typeparam>
        </member>
        <member name="M:System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule`1" /> class by using the specified values.</summary>
            <param name="identity">The identity to which this audit rule applies.</param>
            <param name="rights">The rights of the audit rule.</param>
            <param name="flags">The conditions for which the rule is audited.</param>
        </member>
        <member name="M:System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule`1" /> class by using the specified values.</summary>
            <param name="identity">The identity to which the audit rule applies.</param>
            <param name="rights">The rights of the audit rule.</param>
            <param name="inheritanceFlags">The inheritance properties of the audit rule.</param>
            <param name="propagationFlags">Whether inherited audit rules are automatically propagated.</param>
            <param name="flags">The conditions for which the rule is audited.</param>
        </member>
        <member name="M:System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule`1" /> class by using the specified values.</summary>
            <param name="identity">The identity to which the audit rule applies.</param>
            <param name="rights">The rights of the audit rule.</param>
            <param name="flags">The properties of the audit rule.</param>
        </member>
        <member name="M:System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule`1" /> class by using the specified values.</summary>
            <param name="identity">The identity to which the audit rule applies.</param>
            <param name="rights">The rights of the audit rule.</param>
            <param name="inheritanceFlags">The inheritance properties of the audit rule.</param>
            <param name="propagationFlags">Whether inherited audit rules are automatically propagated.</param>
            <param name="flags">The conditions for which the rule is audited.</param>
        </member>
        <member name="P:System.Security.AccessControl.AuditRule`1.Rights">
            <summary>Gets the rights of the audit rule.</summary>
            <returns>The rights of the audit rule.</returns>
        </member>
        <member name="T:System.Security.AccessControl.AuthorizationRule">
            <summary>Determines access to securable objects. The derived classes <see cref="T:System.Security.AccessControl.AccessRule" /> and <see cref="T:System.Security.AccessControl.AuditRule" /> offer specializations for access and audit functionality.</summary>
        </member>
        <member name="M:System.Security.AccessControl.AuthorizationRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AccessRule" /> class by using the specified values.</summary>
            <param name="identity">The identity to which the access rule applies. This parameter must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</param>
            <param name="isInherited">
                <see langword="true" /> to inherit this rule from a parent container.</param>
            <param name="inheritanceFlags">The inheritance properties of the access rule.</param>
            <param name="propagationFlags">Whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <exception cref="T:System.ArgumentException">The value of the <paramref name="identity" /> parameter cannot be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="accessMask" /> parameter is zero, or the <paramref name="inheritanceFlags" /> or <paramref name="propagationFlags" /> parameters contain unrecognized flag values.</exception>
        </member>
        <member name="P:System.Security.AccessControl.AuthorizationRule.AccessMask">
            <summary>Gets the access mask for this rule.</summary>
            <returns>The access mask for this rule.</returns>
        </member>
        <member name="P:System.Security.AccessControl.AuthorizationRule.IdentityReference">
            <summary>Gets the <see cref="T:System.Security.Principal.IdentityReference" /> to which this rule applies.</summary>
            <returns>The <see cref="T:System.Security.Principal.IdentityReference" /> to which this rule applies.</returns>
        </member>
        <member name="P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags">
            <summary>Gets the value of flags that determine how this rule is inherited by child objects.</summary>
            <returns>A bitwise combination of the enumeration values.</returns>
        </member>
        <member name="P:System.Security.AccessControl.AuthorizationRule.IsInherited">
            <summary>Gets a value indicating whether this rule is explicitly set or is inherited from a parent container object.</summary>
            <returns>
                <see langword="true" /> if this rule is not explicitly set but is instead inherited from a parent container.</returns>
        </member>
        <member name="P:System.Security.AccessControl.AuthorizationRule.PropagationFlags">
            <summary>Gets the value of the propagation flags, which determine how inheritance of this rule is propagated to child objects. This property is significant only when the value of the <see cref="T:System.Security.AccessControl.InheritanceFlags" /> enumeration is not <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</summary>
            <returns>A bitwise combination of the enumeration values.</returns>
        </member>
        <member name="T:System.Security.AccessControl.AuthorizationRuleCollection">
            <summary>Represents a collection of <see cref="T:System.Security.AccessControl.AuthorizationRule" /> objects.</summary>
        </member>
        <member name="M:System.Security.AccessControl.AuthorizationRuleCollection.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection" /> class.</summary>
        </member>
        <member name="M:System.Security.AccessControl.AuthorizationRuleCollection.AddRule(System.Security.AccessControl.AuthorizationRule)">
            <summary>Adds an <see cref="T:System.Security.AccessControl.AuthorizationRule" /> object to the collection.</summary>
            <param name="rule">The <see cref="T:System.Security.AccessControl.AuthorizationRule" /> object to add to the collection.</param>
        </member>
        <member name="M:System.Security.AccessControl.AuthorizationRuleCollection.CopyTo(System.Security.AccessControl.AuthorizationRule[],System.Int32)">
            <summary>Copies the contents of the collection to an array.</summary>
            <param name="rules">An array to which to copy the contents of the collection.</param>
            <param name="index">The zero-based index from which to begin copying.</param>
        </member>
        <member name="P:System.Security.AccessControl.AuthorizationRuleCollection.Item(System.Int32)">
            <summary>Gets the <see cref="T:System.Security.AccessControl.AuthorizationRule" /> object at the specified index of the collection.</summary>
            <param name="index">The zero-based index of the <see cref="T:System.Security.AccessControl.AuthorizationRule" /> object to get.</param>
            <returns>The <see cref="T:System.Security.AccessControl.AuthorizationRule" /> object at the specified index.</returns>
        </member>
        <member name="T:System.Security.AccessControl.CommonAce">
            <summary>Represents an access control entry (ACE).</summary>
        </member>
        <member name="M:System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CommonAce" /> class.</summary>
            <param name="flags">Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new access control entry (ACE).</param>
            <param name="qualifier">The use of the new ACE.</param>
            <param name="accessMask">The access mask for the ACE.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> associated with the new ACE.</param>
            <param name="isCallback">
                <see langword="true" /> to specify that the new ACE is a callback type ACE.</param>
            <param name="opaque">Opaque data associated with the new ACE. Opaque data is allowed only for callback ACE types. The length of this array must not be greater than the return value of the <see cref="M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)" /> method.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.CommonAce" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.CommonAce" /> object is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.CommonAce" /> to be copied into the <paramref name="binaryForm" /> array.</exception>
        </member>
        <member name="M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)">
            <summary>Gets the maximum allowed length of an opaque data BLOB for callback access control entries (ACEs).</summary>
            <param name="isCallback">
                <see langword="true" /> to specify that the <see cref="T:System.Security.AccessControl.CommonAce" /> object is a callback ACE type.</param>
            <returns>The allowed length of an opaque data BLOB.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonAce.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CommonAce" /> object. Use this length with the <see cref="M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)" /> method before marshaling the ACL into a binary array.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CommonAce" /> object.</returns>
        </member>
        <member name="T:System.Security.AccessControl.CommonAcl">
            <summary>Represents an access control list (ACL) and is the base class for the <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> and <see cref="T:System.Security.AccessControl.SystemAcl" /> classes.</summary>
        </member>
        <member name="M:System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.CommonAcl" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.CommonAcl" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)">
            <summary>Removes all access control entries (ACEs) contained by this <see cref="T:System.Security.AccessControl.CommonAcl" /> object that are associated with the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> object to check for.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonAcl.RemoveInheritedAces">
            <summary>Removes all inherited access control entries (ACEs) from this <see cref="T:System.Security.AccessControl.CommonAcl" /> object.</summary>
        </member>
        <member name="P:System.Security.AccessControl.CommonAcl.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object. This length should be used before marshaling the access control list (ACL) into a binary array by using the <see cref="M:System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonAcl.Count">
            <summary>Gets the number of access control entries (ACEs) in the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object.</summary>
            <returns>The number of ACEs in the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonAcl.IsCanonical">
            <summary>Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object are in canonical order.</summary>
            <returns>
                <see langword="true" /> if the ACEs in the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object are in canonical order; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonAcl.IsContainer">
            <summary>Sets whether the <see cref="T:System.Security.AccessControl.CommonAcl" /> object is a container.</summary>
            <returns>
                <see langword="true" /> if the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object is a container.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonAcl.IsDS">
            <summary>Sets whether the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object is a directory object access control list (ACL).</summary>
            <returns>
                <see langword="true" /> if the current <see cref="T:System.Security.AccessControl.CommonAcl" /> object is a directory object ACL.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonAcl.Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Security.AccessControl.CommonAce" /> at the specified index.</summary>
            <param name="index">The zero-based index of the <see cref="T:System.Security.AccessControl.CommonAce" /> to get or set.</param>
            <returns>The <see cref="T:System.Security.AccessControl.CommonAce" /> at the specified index.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonAcl.Revision">
            <summary>Gets the revision level of the <see cref="T:System.Security.AccessControl.CommonAcl" />.</summary>
            <returns>A byte value that specifies the revision level of the <see cref="T:System.Security.AccessControl.CommonAcl" />.</returns>
        </member>
        <member name="T:System.Security.AccessControl.CommonObjectSecurity">
            <summary>Controls access to objects without direct manipulation of access control lists (ACLs). This class is the abstract base class for the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> class.</summary>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> class.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new object is a container object.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)">
            <summary>Adds the specified access rule to the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The access rule to add.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)">
            <summary>Adds the specified audit rule to the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The audit rule to add.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)">
            <summary>Gets a collection of the access rules associated with the specified security identifier.</summary>
            <param name="includeExplicit">
                <see langword="true" /> to include access rules explicitly set for the object.</param>
            <param name="includeInherited">
                <see langword="true" /> to include inherited access rules.</param>
            <param name="targetType">Specifies whether the security identifier for which to retrieve access rules is of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or type <see cref="T:System.Security.Principal.NTAccount" />. The value of this parameter must be a type that can be translated to  the <see cref="T:System.Security.Principal.SecurityIdentifier" /> type.</param>
            <returns>The collection of access rules associated with the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)">
            <summary>Gets a collection of the audit rules associated with the specified security identifier.</summary>
            <param name="includeExplicit">
                <see langword="true" /> to include audit rules explicitly set for the object.</param>
            <param name="includeInherited">
                <see langword="true" /> to include inherited audit rules.</param>
            <param name="targetType">The security identifier for which to retrieve audit rules. This must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
            <returns>The collection of audit rules associated with the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)">
            <summary>Applies the specified modification to the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="modification">The modification to apply to the DACL.</param>
            <param name="rule">The access rule to modify.</param>
            <param name="modified">
                <see langword="true" /> if the DACL is successfully modified; otherwise, <see langword="false" />.</param>
            <returns>
                <see langword="true" /> if the DACL is successfully modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)">
            <summary>Applies the specified modification to the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="modification">The modification to apply to the SACL.</param>
            <param name="rule">The audit rule to modify.</param>
            <param name="modified">
                <see langword="true" /> if the SACL is successfully modified; otherwise, <see langword="false" />.</param>
            <returns>
                <see langword="true" /> if the SACL is successfully modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)">
            <summary>Removes access rules that contain the same security identifier and access mask as the specified access rule from the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The access rule to remove.</param>
            <returns>
                <see langword="true" /> if the access rule was successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)">
            <summary>Removes all access rules that have the same security identifier as the specified access rule from the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The access rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)">
            <summary>Removes all access rules that exactly match the specified access rule from the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The access rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)">
            <summary>Removes audit rules that contain the same security identifier and access mask as the specified audit rule from the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The audit rule to remove.</param>
            <returns>
                <see langword="true" /> if the audit rule was successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)">
            <summary>Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The audit rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)">
            <summary>Removes all audit rules that exactly match the specified audit rule from the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object.</summary>
            <param name="rule">The audit rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)">
            <summary>Removes all access rules in the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object and then adds the specified access rule.</summary>
            <param name="rule">The access rule to reset.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)">
            <summary>Removes all access rules that contain the same security identifier and qualifier as the specified access rule in the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object and then adds the specified access rule.</summary>
            <param name="rule">The access rule to set.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)">
            <summary>Removes all audit rules that contain the same security identifier and qualifier as the specified audit rule in the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> object and then adds the specified audit rule.</summary>
            <param name="rule">The audit rule to set.</param>
        </member>
        <member name="T:System.Security.AccessControl.CommonSecurityDescriptor">
            <summary>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</summary>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> class from the specified array of byte values.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new security descriptor is associated with a container object.</param>
            <param name="isDS">
                <see langword="true" /> if the new security descriptor is associated with a directory object.</param>
            <param name="binaryForm">The array of byte values from which to create the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
            <param name="offset">The offset in the <paramref name="binaryForm" /> array at which to begin copying.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> class from the specified information.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new security descriptor is associated with a container object.</param>
            <param name="isDS">
                <see langword="true" /> if the new security descriptor is associated with a directory object.</param>
            <param name="flags">Flags that specify behavior of the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
            <param name="owner">The owner for the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
            <param name="group">The primary group for the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
            <param name="systemAcl">The System Access Control List (SACL) for the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
            <param name="discretionaryAcl">The Discretionary Access Control List (DACL) for the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> class from the specified <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new security descriptor is associated with a container object.</param>
            <param name="isDS">
                <see langword="true" /> if the new security descriptor is associated with a directory object.</param>
            <param name="rawSecurityDescriptor">The <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object from which to create the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> class from the specified Security Descriptor Definition Language (SDDL) string.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new security descriptor is associated with a container object.</param>
            <param name="isDS">
                <see langword="true" /> if the new security descriptor is associated with a directory object.</param>
            <param name="sddlForm">The SDDL string from which to create the new <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)">
            <summary>Sets the <see cref="P:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl" /> property for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> instance and sets the <see cref="F:System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent" /> flag.</summary>
            <param name="revision">The revision level of the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</param>
            <param name="trusted">The number of Access Control Entries (ACEs) this <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object can contain. This number is to be used only as a hint.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)">
            <summary>Sets the <see cref="P:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl" /> property for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> instance and sets the <see cref="F:System.Security.AccessControl.ControlFlags.SystemAclPresent" /> flag.</summary>
            <param name="revision">The revision level of the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object.</param>
            <param name="trusted">The number of Access Control Entries (ACEs) this <see cref="T:System.Security.AccessControl.SystemAcl" /> object can contain. This number should only be used as a hint.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)">
            <summary>Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</summary>
            <param name="sid">The security identifier for which to remove access rules.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)">
            <summary>Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</summary>
            <param name="sid">The security identifier for which to remove audit rules.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)">
            <summary>Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object. DACLs that are protected do not inherit access rules from parent containers.</summary>
            <param name="isProtected">
                <see langword="true" /> to protect the DACL from inheritance.</param>
            <param name="preserveInheritance">
                <see langword="true" /> to keep inherited access rules in the DACL; <see langword="false" /> to remove inherited access rules from the DACL.</param>
        </member>
        <member name="M:System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)">
            <summary>Sets the inheritance protection for the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object. SACLs that are protected do not inherit audit rules from parent containers.</summary>
            <param name="isProtected">
                <see langword="true" /> to protect the SACL from inheritance.</param>
            <param name="preserveInheritance">
                <see langword="true" /> to keep inherited audit rules in the SACL; <see langword="false" /> to remove inherited audit rules from the SACL.</param>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags">
            <summary>Gets values that specify behavior of the <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</summary>
            <returns>One or more values of the <see cref="T:System.Security.AccessControl.ControlFlags" /> enumeration combined with a logical OR operation.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl">
            <summary>Gets or sets the discretionary access control list (DACL) for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object. The DACL contains access rules.</summary>
            <returns>The DACL for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.Group">
            <summary>Gets or sets the primary group for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</summary>
            <returns>The primary group for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer">
            <summary>Gets a Boolean value that specifies whether the object associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is a container object.</summary>
            <returns>
                <see langword="true" /> if the object associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is a container object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical">
            <summary>Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is in canonical order.</summary>
            <returns>
                <see langword="true" /> if the DACL associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is in canonical order; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.IsDS">
            <summary>Gets a Boolean value that specifies whether the object associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is a directory object.</summary>
            <returns>
                <see langword="true" /> if the object associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is a directory object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical">
            <summary>Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is in canonical order.</summary>
            <returns>
                <see langword="true" /> if the SACL associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object is in canonical order; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.Owner">
            <summary>Gets or sets the owner of the object associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</summary>
            <returns>The owner of the object associated with this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl">
            <summary>Gets or sets the System Access Control List (SACL) for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object. The SACL contains audit rules.</summary>
            <returns>The SACL for this <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> object.</returns>
        </member>
        <member name="T:System.Security.AccessControl.CompoundAce">
            <summary>Represents a compound Access Control Entry (ACE).</summary>
        </member>
        <member name="M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CompoundAce" /> class.</summary>
            <param name="flags">Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).</param>
            <param name="accessMask">The access mask for the ACE.</param>
            <param name="compoundAceType">A value from the <see cref="T:System.Security.AccessControl.CompoundAceType" /> enumeration.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> associated with the new ACE.</param>
        </member>
        <member name="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.CompoundAce" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.CompoundAce" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.CompoundAce" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="P:System.Security.AccessControl.CompoundAce.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CompoundAce" /> object. This length should be used before marshaling the ACL into a binary array with the <see cref="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CompoundAce" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CompoundAce.CompoundAceType">
            <summary>Gets or sets the type of this <see cref="T:System.Security.AccessControl.CompoundAce" /> object.</summary>
            <returns>The type of this <see cref="T:System.Security.AccessControl.CompoundAce" /> object.</returns>
        </member>
        <member name="T:System.Security.AccessControl.CompoundAceType">
            <summary>Specifies the type of a <see cref="T:System.Security.AccessControl.CompoundAce" /> object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.CompoundAceType.Impersonation">
            <summary>The <see cref="T:System.Security.AccessControl.CompoundAce" /> object is used for impersonation.</summary>
        </member>
        <member name="T:System.Security.AccessControl.ControlFlags">
            <summary>These flags affect the security descriptor behavior.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.DiscretionaryAclAutoInherited">
            <summary>Specifies that the Discretionary Access Control List (DACL) has been automatically inherited from the parent. Set by resource managers only.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.DiscretionaryAclAutoInheritRequired">
            <summary>Ignored.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.DiscretionaryAclDefaulted">
            <summary>Specifies that the DACL was obtained by a defaulting mechanism. Set by resource managers only.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent">
            <summary>Specifies that the DACL is not <see langword="null" />. Set by resource managers or users.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.DiscretionaryAclProtected">
            <summary>Specifies that the resource manager prevents auto-inheritance. Set by resource managers or users.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.DiscretionaryAclUntrusted">
            <summary>Ignored.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.GroupDefaulted">
            <summary>Specifies that the group <see cref="T:System.Security.Principal.SecurityIdentifier" /> was obtained by a defaulting mechanism. Set by resource managers only; should not be set by callers.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.None">
            <summary>No control flags.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.OwnerDefaulted">
            <summary>Specifies that the owner <see cref="T:System.Security.Principal.SecurityIdentifier" /> was obtained by a defaulting mechanism. Set by resource managers only; should not be set by callers.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.RMControlValid">
            <summary>Specifies that the contents of the Reserved field are valid.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.SelfRelative">
            <summary>Specifies that the security descriptor binary representation is in the self-relative format.  This flag is always set.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.ServerSecurity">
            <summary>Ignored.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.SystemAclAutoInherited">
            <summary>Specifies that the System Access Control List (SACL) has been automatically inherited from the parent. Set by resource managers only.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.SystemAclAutoInheritRequired">
            <summary>Ignored.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.SystemAclDefaulted">
            <summary>Specifies that the SACL was obtained by a defaulting mechanism. Set by resource managers only.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.SystemAclPresent">
            <summary>Specifies that the SACL is not <see langword="null" />. Set by resource managers or users.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ControlFlags.SystemAclProtected">
            <summary>Specifies that the resource manager prevents auto-inheritance. Set by resource managers or users.</summary>
        </member>
        <member name="T:System.Security.AccessControl.CustomAce">
            <summary>Represents an Access Control Entry (ACE) that is not defined by one of the members of the <see cref="T:System.Security.AccessControl.AceType" /> enumeration.</summary>
        </member>
        <member name="F:System.Security.AccessControl.CustomAce.MaxOpaqueLength">
            <summary>Returns the maximum allowed length of an opaque data blob for this <see cref="T:System.Security.AccessControl.CustomAce" /> object.</summary>
        </member>
        <member name="M:System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.CustomAce" /> class.</summary>
            <param name="type">Type of the new Access Control Entry (ACE). This value must be greater than <see cref="F:System.Security.AccessControl.AceType.MaxDefinedAceType" />.</param>
            <param name="flags">Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new ACE.</param>
            <param name="opaque">An array of byte values that contains the data for the new ACE. This value can be <see langword="null" />. The length of this array must not be greater than the value of the <see cref="F:System.Security.AccessControl.CustomAce.MaxOpaqueLength" /> field, and must be a multiple of four.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="type" /> parameter is not greater than <see cref="F:System.Security.AccessControl.AceType.MaxDefinedAceType" /> or the length of the <paramref name="opaque" /> array is either greater than the value of the <see cref="F:System.Security.AccessControl.CustomAce.MaxOpaqueLength" /> field or not a multiple of four.</exception>
        </member>
        <member name="M:System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.CustomAce" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.CustomAce" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.CustomAce" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.CustomAce.GetOpaque">
            <summary>Returns the opaque data associated with this <see cref="T:System.Security.AccessControl.CustomAce" /> object.</summary>
            <returns>An array of byte values that represents the opaque data associated with this <see cref="T:System.Security.AccessControl.CustomAce" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])">
            <summary>Sets the opaque callback data associated with this <see cref="T:System.Security.AccessControl.CustomAce" /> object.</summary>
            <param name="opaque">An array of byte values that represents the opaque callback data for this <see cref="T:System.Security.AccessControl.CustomAce" /> object.</param>
        </member>
        <member name="P:System.Security.AccessControl.CustomAce.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CustomAce" /> object. This length should be used before marshaling the ACL into a binary array with the <see cref="M:System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.CustomAce" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.CustomAce.OpaqueLength">
            <summary>Gets the length of the opaque data associated with this <see cref="T:System.Security.AccessControl.CustomAce" /> object.</summary>
            <returns>The length of the opaque callback data.</returns>
        </member>
        <member name="T:System.Security.AccessControl.DiscretionaryAcl">
            <summary>Represents a Discretionary Access Control List (DACL).</summary>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> class with the specified values.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object is a container.</param>
            <param name="isDS">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object is a directory object Access Control List (ACL).</param>
            <param name="revision">The revision level of the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</param>
            <param name="capacity">The number of Access Control Entries (ACEs) this <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object can contain. This number is to be used only as a hint.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> class with the specified values.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object is a container.</param>
            <param name="isDS">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object is a directory object Access Control List (ACL).</param>
            <param name="capacity">The number of Access Control Entries (ACEs) this <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object can contain. This number is to be used only as a hint.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> class with the specified values from the specified <see cref="T:System.Security.AccessControl.RawAcl" /> object.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object is a container.</param>
            <param name="isDS">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object is a directory object Access Control List (ACL).</param>
            <param name="rawAcl">The underlying <see cref="T:System.Security.AccessControl.RawAcl" /> object for the new <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object. Specify <see langword="null" /> to create an empty ACL.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Adds an Access Control Entry (ACE) with the specified settings to the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to add.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to add an ACE.</param>
            <param name="accessMask">The access rule for the new ACE.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new ACE.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new ACE.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Adds an Access Control Entry (ACE) with the specified settings to the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the new ACE.</summary>
            <param name="accessType">The type of access control (allow or deny) to add.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to add an ACE.</param>
            <param name="accessMask">The access rule for the new ACE.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new ACE.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new ACE.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the new ACE applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the new ACE.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)">
            <summary>Adds an Access Control Entry (ACE) with the specified settings to the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to add.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to add an ACE.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> for the new access.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Removes the specified access control rule from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an access control rule.</param>
            <param name="accessMask">The access mask for the rule to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the rule to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the rule to be removed.</param>
            <returns>
                <see langword="true" /> if this method successfully removes the specified access; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Removes the specified access control rule from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.</summary>
            <param name="accessType">The type of access control (allow or deny) to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an access control rule.</param>
            <param name="accessMask">The access mask for the access control rule to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the access control rule to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the access control rule to be removed.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the removed access control rule applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the removed access control rule.</param>
            <returns>
                <see langword="true" /> if this method successfully removes the specified access; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)">
            <summary>Removes the specified access control rule from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an access control rule.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> for which to remove access.</param>
            <returns>Returns <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Removes the specified Access Control Entry (ACE) from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an ACE.</param>
            <param name="accessMask">The access mask for the ACE to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the ACE to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the ACE to be removed.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Removes the specified Access Control Entry (ACE) from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the ACE to be removed.</summary>
            <param name="accessType">The type of access control (allow or deny) to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an ACE.</param>
            <param name="accessMask">The access mask for the ACE to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the ACE to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the ACE to be removed.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the removed ACE applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the removed ACE.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)">
            <summary>Removes the specified Access Control Entry (ACE) from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an ACE.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> for which to remove access.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Sets the specified access control for the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to set.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to set an ACE.</param>
            <param name="accessMask">The access rule for the new ACE.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new ACE.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new ACE.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Sets the specified access control for the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to set.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to set an ACE.</param>
            <param name="accessMask">The access rule for the new ACE.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new ACE.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new ACE.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the new ACE applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the new ACE.</param>
        </member>
        <member name="M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)">
            <summary>Sets the specified access control for the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="accessType">The type of access control (allow or deny) to set.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to set an ACE.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> for which to set access.</param>
        </member>
        <member name="T:System.Security.AccessControl.GenericAce">
            <summary>Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.</summary>
        </member>
        <member name="M:System.Security.AccessControl.GenericAce.Copy">
            <summary>Creates a deep copy of this Access Control Entry (ACE).</summary>
            <returns>The <see cref="T:System.Security.AccessControl.GenericAce" /> object that this method creates.</returns>
        </member>
        <member name="M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)">
            <summary>Creates a <see cref="T:System.Security.AccessControl.GenericAce" /> object from the specified binary data.</summary>
            <param name="binaryForm">The binary data from which to create the new <see cref="T:System.Security.AccessControl.GenericAce" /> object.</param>
            <param name="offset">The offset at which to begin unmarshaling.</param>
            <returns>The <see cref="T:System.Security.AccessControl.GenericAce" /> object this method creates.</returns>
        </member>
        <member name="M:System.Security.AccessControl.GenericAce.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Security.AccessControl.GenericAce" /> object is equal to the current <see cref="T:System.Security.AccessControl.GenericAce" /> object.</summary>
            <param name="o">The <see cref="T:System.Security.AccessControl.GenericAce" /> object to compare to the current <see cref="T:System.Security.AccessControl.GenericAce" /> object.</param>
            <returns>
                <see langword="true" /> if the specified <see cref="T:System.Security.AccessControl.GenericAce" /> object is equal to the current <see cref="T:System.Security.AccessControl.GenericAce" /> object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.GenericAce" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.GenericAce" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.GenericAcl" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.GenericAce.GetHashCode">
            <summary>Serves as a hash function for the <see cref="T:System.Security.AccessControl.GenericAce" /> class. The  <see cref="M:System.Security.AccessControl.GenericAce.GetHashCode" /> method is suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current <see cref="T:System.Security.AccessControl.GenericAce" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
            <summary>Determines whether the specified <see cref="T:System.Security.AccessControl.GenericAce" /> objects are considered equal.</summary>
            <param name="left">The first <see cref="T:System.Security.AccessControl.GenericAce" /> object to compare.</param>
            <param name="right">The second <see cref="T:System.Security.AccessControl.GenericAce" /> to compare.</param>
            <returns>
                <see langword="true" /> if the two <see cref="T:System.Security.AccessControl.GenericAce" /> objects are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)">
            <summary>Determines whether the specified <see cref="T:System.Security.AccessControl.GenericAce" /> objects are considered unequal.</summary>
            <param name="left">The first <see cref="T:System.Security.AccessControl.GenericAce" /> object to compare.</param>
            <param name="right">The second <see cref="T:System.Security.AccessControl.GenericAce" /> to compare.</param>
            <returns>
                <see langword="true" /> if the two <see cref="T:System.Security.AccessControl.GenericAce" /> objects are unequal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAce.AceFlags">
            <summary>Gets or sets the <see cref="T:System.Security.AccessControl.AceFlags" /> associated with this <see cref="T:System.Security.AccessControl.GenericAce" /> object.</summary>
            <returns>The <see cref="T:System.Security.AccessControl.AceFlags" /> associated with this <see cref="T:System.Security.AccessControl.GenericAce" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAce.AceType">
            <summary>Gets the type of this Access Control Entry (ACE).</summary>
            <returns>The type of this ACE.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAce.AuditFlags">
            <summary>Gets the audit information associated with this Access Control Entry (ACE).</summary>
            <returns>The audit information associated with this Access Control Entry (ACE).</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAce.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.GenericAce" /> object. This length should be used before marshaling the ACL into a binary array with the <see cref="M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.GenericAce" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAce.InheritanceFlags">
            <summary>Gets flags that specify the inheritance properties of this Access Control Entry (ACE).</summary>
            <returns>Flags that specify the inheritance properties of this ACE.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAce.IsInherited">
            <summary>Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.</summary>
            <returns>
                <see langword="true" /> if this ACE is inherited; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAce.PropagationFlags">
            <summary>Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).</summary>
            <returns>Flags that specify the inheritance propagation properties of this ACE.</returns>
        </member>
        <member name="T:System.Security.AccessControl.GenericAcl">
            <summary>Represents an access control list (ACL) and is the base class for the <see cref="T:System.Security.AccessControl.CommonAcl" />, <see cref="T:System.Security.AccessControl.DiscretionaryAcl" />, <see cref="T:System.Security.AccessControl.RawAcl" />, and <see cref="T:System.Security.AccessControl.SystemAcl" /> classes.</summary>
        </member>
        <member name="F:System.Security.AccessControl.GenericAcl.AclRevision">
            <summary>The revision level of the current <see cref="T:System.Security.AccessControl.GenericAcl" />. This value is returned by the <see cref="P:System.Security.AccessControl.GenericAcl.Revision" /> property for Access Control Lists (ACLs) that are not associated with Directory Services objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.GenericAcl.AclRevisionDS">
            <summary>The revision level of the current <see cref="T:System.Security.AccessControl.GenericAcl" />. This value is returned by the <see cref="P:System.Security.AccessControl.GenericAcl.Revision" /> property for Access Control Lists (ACLs) that are associated with Directory Services objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.GenericAcl.MaxBinaryLength">
            <summary>The maximum allowed binary length of a <see cref="T:System.Security.AccessControl.GenericAcl" /> object.</summary>
        </member>
        <member name="M:System.Security.AccessControl.GenericAcl.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.GenericAcl" /> class.</summary>
        </member>
        <member name="M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)">
            <summary>Copies each <see cref="T:System.Security.AccessControl.GenericAce" /> of the current <see cref="T:System.Security.AccessControl.GenericAcl" /> into the specified array.</summary>
            <param name="array">The array into which copies of the <see cref="T:System.Security.AccessControl.GenericAce" /> objects contained by the current <see cref="T:System.Security.AccessControl.GenericAcl" /> are placed.</param>
            <param name="index">The zero-based index of <paramref name="array" /> where the copying begins.</param>
        </member>
        <member name="M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.GenericAcl" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.GenericAcl" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.GenericAcl" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.GenericAcl.GetEnumerator">
            <summary>Retrieves an object that you can use to iterate through the access control entries (ACEs) in an access control list (ACL).</summary>
            <returns>An enumerator object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies each <see cref="T:System.Security.AccessControl.GenericAce" /> of the current <see cref="T:System.Security.AccessControl.GenericAcl" /> into the specified array.</summary>
            <param name="array">The array into which copies of the <see cref="T:System.Security.AccessControl.GenericAce" /> objects contained by the current <see cref="T:System.Security.AccessControl.GenericAcl" /> are placed.</param>
            <param name="index">The zero-based index of <paramref name="array" /> where the copying begins.</param>
        </member>
        <member name="M:System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns a new instance of the <see cref="T:System.Security.AccessControl.AceEnumerator" /> class cast as an instance of the <see cref="T:System.Collections.IEnumerator" /> interface.</summary>
            <returns>A new <see cref="T:System.Security.AccessControl.AceEnumerator" /> object, cast as an instance of the <see cref="T:System.Collections.IEnumerator" /> interface.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAcl.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.GenericAcl" /> object. This length should be used before marshaling the ACL into a binary array with the <see cref="M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.GenericAcl" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAcl.Count">
            <summary>Gets the number of access control entries (ACEs) in the current <see cref="T:System.Security.AccessControl.GenericAcl" /> object.</summary>
            <returns>The number of ACEs in the current <see cref="T:System.Security.AccessControl.GenericAcl" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAcl.IsSynchronized">
            <summary>This property is always set to <see langword="false" />. It is implemented only because it is required for the implementation of the <see cref="T:System.Collections.ICollection" /> interface.</summary>
            <returns>Always <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAcl.Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:System.Security.AccessControl.GenericAce" /> at the specified index.</summary>
            <param name="index">The zero-based index of the <see cref="T:System.Security.AccessControl.GenericAce" /> to get or set.</param>
            <returns>The <see cref="T:System.Security.AccessControl.GenericAce" /> at the specified index.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAcl.Revision">
            <summary>Gets the revision level of the <see cref="T:System.Security.AccessControl.GenericAcl" />.</summary>
            <returns>A byte value that specifies the revision level of the <see cref="T:System.Security.AccessControl.GenericAcl" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericAcl.SyncRoot">
            <summary>This property always returns <see langword="null" />. It is implemented only because it is required for the implementation of the <see cref="T:System.Collections.ICollection" /> interface.</summary>
            <returns>Always returns <see langword="null" />.</returns>
        </member>
        <member name="T:System.Security.AccessControl.GenericSecurityDescriptor">
            <summary>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</summary>
        </member>
        <member name="M:System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Returns an array of byte values that represents the information contained in this <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the Security Descriptor Definition Language (SDDL) representation of the specified sections of the security descriptor that this <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object represents.</summary>
            <param name="includeSections">Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.</param>
            <returns>The SDDL representation of the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported">
            <summary>Returns a boolean value that specifies whether the security descriptor associated with this  <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object can be converted to the Security Descriptor Definition Language (SDDL) format.</summary>
            <returns>
                <see langword="true" /> if the security descriptor associated with this  <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object can be converted to the Security Descriptor Definition Language (SDDL) format; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object. This length should be used before marshaling the ACL into a binary array with the <see cref="M:System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags">
            <summary>Gets values that specify behavior of the <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</summary>
            <returns>One or more values of the <see cref="T:System.Security.AccessControl.ControlFlags" /> enumeration combined with a logical OR operation.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericSecurityDescriptor.Group">
            <summary>Gets or sets the primary group for this <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</summary>
            <returns>The primary group for this <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericSecurityDescriptor.Owner">
            <summary>Gets or sets the owner of the object associated with this <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</summary>
            <returns>The owner of the object associated with this <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.GenericSecurityDescriptor.Revision">
            <summary>Gets the revision level of the <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" /> object.</summary>
            <returns>A byte value that specifies the revision level of the <see cref="T:System.Security.AccessControl.GenericSecurityDescriptor" />.</returns>
        </member>
        <member name="T:System.Security.AccessControl.InheritanceFlags">
            <summary>Inheritance flags specify the semantics of inheritance for access control entries (ACEs).</summary>
        </member>
        <member name="F:System.Security.AccessControl.InheritanceFlags.ContainerInherit">
            <summary>The ACE is inherited by child container objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.InheritanceFlags.None">
            <summary>The ACE is not inherited by child objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.InheritanceFlags.ObjectInherit">
            <summary>The ACE is inherited by child leaf objects.</summary>
        </member>
        <member name="T:System.Security.AccessControl.KnownAce">
            <summary>Encapsulates all Access Control Entry (ACE) types currently defined by Microsoft Corporation. All <see cref="T:System.Security.AccessControl.KnownAce" /> objects contain a 32-bit access mask and a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
        </member>
        <member name="P:System.Security.AccessControl.KnownAce.AccessMask">
            <summary>Gets or sets the access mask for this <see cref="T:System.Security.AccessControl.KnownAce" /> object.</summary>
            <returns>The access mask for this <see cref="T:System.Security.AccessControl.KnownAce" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.KnownAce.SecurityIdentifier">
            <summary>Gets or sets the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object associated with this <see cref="T:System.Security.AccessControl.KnownAce" /> object.</summary>
            <returns>The <see cref="T:System.Security.Principal.SecurityIdentifier" /> object associated with this <see cref="T:System.Security.AccessControl.KnownAce" /> object.</returns>
        </member>
        <member name="T:System.Security.AccessControl.NativeObjectSecurity">
            <summary>Provides the ability to control access to native objects without direct manipulation of Access Control Lists (ACLs). Native object types are defined by the <see cref="T:System.Security.AccessControl.ResourceType" /> enumeration.</summary>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> class with the specified values.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is a container object.</param>
            <param name="resourceType">The type of securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> class with the specified values. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is a container object.</param>
            <param name="resourceType">The type of securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="handle">The handle of the securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to include in this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object.</param>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> class with the specified values. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is a container object.</param>
            <param name="resourceType">The type of securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="handle">The handle of the securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to include in this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object.</param>
            <param name="exceptionFromErrorCode">A delegate implemented by integrators that provides custom exceptions.</param>
            <param name="exceptionContext">An object that contains contextual information about the source or destination of the exception.</param>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> class by using the specified values.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is a container object.</param>
            <param name="resourceType">The type of securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="exceptionFromErrorCode">A delegate implemented by integrators that provides custom exceptions.</param>
            <param name="exceptionContext">An object that contains contextual information about the source or destination of the exception.</param>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> class with the specified values. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is a container object.</param>
            <param name="resourceType">The type of securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="name">The name of the securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to include in this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object.</param>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.String,System.Security.AccessControl.AccessControlSections,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> class with the specified values. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is a container object.</param>
            <param name="resourceType">The type of securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="name">The name of the securable object with which the new <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to include in this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object.</param>
            <param name="exceptionFromErrorCode">A delegate implemented by integrators that provides custom exceptions.</param>
            <param name="exceptionContext">An object that contains contextual information about the source or destination of the exception.</param>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)">
            <summary>Saves the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object to permanent storage. We recommend.persist that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="handle">The handle of the securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</param>
            <exception cref="T:System.IO.FileNotFoundException">The securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated is either a directory or a file, and that directory or file could not be found.</exception>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)">
            <summary>Saves the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object to permanent storage. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="handle">The handle of the securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</param>
            <param name="exceptionContext">An object that contains contextual information about the source or destination of the exception.</param>
            <exception cref="T:System.IO.FileNotFoundException">The securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated is either a directory or a file, and that directory or file could not be found.</exception>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Saves the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object to permanent storage. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="name">The name of the securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</param>
            <exception cref="T:System.IO.FileNotFoundException">The securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated is either a directory or a file, and that directory or file could not be found.</exception>
        </member>
        <member name="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)">
            <summary>Saves the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object to permanent storage. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="name">The name of the securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</param>
            <param name="exceptionContext">An object that contains contextual information about the source or destination of the exception.</param>
            <exception cref="T:System.IO.FileNotFoundException">The securable object with which this <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated is either a directory or a file, and that directory or file could not be found.</exception>
        </member>
        <member name="T:System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode">
            <summary>Provides a way for integrators to map numeric error codes to specific exceptions that they create.</summary>
            <param name="errorCode">The numeric error code.</param>
            <param name="name">The name of the securable object with which the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="handle">The handle of the securable object with which the <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> object is associated.</param>
            <param name="context">An object that contains contextual information about the source or destination of the exception.</param>
            <returns>The <see cref="T:System.Exception" /> this delegate creates.</returns>
        </member>
        <member name="T:System.Security.AccessControl.ObjectAccessRule">
            <summary>Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> object also contains information about the type of object to which the rule applies, the type of child object that can inherit the rule, how the rule is inherited by child objects, and how that inheritance is propagated.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> class with the specified values.</summary>
            <param name="identity">The identity to which the access rule applies.  It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</param>
            <param name="isInherited">
                <see langword="true" /> if this rule is inherited from a parent container.</param>
            <param name="inheritanceFlags">Specifies the inheritance properties of the access rule.</param>
            <param name="propagationFlags">Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="objectType">The type of object to which the rule applies.</param>
            <param name="inheritedObjectType">The type of child object that can inherit the rule.</param>
            <param name="type">Specifies whether this rule allows or denies access.</param>
            <exception cref="T:System.ArgumentException">The value of the <paramref name="identity" /> parameter cannot be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />, or the <paramref name="type" /> parameter contains an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="accessMask" /> parameter is 0, or the <paramref name="inheritanceFlags" /> or <paramref name="propagationFlags" /> parameters contain unrecognized flag values.</exception>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAccessRule.InheritedObjectType">
            <summary>Gets the type of child object that can inherit the <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> object.</summary>
            <returns>The type of child object that can inherit the <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAccessRule.ObjectFlags">
            <summary>Gets flags that specify if the <see cref="P:System.Security.AccessControl.ObjectAccessRule.ObjectType" /> and <see cref="P:System.Security.AccessControl.ObjectAccessRule.InheritedObjectType" /> properties of the <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> object contain valid values.</summary>
            <returns>
                <see cref="F:System.Security.AccessControl.ObjectAceFlags.ObjectAceTypePresent" /> specifies that the <see cref="P:System.Security.AccessControl.ObjectAccessRule.ObjectType" /> property contains a valid value. <see cref="F:System.Security.AccessControl.ObjectAceFlags.InheritedObjectAceTypePresent" /> specifies that the <see cref="P:System.Security.AccessControl.ObjectAccessRule.InheritedObjectType" /> property contains a valid value. These values can be combined with a logical OR.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAccessRule.ObjectType">
            <summary>Gets the type of object to which the <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> applies.</summary>
            <returns>The type of object to which the <see cref="T:System.Security.AccessControl.ObjectAccessRule" /> applies.</returns>
        </member>
        <member name="T:System.Security.AccessControl.ObjectAce">
            <summary>Controls access to Directory Services objects. This class represents an Access Control Entry (ACE) associated with a directory object.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])">
            <summary>Initiates a new instance of the <see cref="T:System.Security.AccessControl.ObjectAce" /> class.</summary>
            <param name="aceFlags">The inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).</param>
            <param name="qualifier">The use of the new ACE.</param>
            <param name="accessMask">The access mask for the ACE.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> associated with the new ACE.</param>
            <param name="flags">Whether the <paramref name="type" /> and <paramref name="inheritedType" /> parameters contain valid object GUIDs.</param>
            <param name="type">A GUID that identifies the object type to which the new ACE applies.</param>
            <param name="inheritedType">A GUID that identifies the object type that can inherit the new ACE.</param>
            <param name="isCallback">
                <see langword="true" /> if the new ACE is a callback type ACE.</param>
            <param name="opaque">Opaque data associated with the new ACE. This is allowed only for callback ACE types. The length of this array must not be greater than the return value of the <see cref="M:System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)" /> method.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The qualifier parameter contains an invalid value or the length of the value of the opaque parameter is greater than the return value of the <see cref="M:System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)" /> method.</exception>
        </member>
        <member name="M:System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.ObjectAce" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.ObjectAce" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.ObjectAce" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)">
            <summary>Returns the maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).</summary>
            <param name="isCallback">True if the <see cref="T:System.Security.AccessControl.ObjectAce" /> is a callback ACE type.</param>
            <returns>The maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAce.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.ObjectAce" /> object. This length should be used before marshaling the ACL into a binary array with the <see cref="M:System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.ObjectAce" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAce.InheritedObjectAceType">
            <summary>Gets or sets the GUID of the object type that can inherit the Access Control Entry (ACE) that this <see cref="T:System.Security.AccessControl.ObjectAce" /> object represents.</summary>
            <returns>The GUID of the object type that can inherit the Access Control Entry (ACE) that this <see cref="T:System.Security.AccessControl.ObjectAce" /> object represents.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAce.ObjectAceFlags">
            <summary>Gets or sets flags that specify whether the <see cref="P:System.Security.AccessControl.ObjectAce.ObjectAceType" /> and <see cref="P:System.Security.AccessControl.ObjectAce.InheritedObjectAceType" /> properties contain values that identify valid object types.</summary>
            <returns>On or more members of the <see cref="T:System.Security.AccessControl.ObjectAceFlags" /> enumeration combined with a logical OR operation.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAce.ObjectAceType">
            <summary>Gets or sets the GUID of the object type associated with this <see cref="T:System.Security.AccessControl.ObjectAce" /> object.</summary>
            <returns>The GUID of the object type associated with this <see cref="T:System.Security.AccessControl.ObjectAce" /> object.</returns>
        </member>
        <member name="T:System.Security.AccessControl.ObjectAceFlags">
            <summary>Specifies the presence of object types for Access Control Entries (ACEs).</summary>
        </member>
        <member name="F:System.Security.AccessControl.ObjectAceFlags.InheritedObjectAceTypePresent">
            <summary>The type of object that can inherit the ACE.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ObjectAceFlags.None">
            <summary>No object types are present.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ObjectAceFlags.ObjectAceTypePresent">
            <summary>The type of object that is associated with the ACE is present.</summary>
        </member>
        <member name="T:System.Security.AccessControl.ObjectAuditRule">
            <summary>Represents a combination of a user's identity, an access mask, and audit conditions. An <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> object also contains information about the type of object to which the rule applies, the type of child object that can inherit the rule, how the rule is inherited by child objects, and how that inheritance is propagated.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> class.</summary>
            <param name="identity">The identity to which the access rule applies.  It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</param>
            <param name="isInherited">
                <see langword="true" /> if this rule is inherited from a parent container.</param>
            <param name="inheritanceFlags">Specifies the inheritance properties of the access rule.</param>
            <param name="propagationFlags">Whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="objectType">The type of object to which the rule applies.</param>
            <param name="inheritedObjectType">The type of child object that can inherit the rule.</param>
            <param name="auditFlags">The audit conditions.</param>
            <exception cref="T:System.ArgumentException">The value of the <paramref name="identity" /> parameter cannot be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />, or the <paramref name="type" /> parameter contains an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="accessMask" /> parameter is 0, or the <paramref name="inheritanceFlags" /> or <paramref name="propagationFlags" /> parameters contain unrecognized flag values.</exception>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAuditRule.InheritedObjectType">
            <summary>Gets the type of child object that can inherit the <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> object.</summary>
            <returns>The type of child object that can inherit the <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAuditRule.ObjectFlags">
            <summary>
                <see cref="P:System.Security.AccessControl.ObjectAuditRule.ObjectType" /> and <see cref="P:System.Security.AccessControl.ObjectAuditRule.InheritedObjectType" /> properties of the <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> object contain valid values.</summary>
            <returns>
                <see cref="F:System.Security.AccessControl.ObjectAceFlags.ObjectAceTypePresent" /> specifies that the <see cref="P:System.Security.AccessControl.ObjectAuditRule.ObjectType" /> property contains a valid value. <see cref="F:System.Security.AccessControl.ObjectAceFlags.InheritedObjectAceTypePresent" /> specifies that the <see cref="P:System.Security.AccessControl.ObjectAuditRule.InheritedObjectType" /> property contains a valid value. These values can be combined with a logical OR.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectAuditRule.ObjectType">
            <summary>Gets the type of object to which the <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> applies.</summary>
            <returns>The type of object to which the <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> applies.</returns>
        </member>
        <member name="T:System.Security.AccessControl.ObjectSecurity">
            <summary>Provides the ability to control access to objects without direct manipulation of Access Control Lists (ACLs). This class is the abstract base class for the <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> and <see cref="T:System.Security.AccessControl.DirectoryObjectSecurity" /> classes.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.ObjectSecurity" /> class.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.#ctor(System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.ObjectSecurity" /> class.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is a container object.</param>
            <param name="isDS">True if the new <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is a directory object.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.#ctor(System.Security.AccessControl.CommonSecurityDescriptor)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.ObjectSecurity" /> class.</summary>
            <param name="securityDescriptor">The <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> of the new <see cref="T:System.Security.AccessControl.CommonObjectSecurity" /> instance.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AccessRule" /> class with the specified values.</summary>
            <param name="identityReference">The identity to which the access rule applies.  It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</param>
            <param name="isInherited">true if this rule is inherited from a parent container.</param>
            <param name="inheritanceFlags">Specifies the inheritance properties of the access rule.</param>
            <param name="propagationFlags">Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="type">Specifies the valid access control type.</param>
            <returns>The <see cref="T:System.Security.AccessControl.AccessRule" /> object that this method creates.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule" /> class with the specified values.</summary>
            <param name="identityReference">The identity to which the audit rule applies.  It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
            <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</param>
            <param name="isInherited">
                <see langword="true" /> if this rule is inherited from a parent container.</param>
            <param name="inheritanceFlags">Specifies the inheritance properties of the audit rule.</param>
            <param name="propagationFlags">Specifies whether inherited audit rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
            <param name="flags">Specifies the conditions for which the rule is audited.</param>
            <returns>The <see cref="T:System.Security.AccessControl.AuditRule" /> object that this method creates.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)">
            <summary>Gets the primary group associated with the specified owner.</summary>
            <param name="targetType">The owner for which to get the primary group.</param>
            <returns>The primary group associated with the specified owner.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)">
            <summary>Gets the owner associated with the specified primary group.</summary>
            <param name="targetType">The primary group for which to get the owner.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="targetType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="targetType" /> is not an <see cref="T:System.Security.Principal.IdentityReference" /> type.</exception>
            <exception cref="T:System.Security.Principal.IdentityNotMappedException">Some or all identity references could not be translated.</exception>
            <exception cref="T:System.SystemException">A Win32 error code was returned.</exception>
            <returns>The owner associated with the specified group.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm">
            <summary>Returns an array of byte values that represents the security descriptor information for this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <returns>An array of byte values that represents the security descriptor for this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object. This method returns <see langword="null" /> if there is no security information in this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the Security Descriptor Definition Language (SDDL) representation of the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <param name="includeSections">Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.</param>
            <returns>The SDDL representation of the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported">
            <summary>Returns a Boolean value that specifies whether the security descriptor associated with this  <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object can be converted to the Security Descriptor Definition Language (SDDL) format.</summary>
            <returns>
                <see langword="true" /> if the security descriptor associated with this  <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object can be converted to the Security Descriptor Definition Language (SDDL) format; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)">
            <summary>Applies the specified modification to the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <param name="modification">The modification to apply to the DACL.</param>
            <param name="rule">The access rule to modify.</param>
            <param name="modified">
                <see langword="true" /> if the DACL is successfully modified; otherwise, <see langword="false" />.</param>
            <returns>
                <see langword="true" /> if the DACL is successfully modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)">
            <summary>Applies the specified modification to the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <param name="modification">The modification to apply to the DACL.</param>
            <param name="rule">The access rule to modify.</param>
            <param name="modified">
                <see langword="true" /> if the DACL is actually modified; otherwise, <see langword="false" />.</param>
            <returns>
                <see langword="true" /> if the DACL is successfully modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)">
            <summary>Applies the specified modification to the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <param name="modification">The modification to apply to the SACL.</param>
            <param name="rule">The audit rule to modify.</param>
            <param name="modified">
                <see langword="true" /> if the SACL is actually modified; otherwise, <see langword="false" />.</param>
            <returns>
                <see langword="true" /> if the SACL is successfully modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)">
            <summary>Applies the specified modification to the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <param name="modification">The modification to apply to the SACL.</param>
            <param name="rule">The audit rule to modify.</param>
            <param name="modified">
                <see langword="true" /> if the SACL is successfully modified; otherwise, <see langword="false" />.</param>
            <returns>
                <see langword="true" /> if the SACL is successfully modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Saves the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object to permanent storage. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="enableOwnershipPrivilege">
                <see langword="true" /> to enable the privilege that allows the caller to take ownership of the object.</param>
            <param name="name">The name used to retrieve the persisted information.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)">
            <summary>Saves the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object to permanent storage. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="handle">The handle used to retrieve the persisted information.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Saves the specified sections of the security descriptor associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object to permanent storage. We recommend that the values of the <paramref name="includeSections" /> parameters passed to the constructor and persist methods be identical.</summary>
            <param name="name">The name used to retrieve the persisted information.</param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections" /> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)">
            <summary>Removes all access rules associated with the specified <see cref="T:System.Security.Principal.IdentityReference" />.</summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> for which to remove all access rules.</param>
            <exception cref="T:System.InvalidOperationException">All access rules are not in canonical order.</exception>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)">
            <summary>Removes all audit rules associated with the specified <see cref="T:System.Security.Principal.IdentityReference" />.</summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> for which to remove all audit rules.</param>
            <exception cref="T:System.InvalidOperationException">All audit rules are not in canonical order.</exception>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.ReadLock">
            <summary>Locks this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object for read access.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.ReadUnlock">
            <summary>Unlocks this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object for read access.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)">
            <summary>Sets or removes protection of the access rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object. Protected access rules cannot be modified by parent objects through inheritance.</summary>
            <param name="isProtected">
                <see langword="true" /> to protect the access rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object from inheritance; <see langword="false" /> to allow inheritance.</param>
            <param name="preserveInheritance">
                <see langword="true" /> to preserve inherited access rules; <see langword="false" /> to remove inherited access rules. This parameter is ignored if <paramref name="isProtected" /> is <see langword="false" />.</param>
            <exception cref="T:System.InvalidOperationException">This method attempts to remove inherited rules from a non-canonical Discretionary Access Control List (DACL).</exception>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)">
            <summary>Sets or removes protection of the audit rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object. Protected audit rules cannot be modified by parent objects through inheritance.</summary>
            <param name="isProtected">
                <see langword="true" /> to protect the audit rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object from inheritance; <see langword="false" /> to allow inheritance.</param>
            <param name="preserveInheritance">
                <see langword="true" /> to preserve inherited audit rules; <see langword="false" /> to remove inherited audit rules. This parameter is ignored if <paramref name="isProtected" /> is <see langword="false" />.</param>
            <exception cref="T:System.InvalidOperationException">This method attempts to remove inherited rules from a non-canonical System Access Control List (SACL).</exception>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)">
            <summary>Sets the primary group for the security descriptor associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <param name="identity">The primary group to set.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)">
            <summary>Sets the owner for the security descriptor associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <param name="identity">The owner to set.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])">
            <summary>Sets the security descriptor for this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object from the specified array of byte values.</summary>
            <param name="binaryForm">The array of bytes from which to set the security descriptor.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)">
            <summary>Sets the specified sections of the security descriptor for this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object from the specified array of byte values.</summary>
            <param name="binaryForm">The array of bytes from which to set the security descriptor.</param>
            <param name="includeSections">The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)">
            <summary>Sets the security descriptor for this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object from the specified Security Descriptor Definition Language (SDDL) string.</summary>
            <param name="sddlForm">The SDDL string from which to set the security descriptor.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Sets the specified sections of the security descriptor for this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object from the specified Security Descriptor Definition Language (SDDL) string.</summary>
            <param name="sddlForm">The SDDL string from which to set the security descriptor.</param>
            <param name="includeSections">The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.WriteLock">
            <summary>Locks this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object for write access.</summary>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity.WriteUnlock">
            <summary>Unlocks this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object for write access.</summary>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AccessRightType">
            <summary>Gets the <see cref="T:System.Type" /> of the securable object associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</summary>
            <returns>The type of the securable object associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AccessRulesModified">
            <summary>Gets or sets a Boolean value that specifies whether the access rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object have been modified.</summary>
            <returns>
                <see langword="true" /> if the access rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object have been modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AccessRuleType">
            <summary>Gets the <see cref="T:System.Type" /> of the object associated with the access rules of this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object. The <see cref="T:System.Type" /> object must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <returns>The type of the object associated with the access rules of this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical">
            <summary>Gets a Boolean value that specifies whether the access rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object are in canonical order.</summary>
            <returns>
                <see langword="true" /> if the access rules are in canonical order; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected">
            <summary>Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is protected.</summary>
            <returns>
                <see langword="true" /> if the DACL is protected; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical">
            <summary>Gets a Boolean value that specifies whether the audit rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object are in canonical order.</summary>
            <returns>
                <see langword="true" /> if the audit rules are in canonical order; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected">
            <summary>Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is protected.</summary>
            <returns>
                <see langword="true" /> if the SACL is protected; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AuditRulesModified">
            <summary>Gets or sets a Boolean value that specifies whether the audit rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object have been modified.</summary>
            <returns>
                <see langword="true" /> if the audit rules associated with this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object have been modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.AuditRuleType">
            <summary>Gets the <see cref="T:System.Type" /> object associated with the audit rules of this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object. The <see cref="T:System.Type" /> object must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <returns>The type of the object associated with the audit rules of this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.GroupModified">
            <summary>Gets or sets a Boolean value that specifies whether the group associated with the securable object has been modified.</summary>
            <returns>
                <see langword="true" /> if the group associated with the securable object has been modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.IsContainer">
            <summary>Gets a Boolean value that specifies whether this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is a container object.</summary>
            <returns>
                <see langword="true" /> if the <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is a container object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.IsDS">
            <summary>Gets a Boolean value that specifies whether this <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is a directory object.</summary>
            <returns>
                <see langword="true" /> if the <see cref="T:System.Security.AccessControl.ObjectSecurity" /> object is a directory object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.OwnerModified">
            <summary>Gets or sets a Boolean value that specifies whether the owner of the securable object has been modified.</summary>
            <returns>
                <see langword="true" /> if the owner of the securable object has been modified; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity.SecurityDescriptor">
            <summary>Gets the security descriptor for this instance.</summary>
            <returns>The security descriptor for this instance.</returns>
        </member>
        <member name="T:System.Security.AccessControl.ObjectSecurity`1">
            <summary>Provides the ability to control access to objects without direct manipulation of Access Control Lists (ACLs); also grants the ability to type-cast access rights.</summary>
            <typeparam name="T">The access rights for the object.</typeparam>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.#ctor(System.Boolean,System.Security.AccessControl.ResourceType)">
            <summary>Initializes a new instance of the ObjectSecurity`1 class.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.ObjectSecurity`1" /> object is a container object.</param>
            <param name="resourceType">The type of resource.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)">
            <summary>Initializes a new instance of the ObjectSecurity`1 class.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.ObjectSecurity`1" /> object is a container object.</param>
            <param name="resourceType">The type of resource.</param>
            <param name="safeHandle">A handle.</param>
            <param name="includeSections">The sections to include.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)">
            <summary>Initializes a new instance of the ObjectSecurity`1 class.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.ObjectSecurity`1" /> object is a container object.</param>
            <param name="resourceType">The type of resource.</param>
            <param name="safeHandle">A handle.</param>
            <param name="includeSections">The sections to include.</param>
            <param name="exceptionFromErrorCode">A delegate implemented by integrators that provides custom exceptions.</param>
            <param name="exceptionContext">An object that contains contextual information about the source or destination of the exception.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Initializes a new instance of the ObjectSecurity`1 class.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.ObjectSecurity`1" /> object is a container object.</param>
            <param name="resourceType">The type of resource.</param>
            <param name="name">The name of the securable object with which the new <see cref="T:System.Security.AccessControl.ObjectSecurity`1" /> object is associated.</param>
            <param name="includeSections">The sections to include.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.String,System.Security.AccessControl.AccessControlSections,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)">
            <summary>Initializes a new instance of the ObjectSecurity`1 class.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.ObjectSecurity`1" /> object is a container object.</param>
            <param name="resourceType">The type of resource.</param>
            <param name="name">The name of the securable object with which the new <see cref="T:System.Security.AccessControl.ObjectSecurity`1" /> object is associated.</param>
            <param name="includeSections">The sections to include.</param>
            <param name="exceptionFromErrorCode">A delegate implemented by integrators that provides custom exceptions.</param>
            <param name="exceptionContext">An object that contains contextual information about the source or destination of the exception.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the ObjectAccessRule class that represents a new access control rule for the associated security object.</summary>
            <param name="identityReference">Represents a user account.</param>
            <param name="accessMask">The access type.</param>
            <param name="isInherited">
                <see langword="true" /> if the access rule is inherited; otherwise, <see langword="false" />.</param>
            <param name="inheritanceFlags">Specifies how to propagate access masks to child objects.</param>
            <param name="propagationFlags">Specifies how to propagate Access Control Entries (ACEs) to child objects.</param>
            <param name="type">Specifies whether access is allowed or denied.</param>
            <returns>Represents a new access control rule for the specified user, with the specified access rights, access control, and flags.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.AddAccessRule(System.Security.AccessControl.AccessRule{`0})">
            <summary>Adds the specified access rule to the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.AddAuditRule(System.Security.AccessControl.AuditRule{`0})">
            <summary>Adds the specified audit rule to the System Access Control List (SACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The audit rule to add.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule" /> class representing the specified audit rule for the specified user.</summary>
            <param name="identityReference">Represents a user account.</param>
            <param name="accessMask">An integer that specifies an access type.</param>
            <param name="isInherited">
                <see langword="true" /> if the access rule is inherited; otherwise, <see langword="false" />.</param>
            <param name="inheritanceFlags">Specifies how to propagate access masks to child objects.</param>
            <param name="propagationFlags">Specifies how to propagate Access Control Entries (ACEs) to child objects.</param>
            <param name="flags">Describes the type of auditing to perform.</param>
            <returns>The specified audit rule for the specified user.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.Persist(System.Runtime.InteropServices.SafeHandle)">
            <summary>Saves the security descriptor associated with this ObjectSecurity`1 object to permanent storage, using the specified handle.</summary>
            <param name="handle">The handle of the securable object with which this ObjectSecurity`1 object is associated.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.Persist(System.String)">
            <summary>Saves the security descriptor associated with this ObjectSecurity`1 object to permanent storage, using the specified name.</summary>
            <param name="name">The name of the securable object with which this ObjectSecurity`1 object is associated.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.RemoveAccessRule(System.Security.AccessControl.AccessRule{`0})">
            <summary>Removes access rules that contain the same security identifier and access mask as the specified access rule from the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The rule to remove.</param>
            <returns>
                <see langword="true" /> if the access rule was successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule{`0})">
            <summary>Removes all access rules that have the same security identifier as the specified access rule from the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The access rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule{`0})">
            <summary>Removes all access rules that exactly match the specified access rule from the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The access rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.RemoveAuditRule(System.Security.AccessControl.AuditRule{`0})">
            <summary>Removes audit rules that contain the same security identifier and access mask as the specified audit rule from the System Access Control List (SACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The audit rule to remove.</param>
            <returns>
                <see langword="true" /> if the object was removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule{`0})">
            <summary>Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The audit rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule{`0})">
            <summary>Removes all audit rules that exactly match the specified audit rule from the System Access Control List (SACL) associated with this ObjectSecurity`1 object.</summary>
            <param name="rule">The audit rule to remove.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.ResetAccessRule(System.Security.AccessControl.AccessRule{`0})">
            <summary>Removes all access rules in the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object and then adds the specified access rule.</summary>
            <param name="rule">The access rule to reset.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.SetAccessRule(System.Security.AccessControl.AccessRule{`0})">
            <summary>Removes all access rules that contain the same security identifier and qualifier as the specified access rule in the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object and then adds the specified access rule.</summary>
            <param name="rule">The access rule to set.</param>
        </member>
        <member name="M:System.Security.AccessControl.ObjectSecurity`1.SetAuditRule(System.Security.AccessControl.AuditRule{`0})">
            <summary>Removes all audit rules that contain the same security identifier and qualifier as the specified audit rule in the System Access Control List (SACL) associated with this ObjectSecurity`1 object and then adds the specified audit rule.</summary>
            <param name="rule">The audit rule to set.</param>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity`1.AccessRightType">
            <summary>Gets the Type of the securable object associated with this ObjectSecurity`1 object.</summary>
            <returns>The type of the securable object associated with the current instance.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity`1.AccessRuleType">
            <summary>Gets the Type of the object associated with the access rules of this ObjectSecurity`1 object.</summary>
            <returns>The Type of the object associated with the access rules of the current instance.</returns>
        </member>
        <member name="P:System.Security.AccessControl.ObjectSecurity`1.AuditRuleType">
            <summary>Gets the Type object associated with the audit rules of this ObjectSecurity`1 object.</summary>
            <returns>The Type object associated with the audit rules of the current instance.</returns>
        </member>
        <member name="T:System.Security.AccessControl.PrivilegeNotHeldException">
            <summary>The exception that is thrown when a method in the <see cref="N:System.Security.AccessControl" /> namespace attempts to enable a privilege that it does not have.</summary>
        </member>
        <member name="M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.PrivilegeNotHeldException" /> class.</summary>
        </member>
        <member name="M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.PrivilegeNotHeldException" /> class by using the specified privilege.</summary>
            <param name="privilege">The privilege that is not enabled.</param>
        </member>
        <member name="M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.PrivilegeNotHeldException" /> class by using the specified exception.</summary>
            <param name="privilege">The privilege that is not enabled.</param>
            <param name="inner">The exception that is the cause of the current exception. If the <c>innerException</c> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
        </member>
        <member name="M:System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the <paramref name="info" /> parameter with information about the exception.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName">
            <summary>Gets the name of the privilege that is not enabled.</summary>
            <returns>The name of the privilege that the method failed to enable.</returns>
        </member>
        <member name="T:System.Security.AccessControl.PropagationFlags">
            <summary>Specifies how Access Control Entries (ACEs) are propagated to child objects.  These flags are significant only if inheritance flags are present.</summary>
        </member>
        <member name="F:System.Security.AccessControl.PropagationFlags.InheritOnly">
            <summary>Specifies that the ACE is propagated only to child objects. This includes both container and leaf child objects.</summary>
        </member>
        <member name="F:System.Security.AccessControl.PropagationFlags.None">
            <summary>Specifies that no inheritance flags are set.</summary>
        </member>
        <member name="F:System.Security.AccessControl.PropagationFlags.NoPropagateInherit">
            <summary>Specifies that the ACE is not propagated to child objects.</summary>
        </member>
        <member name="T:System.Security.AccessControl.QualifiedAce">
            <summary>Represents an Access Control Entry (ACE) that contains a qualifier. The qualifier, represented by an <see cref="T:System.Security.AccessControl.AceQualifier" /> object, specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms. The <see cref="T:System.Security.AccessControl.QualifiedAce" /> class is the abstract base class for the <see cref="T:System.Security.AccessControl.CommonAce" /> and <see cref="T:System.Security.AccessControl.ObjectAce" /> classes.</summary>
        </member>
        <member name="M:System.Security.AccessControl.QualifiedAce.GetOpaque">
            <summary>Returns the opaque callback data associated with this <see cref="T:System.Security.AccessControl.QualifiedAce" /> object.</summary>
            <returns>An array of byte values that represents the opaque callback data associated with this <see cref="T:System.Security.AccessControl.QualifiedAce" /> object.</returns>
        </member>
        <member name="M:System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])">
            <summary>Sets the opaque callback data associated with this <see cref="T:System.Security.AccessControl.QualifiedAce" /> object.</summary>
            <param name="opaque">An array of byte values that represents the opaque callback data for this <see cref="T:System.Security.AccessControl.QualifiedAce" /> object.</param>
        </member>
        <member name="P:System.Security.AccessControl.QualifiedAce.AceQualifier">
            <summary>Gets a value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.</summary>
            <returns>A value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.</returns>
        </member>
        <member name="P:System.Security.AccessControl.QualifiedAce.IsCallback">
            <summary>Specifies whether this <see cref="T:System.Security.AccessControl.QualifiedAce" /> object contains callback data.</summary>
            <returns>
                <see langword="true" /> if this <see cref="T:System.Security.AccessControl.QualifiedAce" /> object contains callback data; otherwise, false.</returns>
        </member>
        <member name="P:System.Security.AccessControl.QualifiedAce.OpaqueLength">
            <summary>Gets the length of the opaque callback data associated with this <see cref="T:System.Security.AccessControl.QualifiedAce" /> object. This property is valid only for callback Access Control Entries (ACEs).</summary>
            <returns>The length of the opaque callback data.</returns>
        </member>
        <member name="T:System.Security.AccessControl.RawAcl">
            <summary>Represents an Access Control List (ACL).</summary>
        </member>
        <member name="M:System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RawAcl" /> class with the specified revision level.</summary>
            <param name="revision">The revision level of the new Access Control List (ACL).</param>
            <param name="capacity">The number of Access Control Entries (ACEs) this <see cref="T:System.Security.AccessControl.RawAcl" /> object can contain. This number is to be used only as a hint.</param>
        </member>
        <member name="M:System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RawAcl" /> class from the specified binary form.</summary>
            <param name="binaryForm">An array of byte values that represent an Access Control List (ACL).</param>
            <param name="offset">The offset in the <paramref name="binaryForm" /> parameter at which to begin unmarshaling data.</param>
        </member>
        <member name="M:System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Marshals the contents of the <see cref="T:System.Security.AccessControl.RawAcl" /> object into the specified byte array beginning at the specified offset.</summary>
            <param name="binaryForm">The byte array into which the contents of the <see cref="T:System.Security.AccessControl.RawAcl" /> is marshaled.</param>
            <param name="offset">The offset at which to start marshaling.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.RawAcl" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)">
            <summary>Inserts the specified Access Control Entry (ACE) at the specified index.</summary>
            <param name="index">The position at which to add the new ACE. Specify the value of the <see cref="P:System.Security.AccessControl.RawAcl.Count" /> property to insert an ACE at the end of the <see cref="T:System.Security.AccessControl.RawAcl" /> object.</param>
            <param name="ace">The ACE to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is negative or too high to allow the entire <see cref="T:System.Security.AccessControl.GenericAcl" /> to be copied into <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)">
            <summary>Removes the Access Control Entry (ACE) at the specified location.</summary>
            <param name="index">The zero-based index of the ACE to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="index" /> parameter is higher than the value of the <see cref="P:System.Security.AccessControl.RawAcl.Count" /> property minus one or is negative.</exception>
        </member>
        <member name="P:System.Security.AccessControl.RawAcl.BinaryLength">
            <summary>Gets the length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.RawAcl" /> object. This length should be used before marshaling the ACL into a binary array with the <see cref="M:System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)" /> method.</summary>
            <returns>The length, in bytes, of the binary representation of the current <see cref="T:System.Security.AccessControl.RawAcl" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawAcl.Count">
            <summary>Gets the number of access control entries (ACEs) in the current <see cref="T:System.Security.AccessControl.RawAcl" /> object.</summary>
            <returns>The number of ACEs in the current <see cref="T:System.Security.AccessControl.RawAcl" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawAcl.Item(System.Int32)">
            <summary>Gets or sets the Access Control Entry (ACE) at the specified index.</summary>
            <param name="index">The zero-based index of the ACE to get or set.</param>
            <returns>The ACE at the specified index.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawAcl.Revision">
            <summary>Gets the revision level of the <see cref="T:System.Security.AccessControl.RawAcl" />.</summary>
            <returns>A byte value that specifies the revision level of the <see cref="T:System.Security.AccessControl.RawAcl" />.</returns>
        </member>
        <member name="T:System.Security.AccessControl.RawSecurityDescriptor">
            <summary>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</summary>
        </member>
        <member name="M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> class from the specified array of byte values.</summary>
            <param name="binaryForm">The array of byte values from which to create the new <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</param>
            <param name="offset">The offset in the  <paramref name="binaryForm" /> array at which to begin copying.</param>
        </member>
        <member name="M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> class with the specified values.</summary>
            <param name="flags">Flags that specify behavior of the new <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</param>
            <param name="owner">The owner for the new <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</param>
            <param name="group">The primary group for the new <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</param>
            <param name="systemAcl">The System Access Control List (SACL) for the new <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</param>
            <param name="discretionaryAcl">The Discretionary Access Control List (DACL) for the new <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</param>
        </member>
        <member name="M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> class from the specified Security Descriptor Definition Language (SDDL) string.</summary>
            <param name="sddlForm">The SDDL string from which to create the new <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</param>
            <exception cref="T:System.ArgumentException">The SDDL form of a security descriptor object is invalid.</exception>
        </member>
        <member name="M:System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)">
            <summary>Sets the <see cref="P:System.Security.AccessControl.RawSecurityDescriptor.ControlFlags" /> property of this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object to the specified value.</summary>
            <param name="flags">One or more values of the <see cref="T:System.Security.AccessControl.ControlFlags" /> enumeration combined with a logical OR operation.</param>
        </member>
        <member name="P:System.Security.AccessControl.RawSecurityDescriptor.ControlFlags">
            <summary>Gets values that specify behavior of the <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</summary>
            <returns>One or more values of the <see cref="T:System.Security.AccessControl.ControlFlags" /> enumeration combined with a logical OR operation.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl">
            <summary>Gets or sets the Discretionary Access Control List (DACL) for this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object. The DACL contains access rules.</summary>
            <returns>The DACL for this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawSecurityDescriptor.Group">
            <summary>Gets or sets the primary group for this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</summary>
            <returns>The primary group for this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawSecurityDescriptor.Owner">
            <summary>Gets or sets the owner of the object associated with this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</summary>
            <returns>The owner of the object associated with this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl">
            <summary>Gets or sets a byte value that represents the resource manager control bits associated with this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</summary>
            <returns>A byte value that represents the resource manager control bits associated with this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</returns>
        </member>
        <member name="P:System.Security.AccessControl.RawSecurityDescriptor.SystemAcl">
            <summary>Gets or sets the System Access Control List (SACL) for this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object. The SACL contains audit rules.</summary>
            <returns>The SACL for this <see cref="T:System.Security.AccessControl.RawSecurityDescriptor" /> object.</returns>
        </member>
        <member name="T:System.Security.AccessControl.ResourceType">
            <summary>Specifies the defined native object types.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.DSObject">
            <summary>A directory service (DS) object or a property set or property of a directory service object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.DSObjectAll">
            <summary>A directory service object and all of its property sets and properties.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.FileObject">
            <summary>A file or directory.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.KernelObject">
            <summary>A local kernel object.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.LMShare">
            <summary>A network share.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.Printer">
            <summary>A printer.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.ProviderDefined">
            <summary>An object defined by a provider.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.RegistryKey">
            <summary>A registry key.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.RegistryWow6432Key">
            <summary>An object for a registry entry under WOW64.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.Service">
            <summary>A Windows service.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.Unknown">
            <summary>An unknown object type.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.WindowObject">
            <summary>A window station or desktop object on the local computer.</summary>
        </member>
        <member name="F:System.Security.AccessControl.ResourceType.WmiGuidObject">
            <summary>A Windows Management Instrumentation (WMI) object.</summary>
        </member>
        <member name="T:System.Security.AccessControl.SecurityInfos">
            <summary>Specifies the section of a security descriptor to be queried or set.</summary>
        </member>
        <member name="F:System.Security.AccessControl.SecurityInfos.DiscretionaryAcl">
            <summary>Specifies the discretionary access control list (DACL).</summary>
        </member>
        <member name="F:System.Security.AccessControl.SecurityInfos.Group">
            <summary>Specifies the primary group identifier.</summary>
        </member>
        <member name="F:System.Security.AccessControl.SecurityInfos.Owner">
            <summary>Specifies the owner identifier.</summary>
        </member>
        <member name="F:System.Security.AccessControl.SecurityInfos.SystemAcl">
            <summary>Specifies the system access control list (SACL).</summary>
        </member>
        <member name="T:System.Security.AccessControl.SystemAcl">
            <summary>Represents a System Access Control List (SACL).</summary>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SystemAcl" /> class with the specified values.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object is a container.</param>
            <param name="isDS">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object is a directory object Access Control List (ACL).</param>
            <param name="revision">The revision level of the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object.</param>
            <param name="capacity">The number of Access Control Entries (ACEs) this <see cref="T:System.Security.AccessControl.SystemAcl" /> object can contain. This number is to be used only as a hint.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SystemAcl" /> class with the specified values.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object is a container.</param>
            <param name="isDS">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object is a directory object Access Control List (ACL).</param>
            <param name="capacity">The number of Access Control Entries (ACEs) this <see cref="T:System.Security.AccessControl.SystemAcl" /> object can contain. This number is to be used only as a hint.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SystemAcl" /> class with the specified values from the specified <see cref="T:System.Security.AccessControl.RawAcl" /> object.</summary>
            <param name="isContainer">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object is a container.</param>
            <param name="isDS">
                <see langword="true" /> if the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object is a directory object Access Control List (ACL).</param>
            <param name="rawAcl">The underlying <see cref="T:System.Security.AccessControl.RawAcl" /> object for the new <see cref="T:System.Security.AccessControl.SystemAcl" /> object. Specify <see langword="null" /> to create an empty ACL.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.AddAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Adds an audit rule to the current <see cref="T:System.Security.AccessControl.SystemAcl" /> object.</summary>
            <param name="auditFlags">The type of audit rule to add.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to add an audit rule.</param>
            <param name="accessMask">The access mask for the new audit rule.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new audit rule.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new audit rule.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.AddAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Adds an audit rule with the specified settings to the current <see cref="T:System.Security.AccessControl.SystemAcl" /> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the new audit rule.</summary>
            <param name="auditFlags">The type of audit rule to add.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to add an audit rule.</param>
            <param name="accessMask">The access mask for the new audit rule.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new audit rule.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new audit rule.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the new audit rule applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the new audit rule.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.AddAudit(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)">
            <summary>Adds an audit rule to the current <see cref="T:System.Security.AccessControl.SystemAcl" /> object.</summary>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to add an audit rule.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> for the new audit rule.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Removes the specified audit rule from the current <see cref="T:System.Security.AccessControl.SystemAcl" /> object.</summary>
            <param name="auditFlags">The type of audit rule to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an audit rule.</param>
            <param name="accessMask">The access mask for the rule to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the rule to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the rule to be removed.</param>
            <returns>
                <see langword="true" /> if this method successfully removes the specified audit rule; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Removes the specified audit rule from the current <see cref="T:System.Security.AccessControl.SystemAcl" /> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.</summary>
            <param name="auditFlags">The type of audit rule to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an audit rule.</param>
            <param name="accessMask">The access mask for the rule to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the rule to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the rule to be removed.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the removed audit control rule applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the removed audit rule.</param>
            <returns>
                <see langword="true" /> if this method successfully removes the specified audit rule; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)">
            <summary>Removes the specified audit rule from the current <see cref="T:System.Security.AccessControl.SystemAcl" /> object.</summary>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an audit rule.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> for which to remove an audit rule.</param>
            <returns>
                <see langword="true" /> if this method successfully removes the specified audit rule; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Removes the specified audit rule from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="auditFlags">The type of audit rule to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an audit rule.</param>
            <param name="accessMask">The access mask for the rule to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the rule to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the rule to be removed.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Removes the specified audit rule from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.</summary>
            <param name="auditFlags">The type of audit rule to remove.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an audit rule.</param>
            <param name="accessMask">The access mask for the rule to be removed.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the rule to be removed.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the rule to be removed.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the removed audit control rule applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the removed audit rule.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)">
            <summary>Removes the specified audit rule from the current <see cref="T:System.Security.AccessControl.DiscretionaryAcl" /> object.</summary>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to remove an audit rule.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> for the rule to be removed.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.SetAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)">
            <summary>Sets the specified audit rule for the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="auditFlags">The audit condition to set.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to set an audit rule.</param>
            <param name="accessMask">The access mask for the new audit rule.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new audit rule.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new audit rule.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.SetAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)">
            <summary>Sets the specified audit rule for the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.</summary>
            <param name="auditFlags">The audit condition to set.</param>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to set an audit rule.</param>
            <param name="accessMask">The access mask for the new audit rule.</param>
            <param name="inheritanceFlags">Flags that specify the inheritance properties of the new audit rule.</param>
            <param name="propagationFlags">Flags that specify the inheritance propagation properties for the new audit rule.</param>
            <param name="objectFlags">Flags that specify if the <paramref name="objectType" /> and <paramref name="inheritedObjectType" /> parameters contain non-<see langword="null" /> values.</param>
            <param name="objectType">The identity of the class of objects to which the new audit rule applies.</param>
            <param name="inheritedObjectType">The identity of the class of child objects which can inherit the new audit rule.</param>
        </member>
        <member name="M:System.Security.AccessControl.SystemAcl.SetAudit(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)">
            <summary>Sets the specified audit rule for the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for which to set an audit rule.</param>
            <param name="rule">The <see cref="T:System.Security.AccessControl.ObjectAuditRule" /> for which to set an audit rule.</param>
        </member>
        <member name="T:System.Security.Policy.Evidence">
            <summary>Defines the set of information that constitutes input to security policy decisions. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Security.Policy.Evidence.#ctor">
            <summary>Initializes a new empty instance of the <see cref="T:System.Security.Policy.Evidence" /> class.</summary>
        </member>
        <member name="M:System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from multiple sets of host and assembly evidence.</summary>
            <param name="hostEvidence">The host evidence from which to create the new instance.</param>
            <param name="assemblyEvidence">The assembly evidence from which to create the new instance.</param>
        </member>
        <member name="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from a shallow copy of an existing one.</summary>
            <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> instance from which to create the new instance. This instance is not deep-copied.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="evidence" /> parameter is not a valid instance of <see cref="T:System.Security.Policy.Evidence" />.</exception>
        </member>
        <member name="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from multiple sets of host and assembly evidence.</summary>
            <param name="hostEvidence">The host evidence from which to create the new instance.</param>
            <param name="assemblyEvidence">The assembly evidence from which to create the new instance.</param>
        </member>
        <member name="M:System.Security.Policy.Evidence.AddAssembly(System.Object)">
            <summary>Adds the specified assembly evidence to the evidence set.</summary>
            <param name="id">Any evidence object.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="id" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="id" /> is not serializable.</exception>
        </member>
        <member name="M:System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)">
            <summary>Adds an evidence object of the specified type to the assembly-supplied evidence list.</summary>
            <param name="evidence">The assembly evidence to add.</param>
            <typeparam name="T">The type of the object in <paramref name="evidence" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="evidence" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">Evidence of type <paramref name="T" /> is already in the list.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="evidence" /> is not serializable.</exception>
        </member>
        <member name="M:System.Security.Policy.Evidence.AddHost(System.Object)">
            <summary>Adds the specified evidence supplied by the host to the evidence set.</summary>
            <param name="id">Any evidence object.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="id" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="id" /> is not serializable.</exception>
        </member>
        <member name="M:System.Security.Policy.Evidence.AddHostEvidence``1(``0)">
            <summary>Adds host evidence of the specified type to the host evidence collection.</summary>
            <param name="evidence">The host evidence to add.</param>
            <typeparam name="T">The type of the object in <paramref name="evidence" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="evidence" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">Evidence of type <paramref name="T" /> is already in the list.</exception>
        </member>
        <member name="M:System.Security.Policy.Evidence.Clear">
            <summary>Removes the host and assembly evidence from the evidence set.</summary>
        </member>
        <member name="M:System.Security.Policy.Evidence.Clone">
            <summary>Returns a duplicate copy of this evidence object.</summary>
            <returns>A duplicate copy of this evidence object.</returns>
        </member>
        <member name="M:System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)">
            <summary>Copies evidence objects to an <see cref="T:System.Array" />.</summary>
            <param name="array">The target array to which to copy evidence objects.</param>
            <param name="index">The zero-based position in the array to which to begin copying evidence objects.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is outside the range of the target array.</exception>
        </member>
        <member name="M:System.Security.Policy.Evidence.GetAssemblyEnumerator">
            <summary>Enumerates evidence provided by the assembly.</summary>
            <returns>An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> method.</returns>
        </member>
        <member name="M:System.Security.Policy.Evidence.GetAssemblyEvidence``1">
            <summary>Gets assembly evidence of the specified type from the collection.</summary>
            <typeparam name="T">The type of the evidence to get.</typeparam>
            <returns>Evidence of type <paramref name="T" /> in the assembly evidence collection.</returns>
        </member>
        <member name="M:System.Security.Policy.Evidence.GetEnumerator">
            <summary>Enumerates all evidence in the set, both that provided by the host and that provided by the assembly.</summary>
            <returns>An enumerator for evidence added by both the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method and the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> method.</returns>
        </member>
        <member name="M:System.Security.Policy.Evidence.GetHostEnumerator">
            <summary>Enumerates evidence supplied by the host.</summary>
            <returns>An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method.</returns>
        </member>
        <member name="M:System.Security.Policy.Evidence.GetHostEvidence``1">
            <summary>Gets host evidence of the specified type from the collection.</summary>
            <typeparam name="T">The type of the evidence to get.</typeparam>
            <returns>Evidence of type <paramref name="T" /> in the host evidence collection.</returns>
        </member>
        <member name="M:System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)">
            <summary>Merges the specified evidence set into the current evidence set.</summary>
            <param name="evidence">The evidence set to be merged into the current evidence set.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="evidence" /> parameter is not a valid instance of <see cref="T:System.Security.Policy.Evidence" />.</exception>
            <exception cref="T:System.Security.SecurityException">
                <see cref="P:System.Security.Policy.Evidence.Locked" /> is <see langword="true" />, the code that calls this method does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, and the <paramref name="evidence" /> parameter has a host list that is not empty.</exception>
        </member>
        <member name="M:System.Security.Policy.Evidence.RemoveType(System.Type)">
            <summary>Removes the evidence for a given type from the host and assembly enumerations.</summary>
            <param name="t">The type of the evidence to be removed.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="t" /> is null.</exception>
        </member>
        <member name="P:System.Security.Policy.Evidence.Count">
            <summary>Gets the number of evidence objects in the evidence set.</summary>
            <returns>The number of evidence objects in the evidence set.</returns>
        </member>
        <member name="P:System.Security.Policy.Evidence.IsReadOnly">
            <summary>Gets a value indicating whether the evidence set is read-only.</summary>
            <returns>Always <see langword="false" />, because read-only evidence sets are not supported.</returns>
        </member>
        <member name="P:System.Security.Policy.Evidence.IsSynchronized">
            <summary>Gets a value indicating whether the evidence set is thread-safe.</summary>
            <returns>Always <see langword="false" /> because thread-safe evidence sets are not supported.</returns>
        </member>
        <member name="P:System.Security.Policy.Evidence.Locked">
            <summary>Gets or sets a value indicating whether the evidence is locked.</summary>
            <returns>
                <see langword="true" /> if the evidence is locked; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.Policy.Evidence.SyncRoot">
            <summary>Gets the synchronization root.</summary>
            <returns>Always <see langword="this" /> (<see langword="Me" /> in Visual Basic), because synchronization of evidence sets is not supported.</returns>
        </member>
        <member name="T:System.Security.Policy.EvidenceBase">
            <summary>Provides a base class from which all objects to be used as evidence must derive.</summary>
        </member>
        <member name="M:System.Security.Policy.EvidenceBase.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.EvidenceBase" /> class.</summary>
            <exception cref="T:System.InvalidOperationException">An object to be used as evidence is not serializable.</exception>
        </member>
        <member name="M:System.Security.Policy.EvidenceBase.Clone">
            <summary>Creates a new object that is a complete copy of the current instance.</summary>
            <returns>A duplicate copy of this evidence object.</returns>
        </member>
        <member name="P:System.SR.Cryptography_DpApi_ProfileMayNotBeLoaded">
            <summary>The data protection operation was unsuccessful. This may have been caused by not having the user profile loaded for the current thread's user context, which may be the case when the thread is impersonating.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_CryptographyProtectedData">
            <summary>Windows Data Protection API (DPAPI) is not supported on this platform.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
            <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
            <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
            <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="P:System.SR.Argument_InvalidPermissionState">
            <summary>Invalid permission state.</summary>
        </member>
        <member name="P:System.SR.Argument_NotAPermissionElement">
            <summary>'elem' was not a permission element.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidXMLBadVersion">
            <summary>Invalid Xml - can only parse elements of version one.</summary>
        </member>
        <member name="P:System.SR.Argument_WrongType">
            <summary>Operation on type '{0}' attempted with target of incorrect type.</summary>
        </member>
        <member name="P:System.SR.HostProtection_ProtectedResources">
            <summary>The protected resources (only available with full trust) were:</summary>
        </member>
        <member name="P:System.SR.HostProtection_DemandedResources">
            <summary>The demanded resources were:</summary>
        </member>
        <member name="P:System.SR.Security_PrincipalPermission">
            <summary>Request for principal permission failed.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_CAS">
            <summary>Code Access Security is not supported on this platform.</summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
            <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
            <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
            <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
            <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle">
            <summary>Provides a safe handle to a Windows thread or process access token. For more information, see Access Tokens.</summary>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" /> class.</summary>
            <param name="handle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use. Using <see cref="F:System.IntPtr.Zero" /> returns an invalid handle.</param>
        </member>
        <member name="P:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle">
            <summary>Returns an invalid handle by instantiating a <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" /> object with <see cref="F:System.IntPtr.Zero" />.</summary>
            <returns>Returns a <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" /> object.</returns>
        </member>
        <member name="P:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid">
            <summary>Gets a value that indicates whether the handle is invalid.</summary>
            <returns>
                <see langword="true" /> if the handle is not valid; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:System.Security.Principal.IdentityNotMappedException">
            <summary>Represents an exception for a principal whose identity could not be mapped to a known identity.</summary>
        </member>
        <member name="M:System.Security.Principal.IdentityNotMappedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityNotMappedException" /> class.</summary>
        </member>
        <member name="M:System.Security.Principal.IdentityNotMappedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityNotMappedException" /> class by using the specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Security.Principal.IdentityNotMappedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityNotMappedException" /> class by using the specified error message and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner" /> is not null, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
        </member>
        <member name="M:System.Security.Principal.IdentityNotMappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Gets serialization information with the data needed to create an instance of this <see cref="T:System.Security.Principal.IdentityNotMappedException" /> object.</summary>
            <param name="serializationInfo">The object that holds the serialized object data about the exception being thrown.</param>
            <param name="streamingContext">The object that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Security.Principal.IdentityNotMappedException.UnmappedIdentities">
            <summary>Represents the collection of unmapped identities for an <see cref="T:System.Security.Principal.IdentityNotMappedException" /> exception.</summary>
            <returns>The collection of unmapped identities.</returns>
        </member>
        <member name="T:System.Security.Principal.IdentityReference">
            <summary>Represents an identity and is the base class for the <see cref="T:System.Security.Principal.NTAccount" /> and <see cref="T:System.Security.Principal.SecurityIdentifier" /> classes. This class does not provide a public constructor, and therefore cannot be inherited.</summary>
        </member>
        <member name="M:System.Security.Principal.IdentityReference.Equals(System.Object)">
            <summary>Returns a value that indicates whether the specified object equals this instance of the <see cref="T:System.Security.Principal.IdentityReference" /> class.</summary>
            <param name="o">An object to compare with this <see cref="T:System.Security.Principal.IdentityReference" /> instance, or a null reference.</param>
            <returns>
                <see langword="true" /> if <paramref name="o" /> is an object with the same underlying type and value as this <see cref="T:System.Security.Principal.IdentityReference" /> instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReference.GetHashCode">
            <summary>Serves as a hash function for <see cref="T:System.Security.Principal.IdentityReference" />. <see cref="M:System.Security.Principal.IdentityReference.GetHashCode" /> is suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>The hash code for this <see cref="T:System.Security.Principal.IdentityReference" /> object.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)">
            <summary>Returns a value that indicates whether the specified type is a valid translation type for the <see cref="T:System.Security.Principal.IdentityReference" /> class.</summary>
            <param name="targetType">The type being queried for validity to serve as a conversion from <see cref="T:System.Security.Principal.IdentityReference" />. The following target types are valid:  
  
 <see cref="T:System.Security.Principal.NTAccount" /><see cref="T:System.Security.Principal.SecurityIdentifier" /></param>
            <returns>
                <see langword="true" /> if <paramref name="targetType" /> is a valid translation type for the <see cref="T:System.Security.Principal.IdentityReference" /> class; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReference.op_Equality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)">
            <summary>Compares two <see cref="T:System.Security.Principal.IdentityReference" /> objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the <see cref="P:System.Security.Principal.IdentityReference.Value" /> property or if they are both <see langword="null" />.</summary>
            <param name="left">The left <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the equality comparison. This parameter can be <see langword="null" />.</param>
            <param name="right">The right <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the equality comparison. This parameter can be <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReference.op_Inequality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)">
            <summary>Compares two <see cref="T:System.Security.Principal.IdentityReference" /> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <see cref="P:System.Security.Principal.IdentityReference.Value" /> property or if one of the objects is <see langword="null" /> and the other is not.</summary>
            <param name="left">The left <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the inequality comparison. This parameter can be <see langword="null" />.</param>
            <param name="right">The right <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the inequality comparison. This parameter can be <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReference.ToString">
            <summary>Returns the string representation of the identity represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
            <returns>The identity in string format.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReference.Translate(System.Type)">
            <summary>Translates the account name represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object into another <see cref="T:System.Security.Principal.IdentityReference" />-derived type.</summary>
            <param name="targetType">The target type for the conversion from <see cref="T:System.Security.Principal.IdentityReference" />.</param>
            <returns>The converted identity.</returns>
        </member>
        <member name="P:System.Security.Principal.IdentityReference.Value">
            <summary>Gets the string value of the identity represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
            <returns>The string value of the identity represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object.</returns>
        </member>
        <member name="T:System.Security.Principal.IdentityReferenceCollection">
            <summary>Represents a collection of <see cref="T:System.Security.Principal.IdentityReference" /> objects and provides a means of converting sets of <see cref="T:System.Security.Principal.IdentityReference" />-derived objects to <see cref="T:System.Security.Principal.IdentityReference" />-derived types.</summary>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> class with zero items in the collection.</summary>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> class by using the specified initial size.</summary>
            <param name="capacity">The initial number of items in the collection. The value of <paramref name="capacity" /> is a hint only; it is not necessarily the maximum number of items created.</param>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference)">
            <summary>Adds an <see cref="T:System.Security.Principal.IdentityReference" /> object to the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> object to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identity" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.Clear">
            <summary>Clears all <see cref="T:System.Security.Principal.IdentityReference" /> objects from the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference)">
            <summary>Indicates whether the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection contains the specified <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> object to check for.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identity" /> is <see langword="null" />.</exception>
            <returns>
                <see langword="true" /> if the collection contains the specified object.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)">
            <summary>Copies the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection to an <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> array, starting at the specified index.</summary>
            <param name="array">An <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> array object to which the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection is to be copied.</param>
            <param name="offset">The zero-based index in <paramref name="array" /> where the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection is to be copied.</param>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.GetEnumerator">
            <summary>Gets an enumerator that can be used to iterate through the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
            <returns>An enumerator for the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference)">
            <summary>Removes the specified <see cref="T:System.Security.Principal.IdentityReference" /> object from the collection.</summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> object to remove.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="identity" /> is <see langword="null" />.</exception>
            <returns>
                <see langword="true" /> if the specified object was removed from the collection.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator that can be used to iterate through the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
            <returns>An enumerator for the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type)">
            <summary>Converts the objects in the collection to the specified type. Calling this method is the same as calling <see cref="M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)" /> with the second parameter set to <see langword="false" />, which means that exceptions will not be thrown for items that fail conversion.</summary>
            <param name="targetType">The type to which items in the collection are being converted.</param>
            <returns>A <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection that represents the converted contents of the original collection.</returns>
        </member>
        <member name="M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)">
            <summary>Converts the objects in the collection to the specified type and uses the specified fault tolerance to handle or ignore errors associated with a type not having a conversion mapping.</summary>
            <param name="targetType">The type to which items in the collection are being converted.</param>
            <param name="forceSuccess">A Boolean value that determines how conversion errors are handled.  
  
 If <paramref name="forceSuccess" /> is <see langword="true" />, conversion errors due to a mapping not being found for the translation result in a failed conversion and exceptions being thrown.  
  
 If <paramref name="forceSuccess" /> is <see langword="false" />, types that failed to convert due to a mapping not being found for the translation are copied without being converted into the collection being returned.</param>
            <returns>A <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection that represents the converted contents of the original collection.</returns>
        </member>
        <member name="P:System.Security.Principal.IdentityReferenceCollection.Count">
            <summary>Gets the number of items in the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
            <returns>The number of <see cref="T:System.Security.Principal.IdentityReference" /> objects in the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</returns>
        </member>
        <member name="P:System.Security.Principal.IdentityReferenceCollection.Item(System.Int32)">
            <summary>Gets or sets the node at the specified index of the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
            <param name="index">The zero-based index in the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</param>
            <returns>The <see cref="T:System.Security.Principal.IdentityReference" /> at the specified index in the collection. If <paramref name="index" /> is greater than or equal to the number of nodes in the collection, the return value is <see langword="null" />.</returns>
        </member>
        <member name="P:System.Security.Principal.IdentityReferenceCollection.System#Collections#Generic#ICollection{System#Security#Principal#IdentityReference}#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
            <returns>
                <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:System.Security.Principal.NTAccount">
            <summary>Represents a user or group account.</summary>
        </member>
        <member name="M:System.Security.Principal.NTAccount.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.NTAccount" /> class by using the specified name.</summary>
            <param name="name">The name used to create the <see cref="T:System.Security.Principal.NTAccount" /> object. This parameter cannot be <see langword="null" /> or an empty string.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="name" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="name" /> is an empty string.  
  
 -or-  
  
 <paramref name="name" /> is too long.</exception>
        </member>
        <member name="M:System.Security.Principal.NTAccount.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.NTAccount" /> class by using the specified domain name and account name.</summary>
            <param name="domainName">The name of the domain. This parameter can be <see langword="null" /> or an empty string. Domain names that are null values are treated like an empty string.</param>
            <param name="accountName">The name of the account. This parameter cannot be <see langword="null" /> or an empty string.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="accountName" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="accountName" /> is an empty string.  
  
 -or-  
  
 <paramref name="accountName" /> is too long.  
  
 -or-  
  
 <paramref name="domainName" /> is too long.</exception>
        </member>
        <member name="M:System.Security.Principal.NTAccount.Equals(System.Object)">
            <summary>Returns a value that indicates whether this <see cref="T:System.Security.Principal.NTAccount" /> object is equal to a specified object.</summary>
            <param name="o">An object to compare with this <see cref="T:System.Security.Principal.NTAccount" /> object, or <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="o" /> is an object with the same underlying type and value as this <see cref="T:System.Security.Principal.NTAccount" /> object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.NTAccount.GetHashCode">
            <summary>Serves as a hash function for the current <see cref="T:System.Security.Principal.NTAccount" /> object. The <see cref="M:System.Security.Principal.NTAccount.GetHashCode" /> method is suitable for hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash value for the current <see cref="T:System.Security.Principal.NTAccount" /> object.</returns>
        </member>
        <member name="M:System.Security.Principal.NTAccount.IsValidTargetType(System.Type)">
            <summary>Returns a value that indicates whether the specified type is a valid translation type for the <see cref="T:System.Security.Principal.NTAccount" /> class.</summary>
            <param name="targetType">The type being queried for validity to serve as a conversion from <see cref="T:System.Security.Principal.NTAccount" />. The following target types are valid:  
  
 - <see cref="T:System.Security.Principal.NTAccount" />  
  
 - <see cref="T:System.Security.Principal.SecurityIdentifier" /></param>
            <returns>
                <see langword="true" /> if <paramref name="targetType" /> is a valid translation type for the <see cref="T:System.Security.Principal.NTAccount" /> class; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)">
            <summary>Compares two <see cref="T:System.Security.Principal.NTAccount" /> objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the <see cref="P:System.Security.Principal.NTAccount.Value" /> property or if they are both <see langword="null" />.</summary>
            <param name="left">The left operand to use for the equality comparison. This parameter can be <see langword="null" />.</param>
            <param name="right">The right operand to use for the equality comparison. This parameter can be <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)">
            <summary>Compares two <see cref="T:System.Security.Principal.NTAccount" /> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <see cref="P:System.Security.Principal.NTAccount.Value" /> property or if one of the objects is <see langword="null" /> and the other is not.</summary>
            <param name="left">The left operand to use for the inequality comparison. This parameter can be <see langword="null" />.</param>
            <param name="right">The right operand to use for the inequality comparison. This parameter can be <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.NTAccount.ToString">
            <summary>Returns the account name, in Domain \ Account format, for the account represented by the <see cref="T:System.Security.Principal.NTAccount" /> object.</summary>
            <returns>The account name, in Domain \ Account format.</returns>
        </member>
        <member name="M:System.Security.Principal.NTAccount.Translate(System.Type)">
            <summary>Translates the account name represented by the <see cref="T:System.Security.Principal.NTAccount" /> object into another <see cref="T:System.Security.Principal.IdentityReference" />-derived type.</summary>
            <param name="targetType">The target type for the conversion from <see cref="T:System.Security.Principal.NTAccount" />. The target type must be a type that is considered valid by the <see cref="M:System.Security.Principal.NTAccount.IsValidTargetType(System.Type)" /> method.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="targetType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="targetType" /> is not an <see cref="T:System.Security.Principal.IdentityReference" /> type.</exception>
            <exception cref="T:System.Security.Principal.IdentityNotMappedException">Some or all identity references could not be translated.</exception>
            <exception cref="T:System.SystemException">The source account name is too long.  
  
 -or-  
  
 A Win32 error code was returned.</exception>
            <returns>The converted identity.</returns>
        </member>
        <member name="P:System.Security.Principal.NTAccount.Value">
            <summary>Returns a string representation of this <see cref="T:System.Security.Principal.NTAccount" /> object.</summary>
            <returns>The string representation of this <see cref="T:System.Security.Principal.NTAccount" /> object.</returns>
        </member>
        <member name="T:System.Security.Principal.SecurityIdentifier">
            <summary>Represents a security identifier (SID) and provides marshaling and comparison operations for SIDs.</summary>
        </member>
        <member name="F:System.Security.Principal.SecurityIdentifier.MaxBinaryLength">
            <summary>Returns the maximum size, in bytes, of the binary representation of the security identifier.</summary>
        </member>
        <member name="F:System.Security.Principal.SecurityIdentifier.MinBinaryLength">
            <summary>Returns the minimum size, in bytes, of the binary representation of the security identifier.</summary>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.Byte[],System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using a specified binary representation of a security identifier (SID).</summary>
            <param name="binaryForm">The byte array that represents the SID.</param>
            <param name="offset">The byte offset to use as the starting index in <paramref name="binaryForm" />.</param>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using an integer that represents the binary form of a security identifier (SID).</summary>
            <param name="binaryForm">An integer that represents the binary form of a SID.</param>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using the specified well known security identifier (SID) type and domain SID.</summary>
            <param name="sidType">One of the enumeration values. This value must not be <see cref="F:System.Security.Principal.WellKnownSidType.LogonIdsSid" />.</param>
            <param name="domainSid">The domain SID. This value is required for the following <see cref="T:System.Security.Principal.WellKnownSidType" /> values. This parameter is ignored for any other <see cref="T:System.Security.Principal.WellKnownSidType" /> values.  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountAdministratorSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountGuestSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountKrbtgtSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountDomainAdminsSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountDomainUsersSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountDomainGuestsSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountComputersSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountControllersSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountCertAdminsSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountSchemaAdminsSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountEnterpriseAdminsSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountPolicyAdminsSid" />  
  
 - <see cref="F:System.Security.Principal.WellKnownSidType.AccountRasAndIasServersSid" /></param>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using the specified security identifier (SID) in Security Descriptor Definition Language (SDDL) format.</summary>
            <param name="sddlForm">SDDL string for the SID used to create the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier)">
            <summary>Compares the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object with the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="sid">The object to compare with the current object.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="sid" />.  
  
 <list type="table"><listheader><term> Return Value</term><description> Description</description></listheader><item><term> Less than zero</term><description> This instance is less than <paramref name="sid" />.</description></item><item><term> Zero</term><description> This instance is equal to <paramref name="sid" />.</description></item><item><term> Greater than zero</term><description> This instance is greater than <paramref name="sid" />.</description></item></list></returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.Equals(System.Object)">
            <summary>Returns a value that indicates whether this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is equal to a specified object.</summary>
            <param name="o">An object to compare with this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object, or <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="o" /> is an object with the same underlying type and value as this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier)">
            <summary>Indicates whether the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is equal to the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <param name="sid">The object to compare with the current object.</param>
            <returns>
                <see langword="true" /> if the value of <paramref name="sid" /> is equal to the value of the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte[],System.Int32)">
            <summary>Copies the binary representation of the specified security identifier (SID) represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class to a byte array.</summary>
            <param name="binaryForm">The byte array to receive the copied SID.</param>
            <param name="offset">The byte offset to use as the starting index in <paramref name="binaryForm" />.</param>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.GetHashCode">
            <summary>Serves as a hash function for the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object. The <see cref="M:System.Security.Principal.SecurityIdentifier.GetHashCode" /> method is suitable for hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash value for the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.IsAccountSid">
            <summary>Returns a value that indicates whether the security identifier (SID) represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is a valid Windows account SID.</summary>
            <returns>
                <see langword="true" /> if the SID represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is a valid Windows account SID; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)">
            <summary>Returns a value that indicates whether the security identifier (SID) represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is from the same domain as the specified SID.</summary>
            <param name="sid">The SID to compare with this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
            <returns>
                <see langword="true" /> if the SID represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is in the same domain as the <paramref name="sid" /> SID; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)">
            <summary>Returns a value that indicates whether the specified type is a valid translation type for the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class.</summary>
            <param name="targetType">The type being queried for validity to serve as a conversion from <see cref="T:System.Security.Principal.SecurityIdentifier" />. The following target types are valid:  
  
 - <see cref="T:System.Security.Principal.NTAccount" />  
  
 - <see cref="T:System.Security.Principal.SecurityIdentifier" /></param>
            <returns>
                <see langword="true" /> if <paramref name="targetType" /> is a valid translation type for the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)">
            <summary>Returns a value that indicates whether the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object matches the specified well known security identifier (SID) type.</summary>
            <param name="type">A value to compare with the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
            <returns>
                <see langword="true" /> if <paramref name="type" /> is the SID type for the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.op_Equality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)">
            <summary>Compares two <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects to determine whether they are equal. They are considered equal if they have the same canonical representation as the one returned by the <see cref="P:System.Security.Principal.SecurityIdentifier.Value" /> property or if they are both <see langword="null" />.</summary>
            <param name="left">The left operand to use for the equality comparison. This parameter can be <see langword="null" />.</param>
            <param name="right">The right operand to use for the equality comparison. This parameter can be <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.op_Inequality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)">
            <summary>Compares two <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <see cref="P:System.Security.Principal.SecurityIdentifier.Value" /> property or if one of the objects is <see langword="null" /> and the other is not.</summary>
            <param name="left">The left operand to use for the inequality comparison. This parameter can be <see langword="null" />.</param>
            <param name="right">The right operand to use for the inequality comparison. This parameter can be <see langword="null" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.ToString">
            <summary>Returns the security identifier (SID), in Security Descriptor Definition Language (SDDL) format, for the account represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object. An example of the SDDL format is S-1-5-9.</summary>
            <returns>The SID, in SDDL format, for the account represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
        </member>
        <member name="M:System.Security.Principal.SecurityIdentifier.Translate(System.Type)">
            <summary>Translates the account name represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object into another <see cref="T:System.Security.Principal.IdentityReference" />-derived type.</summary>
            <param name="targetType">The target type for the conversion from <see cref="T:System.Security.Principal.SecurityIdentifier" />. The target type must be a type that is considered valid by the <see cref="M:System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)" /> method.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="targetType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="targetType" /> is not an <see cref="T:System.Security.Principal.IdentityReference" /> type.</exception>
            <exception cref="T:System.Security.Principal.IdentityNotMappedException">Some or all identity references could not be translated.</exception>
            <exception cref="T:System.SystemException">A Win32 error code was returned.</exception>
            <returns>The converted identity.</returns>
        </member>
        <member name="P:System.Security.Principal.SecurityIdentifier.AccountDomainSid">
            <summary>Returns the account domain security identifier (SID) portion from the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object if the SID represents a Windows account SID. If the SID does not represent a Windows account SID, this property returns <see langword="null" />.</summary>
            <returns>The account domain SID portion from the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object if the SID represents a Windows account SID; otherwise, it returns <see langword="null" />.</returns>
        </member>
        <member name="P:System.Security.Principal.SecurityIdentifier.BinaryLength">
            <summary>Returns the length, in bytes, of the security identifier (SID) represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <returns>The length, in bytes, of the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
        </member>
        <member name="P:System.Security.Principal.SecurityIdentifier.Value">
            <summary>Returns an uppercase Security Descriptor Definition Language (SDDL) string for the security identifier (SID) represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
            <returns>An uppercase SDDL string for the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
        </member>
        <member name="T:System.Security.Principal.TokenAccessLevels">
            <summary>Defines the privileges of the user account associated with the access token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.AdjustDefault">
            <summary>The user can change the default owner, primary group, or discretionary access control list (DACL) of the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.AdjustGroups">
            <summary>The user can change the attributes of the groups in the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.AdjustPrivileges">
            <summary>The user can enable or disable privileges in the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.AdjustSessionId">
            <summary>The user can adjust the session identifier of the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.AllAccess">
            <summary>The user has all possible access to the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.AssignPrimary">
            <summary>The user can attach a primary token to a process.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.Duplicate">
            <summary>The user can duplicate the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.Impersonate">
            <summary>The user can impersonate a client.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.MaximumAllowed">
            <summary>The maximum value that can be assigned for the <see cref="T:System.Security.Principal.TokenAccessLevels" /> enumeration.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.Query">
            <summary>The user can query the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.QuerySource">
            <summary>The user can query the source of the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.Read">
            <summary>The user has standard read rights and the <see cref="F:System.Security.Principal.TokenAccessLevels.Query" /> privilege for the token.</summary>
        </member>
        <member name="F:System.Security.Principal.TokenAccessLevels.Write">
            <summary>The user has standard write rights and the <see cref="F:System.Security.Principal.TokenAccessLevels.AdjustPrivileges" />, <see cref="F:System.Security.Principal.TokenAccessLevels.AdjustGroups" /> and <see cref="F:System.Security.Principal.TokenAccessLevels.AdjustDefault" /> privileges for the token.</summary>
        </member>
        <member name="T:System.Security.Principal.WellKnownSidType">
            <summary>Defines a set of commonly used security identifiers (SIDs).</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountAdministratorSid">
            <summary>Indicates a SID that matches the account administrators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountCertAdminsSid">
            <summary>Indicates a SID that matches the certificate administrators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountComputersSid">
            <summary>Indicates a SID that matches the account computer group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountControllersSid">
            <summary>Indicates a SID that matches the account controller group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountDomainAdminsSid">
            <summary>Indicates a SID that matches the account domain administrator group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountDomainGuestsSid">
            <summary>Indicates a SID that matches the account domain guests group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountDomainUsersSid">
            <summary>Indicates a SID that matches the account domain users group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountEnterpriseAdminsSid">
            <summary>Indicates a SID that matches the enterprise administrators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountGuestSid">
            <summary>Indicates a SID that matches the account guest group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountKrbtgtSid">
            <summary>Indicates a SID that matches the account Kerberos target group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountPolicyAdminsSid">
            <summary>Indicates a SID that matches the policy administrators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountRasAndIasServersSid">
            <summary>Indicates a SID that matches the RAS and IAS server account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AccountSchemaAdminsSid">
            <summary>Indicates a SID that matches the schema administrators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AnonymousSid">
            <summary>Indicates a SID for the anonymous account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.AuthenticatedUserSid">
            <summary>Indicates a SID for an authenticated user.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BatchSid">
            <summary>Indicates a SID for a batch process. This SID is added to the process of a token when it logs on as a batch job.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinAccountOperatorsSid">
            <summary>Indicates a SID that matches the account operators account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinAdministratorsSid">
            <summary>Indicates a SID that matches the administrator account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinAuthorizationAccessSid">
            <summary>Indicates a SID that matches the Windows Authorization Access group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinBackupOperatorsSid">
            <summary>Indicates a SID that matches the backup operators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinDomainSid">
            <summary>Indicates a SID that matches the domain account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinGuestsSid">
            <summary>Indicates a SID that matches the guest account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinIncomingForestTrustBuildersSid">
            <summary>Indicates a SID that allows a user to create incoming forest trusts. It is added to the token of users who are a member of the Incoming Forest Trust Builders built-in group in the root domain of the forest.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinNetworkConfigurationOperatorsSid">
            <summary>Indicates a SID that matches the network operators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPerformanceLoggingUsersSid">
            <summary>Indicates a SID that matches the group of users that have remote access to monitor the computer.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPerformanceMonitoringUsersSid">
            <summary>Indicates a SID that matches the group of users that have remote access to schedule logging of performance counters on this computer.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPowerUsersSid">
            <summary>Indicates a SID that matches the power users group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPreWindows2000CompatibleAccessSid">
            <summary>Indicates a SID that matches pre-Windows 2000 compatible accounts.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPrintOperatorsSid">
            <summary>Indicates a SID that matches the print operators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinRemoteDesktopUsersSid">
            <summary>Indicates a SID that matches remote desktop users.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinReplicatorSid">
            <summary>Indicates a SID that matches the replicator account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinSystemOperatorsSid">
            <summary>Indicates a SID that matches the system operators group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.BuiltinUsersSid">
            <summary>Indicates a SID that matches built-in user accounts.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.CreatorGroupServerSid">
            <summary>Indicates a creator group server SID.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.CreatorGroupSid">
            <summary>Indicates a SID that matches the creator group of an object.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.CreatorOwnerServerSid">
            <summary>Indicates a creator owner server SID.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.CreatorOwnerSid">
            <summary>Indicates a SID that matches the owner or creator of an object.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.DialupSid">
            <summary>Indicates a SID for a dial-up account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.DigestAuthenticationSid">
            <summary>Indicates a SID present when the Microsoft Digest authentication package authenticated the client.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.EnterpriseControllersSid">
            <summary>Indicates a SID for an enterprise controller.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.InteractiveSid">
            <summary>Indicates a SID for an interactive account. This SID is added to the process of a token when it logs on interactively.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.LocalServiceSid">
            <summary>Indicates a SID that matches a local service.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.LocalSid">
            <summary>Indicates a local SID.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.LocalSystemSid">
            <summary>Indicates a SID that matches the local system.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.LogonIdsSid">
            <summary>Indicates a SID that matches logon IDs.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.MaxDefined">
            <summary>Indicates the maximum defined SID in the <see cref="T:System.Security.Principal.WellKnownSidType" /> enumeration.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.NetworkServiceSid">
            <summary>Indicates a SID that matches a network service.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.NetworkSid">
            <summary>Indicates a SID for a network account. This SID is added to the process of a token when it logs on across a network.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.NTAuthoritySid">
            <summary>Indicates a SID for the Windows NT authority.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.NtlmAuthenticationSid">
            <summary>Indicates a SID present when the Microsoft NTLM authentication package authenticated the client.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.NullSid">
            <summary>Indicates a null SID.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.OtherOrganizationSid">
            <summary>Indicates a SID present when the user authenticated across a forest with the selective authentication option enabled. If this SID is present, then <see cref="F:System.Security.Principal.WellKnownSidType.ThisOrganizationSid" /> cannot be present.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.ProxySid">
            <summary>Indicates a proxy SID.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.RemoteLogonIdSid">
            <summary>Indicates a SID that matches remote logons.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.RestrictedCodeSid">
            <summary>Indicates a SID for restricted code.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.SChannelAuthenticationSid">
            <summary>Indicates a SID present when the Secure Channel (SSL/TLS) authentication package authenticated the client.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.SelfSid">
            <summary>Indicates a SID for self.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.ServiceSid">
            <summary>Indicates a SID for a service. This SID is added to the process of a token when it logs on as a service.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.TerminalServerSid">
            <summary>Indicates a SID that matches a terminal server account.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.ThisOrganizationSid">
            <summary>Indicates a SID present when the user authenticated from within the forest or across a trust that does not have the selective authentication option enabled. If this SID is present, then <see cref="F:System.Security.Principal.WellKnownSidType.OtherOrganizationSid" /> cannot be present.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinAccountReadonlyControllersSid">
            <summary>Indicates a SID that matches an account read-only controllers group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinApplicationPackageAuthoritySid">
            <summary>Indicates a SID that matches the application package authority.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinAnyPackageSid">
            <summary>Indicates a SID that applies to all app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinCertSvcDComAccessGroup">
            <summary>Indicates a SID that matches the built-in DCOM certification services access group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinCryptoOperatorsSid">
            <summary>Indicates a SID that allows a user to use cryptographic operations. It is added to the token of users who are a member of the CryptoOperators built-in group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinDCOMUsersSid">
            <summary>Indicates a SID that matches the distributed COM user group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinEventLogReadersGroup">
            <summary>Indicates a SID that matches an event log readers group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinIUsersSid">
            <summary>Indicates a SID that matches the Internet built-in user group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinTerminalServerLicenseServersSid">
            <summary>Indicates a SID is present in a server that can issue Terminal Server licenses.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCacheablePrincipalsGroupSid">
            <summary>Indicates a SID that matches a cacheable principals group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityDocumentsLibrarySid">
            <summary>Indicates a SID for documents library capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityEnterpriseAuthenticationSid">
            <summary>Indicates a SID for Windows credentials capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityInternetClientServerSid">
            <summary>Indicates a SID of Internet client and server capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityInternetClientSid">
            <summary>Indicates a SID of Internet client capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityMusicLibrarySid">
            <summary>Indicates a SID for music library capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityPicturesLibrarySid">
            <summary>Indicates a SID for pictures library capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityPrivateNetworkClientServerSid">
            <summary>Indicates a SID of private network client and server capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityRemovableStorageSid">
            <summary>Indicates a SID for removable storage capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilitySharedUserCertificatesSid">
            <summary>Indicates a SID for shared user certificates capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCapabilityVideosLibrarySid">
            <summary>Indicates a SID for videos library capability for app containers.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinConsoleLogonSid">
            <summary>Indicates a SID that matches a console logon group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinCreatorOwnerRightsSid">
            <summary>Indicates a SID that matches a creator and owner rights group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinEnterpriseReadonlyControllersSid">
            <summary>Indicates a SID that matches an enterprise wide read-only controllers group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinHighLabelSid">
            <summary>Indicates a SID that matches a high level of trust label.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinIUserSid">
            <summary>Indicates a SID that matches the Internet user group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinLocalLogonSid">
            <summary>Indicates a SID that matches a local logon group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinLowLabelSid">
            <summary>Indicates a SID that matches an low level of trust label.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinMediumLabelSid">
            <summary>Indicates a SID that matches an medium level of trust label.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinMediumPlusLabelSid">
            <summary>Indicates a SID that matches the medium plus integrity label.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinNewEnterpriseReadonlyControllersSid">
            <summary>Indicates a SID that matches a read-only enterprise domain controller.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinNonCacheablePrincipalsGroupSid">
            <summary>Indicates a SID that matches a non-cacheable principals group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinSystemLabelSid">
            <summary>Indicates a SID that matches a system label.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinThisOrganizationCertificateSid">
            <summary>Indicates a SID that matches a certificate for the given organization.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinUntrustedLabelSid">
            <summary>Indicates a SID that matches an untrusted label.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WinWriteRestrictedCodeSid">
            <summary>Indicates a SID that matches a write restricted code group.</summary>
        </member>
        <member name="F:System.Security.Principal.WellKnownSidType.WorldSid">
            <summary>Indicates a SID that matches everyone.</summary>
        </member>
        <member name="T:System.Security.Principal.WindowsAccountType">
            <summary>Specifies the type of Windows account used.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsAccountType.Anonymous">
            <summary>An anonymous account.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsAccountType.Guest">
            <summary>A Windows guest account.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsAccountType.Normal">
            <summary>A standard user account.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsAccountType.System">
            <summary>A Windows system account.</summary>
        </member>
        <member name="T:System.Security.Principal.WindowsBuiltInRole">
            <summary>Specifies common roles to be used with <see cref="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)" />.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.AccountOperator">
            <summary>Account operators manage the user accounts on a computer or domain.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.Administrator">
            <summary>Administrators have complete and unrestricted access to the computer or domain.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.BackupOperator">
            <summary>Backup operators can override security restrictions for the sole purpose of backing up or restoring files.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.Guest">
            <summary>Guests are more restricted than users.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.PowerUser">
            <summary>Power users possess most administrative permissions with some restrictions. Thus, power users can run legacy applications, in addition to certified applications.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.PrintOperator">
            <summary>Print operators can take control of a printer.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.Replicator">
            <summary>Replicators support file replication in a domain.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.SystemOperator">
            <summary>System operators manage a particular computer.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsBuiltInRole.User">
            <summary>Users are prevented from making accidental or intentional system-wide changes. Thus, users can run certified applications, but not most legacy applications.</summary>
        </member>
        <member name="T:System.Security.Principal.WindowsIdentity">
            <summary>Represents a Windows user.</summary>
        </member>
        <member name="F:System.Security.Principal.WindowsIdentity.DefaultIssuer">
            <summary>Identifies the name of the default <see cref="T:System.Security.Claims.ClaimsIdentity" /> issuer.</summary>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token.</summary>
            <param name="userToken">The account token for the user on whose behalf the code is running.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="userToken" /> is 0.  
  
 -or-  
  
 <paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.  
  
 -or-  
  
 A Win32 error occurred.</exception>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token and the specified authentication type.</summary>
            <param name="userToken">The account token for the user on whose behalf the code is running.</param>
            <param name="type">(Informational use only.) The type of authentication used to identify the user.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="userToken" /> is 0.  
  
 -or-  
  
 <paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.  
  
 -or-  
  
 A Win32 error occurred.</exception>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type.</summary>
            <param name="userToken">The account token for the user on whose behalf the code is running.</param>
            <param name="type">(Informational use only.) The type of authentication used to identify the user.</param>
            <param name="acctType">One of the enumeration values.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="userToken" /> is 0.  
  
 -or-  
  
 <paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.  
  
 -or-  
  
 A Win32 error occurred.</exception>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status.</summary>
            <param name="userToken">The account token for the user on whose behalf the code is running.</param>
            <param name="type">(Informational use only.) The type of authentication used to identify the user.</param>
            <param name="acctType">One of the enumeration values.</param>
            <param name="isAuthenticated">
                <see langword="true" /> to indicate that the user is authenticated; otherwise, <see langword="false" />.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="userToken" /> is 0.  
  
 -or-  
  
 <paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.  
  
 -or-  
  
 A Win32 error occurred.</exception>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by information in a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> stream.</summary>
            <param name="info">The object containing the account information for the user.</param>
            <param name="context">An object that indicates the stream characteristics.</param>
            <exception cref="T:System.NotSupportedException">A <see cref="T:System.Security.Principal.WindowsIdentity" /> cannot be serialized across processes.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.  
  
 -or-  
  
 A Win32 error occurred.</exception>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class by using the specified <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
            <param name="identity">The object from which to construct the new instance of <see cref="T:System.Security.Principal.WindowsIdentity" />.</param>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified User Principal Name (UPN).</summary>
            <param name="sUserPrincipalName">The UPN for the user on whose behalf the code is running.</param>
            <exception cref="T:System.UnauthorizedAccessException">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</exception>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.  
  
 -or-  
  
 The computer is not attached to a Windows 2003 or later domain.  
  
 -or-  
  
 The computer is not running Windows 2003 or later.  
  
 -or-  
  
 The user is not a member of the domain the computer is attached to.</exception>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.Clone">
            <summary>Creates a new  object that is a copy of the current instance.</summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.Dispose">
            <summary>Releases all resources used by the <see cref="T:System.Security.Principal.WindowsIdentity" />.</summary>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Principal.WindowsIdentity" /> and optionally releases the managed resources.</summary>
            <param name="disposing">
                <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.GetAnonymous">
            <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.</summary>
            <returns>An object that represents an anonymous user.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.GetCurrent">
            <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user.</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.</exception>
            <returns>An object that represents the current user.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)">
            <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the Windows identity for either the thread or the process, depending on the value of the <paramref name="ifImpersonating" /> parameter.</summary>
            <param name="ifImpersonating">
                <see langword="true" /> to return the <see cref="T:System.Security.Principal.WindowsIdentity" /> only if the thread is currently impersonating; <see langword="false" /> to return the <see cref="T:System.Security.Principal.WindowsIdentity" /> of the thread if it is impersonating or the <see cref="T:System.Security.Principal.WindowsIdentity" /> of the process if the thread is not currently impersonating.</param>
            <returns>An object that represents a Windows user.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)">
            <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user, using the specified desired token access level.</summary>
            <param name="desiredAccess">A bitwise combination of the enumeration values.</param>
            <returns>An object that represents the current user.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)">
            <summary>Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <see cref="T:System.Security.Principal.WindowsImpersonationContext" />, you can use <see cref="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" /> and provide your function directly as a parameter.</summary>
            <param name="safeAccessTokenHandle">The SafeAccessTokenHandle of the impersonated Windows identity.</param>
            <param name="action">The System.Action to run.</param>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})">
            <summary>Runs the specified function as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <see cref="T:System.Security.Principal.WindowsImpersonationContext" />, you can use <see cref="M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" /> and provide your function directly as a parameter.</summary>
            <param name="safeAccessTokenHandle">The SafeAccessTokenHandle of the impersonated Windows identity.</param>
            <param name="func">The System.Func to run.</param>
            <typeparam name="T">The type of object used by and returned by the function.</typeparam>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.RunImpersonatedAsync(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{System.Threading.Tasks.Task})">
            <summary>Runs the specified asynchronous action as the impersonated Windows identity.</summary>
            <param name="safeAccessTokenHandle">The handle of the impersonated Windows identity.</param>
            <param name="func">The function to run.</param>
            <returns>A task that represents the asynchronous operation of the provided <see cref="T:System.Func`1" />.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.RunImpersonatedAsync``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Runs the specified asynchronous action as the impersonated Windows identity.</summary>
            <param name="safeAccessTokenHandle">The handle of the impersonated Windows identity.</param>
            <param name="func">The function to run.</param>
            <typeparam name="T">The type of the object to return.</typeparam>
            <returns>A task that represents the asynchronous operation of <paramref name="func" />.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and is called back by the deserialization event when deserialization is complete.</summary>
            <param name="sender">The source of the deserialization event.</param>
        </member>
        <member name="M:System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of this execution context.</summary>
            <param name="info">An object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" />.</param>
            <param name="context">An object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</param>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.AccessToken">
            <summary>Gets this <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" /> for this <see cref="T:System.Security.Principal.WindowsIdentity" /> instance.</summary>
            <returns>Returns a <see cref="T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" />.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.AuthenticationType">
            <summary>Gets the type of authentication used to identify the user.</summary>
            <exception cref="T:System.UnauthorizedAccessException">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</exception>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions.  
  
 -or-  
  
 The computer is not attached to a Windows 2003 or later domain.  
  
 -or-  
  
 The computer is not running Windows 2003 or later.  
  
 -or-  
  
 The user is not a member of the domain the computer is attached to.</exception>
            <returns>The type of authentication used to identify the user.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.Claims">
            <summary>Gets all claims for the user represented by this Windows identity.</summary>
            <returns>A collection of claims for this <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.DeviceClaims">
            <summary>Gets claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsDeviceClaim" /> property key.</summary>
            <returns>A collection of claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsDeviceClaim" /> property key.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.Groups">
            <summary>Gets the groups the current Windows user belongs to.</summary>
            <returns>An object representing the groups the current Windows user belongs to.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.ImpersonationLevel">
            <summary>Gets the impersonation level for the user.</summary>
            <returns>One of the enumeration values that specifies the impersonation level.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.IsAnonymous">
            <summary>Gets a value that indicates whether the user account is identified as an anonymous account by the system.</summary>
            <returns>
                <see langword="true" /> if the user account is an anonymous account; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.IsAuthenticated">
            <summary>Gets a value indicating whether the user has been authenticated by Windows.</summary>
            <returns>
                <see langword="true" /> if the user was authenticated; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.IsGuest">
            <summary>Gets a value indicating whether the user account is identified as a <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> account by the system.</summary>
            <returns>
                <see langword="true" /> if the user account is a <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> account; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.IsSystem">
            <summary>Gets a value indicating whether the user account is identified as a <see cref="F:System.Security.Principal.WindowsAccountType.System" /> account by the system.</summary>
            <returns>
                <see langword="true" /> if the user account is a <see cref="F:System.Security.Principal.WindowsAccountType.System" /> account; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.Name">
            <summary>Gets the user's Windows logon name.</summary>
            <returns>The Windows logon name of the user on whose behalf the code is being run.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.Owner">
            <summary>Gets the security identifier (SID) for the token owner.</summary>
            <returns>An object for the token owner.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.Token">
            <summary>Gets the Windows account token for the user.</summary>
            <returns>The handle of the access token associated with the current execution thread.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.User">
            <summary>Gets the security identifier (SID) for the user.</summary>
            <returns>An object for the user.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsIdentity.UserClaims">
            <summary>Gets claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsUserClaim" /> property key.</summary>
            <returns>A collection of claims that have the <see cref="F:System.Security.Claims.ClaimTypes.WindowsUserClaim" /> property key.</returns>
        </member>
        <member name="T:System.Security.Principal.WindowsPrincipal">
            <summary>Enables code to check the Windows group membership of a Windows user.</summary>
        </member>
        <member name="M:System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsPrincipal" /> class by using the specified <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
            <param name="ntIdentity">The object from which to construct the new instance of <see cref="T:System.Security.Principal.WindowsPrincipal" />.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="ntIdentity" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)">
            <summary>Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).</summary>
            <param name="rid">The RID of the Windows user group in which to check for the principal's membership status.</param>
            <returns>
                <see langword="true" /> if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)">
            <summary>Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).</summary>
            <param name="sid">A <see cref="T:System.Security.Principal.SecurityIdentifier" /> that uniquely identifies a Windows user group.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="sid" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Security.SecurityException">Windows returned a Win32 error.</exception>
            <returns>
                <see langword="true" /> if the current principal is a member of the specified Windows user group; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)">
            <summary>Determines whether the current principal belongs to the Windows user group with the specified <see cref="T:System.Security.Principal.WindowsBuiltInRole" />.</summary>
            <param name="role">One of the <see cref="T:System.Security.Principal.WindowsBuiltInRole" /> values.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="role" /> is not a valid <see cref="T:System.Security.Principal.WindowsBuiltInRole" /> value.</exception>
            <returns>
                <see langword="true" /> if the current principal is a member of the specified Windows user group; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)">
            <summary>Determines whether the current principal belongs to the Windows user group with the specified name.</summary>
            <param name="role">The name of the Windows user group for which to check membership.</param>
            <returns>
                <see langword="true" /> if the current principal is a member of the specified Windows user group; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsPrincipal.DeviceClaims">
            <summary>Gets all Windows device claims from this principal.</summary>
            <returns>A collection of all Windows device claims from this principal.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsPrincipal.Identity">
            <summary>Gets the identity of the current principal.</summary>
            <returns>The <see cref="T:System.Security.Principal.WindowsIdentity" /> object of the current principal.</returns>
        </member>
        <member name="P:System.Security.Principal.WindowsPrincipal.UserClaims">
            <summary>Gets all Windows user claims from this principal.</summary>
            <returns>A collection of all Windows user claims from this principal.</returns>
        </member>
        <member name="T:System.Text.CodePagesEncodingProvider">
            <summary>Provides access to an encoding provider for code pages that otherwise are available only in the desktop .NET Framework.</summary>
        </member>
        <member name="M:System.Text.CodePagesEncodingProvider.GetEncoding(System.Int32)">
            <summary>Returns the encoding associated with the specified code page identifier.</summary>
            <param name="codepage">The code page identifier of the preferred encoding which the encoding provider may support.</param>
            <returns>The encoding associated with the specified code page identifier, or <see langword="null" /> if the provider does not support the requested codepage encoding.</returns>
        </member>
        <member name="M:System.Text.CodePagesEncodingProvider.GetEncoding(System.String)">
            <summary>Returns the encoding associated with the specified code page name.</summary>
            <param name="name">The code page name of the preferred encoding which the encoding provider may support.</param>
            <returns>The encoding associated with the specified code page, or <see langword="null" /> if the provider does not support the requested encoding.</returns>
        </member>
        <member name="M:System.Text.CodePagesEncodingProvider.GetEncodings">
            <summary>Returns an array that contains all the encodings that are supported by the <see cref="T:System.Text.CodePagesEncodingProvider" />.</summary>
            <returns>An array that contains all the supported encodings.</returns>
        </member>
        <member name="P:System.Text.CodePagesEncodingProvider.Instance">
            <summary>Gets an encoding provider for code pages supported in the desktop .NET Framework but not in the current .NET Framework platform.</summary>
            <returns>An encoding provider that allows access to encodings not supported on the current .NET Framework platform.</returns>
        </member>
        <member name="T:System.Text.Encodings.Web.HtmlEncoder">
            <summary>Represents an HTML character encoding.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.HtmlEncoder.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Encodings.Web.HtmlEncoder" /> class.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.HtmlEncoder.Create(System.Text.Encodings.Web.TextEncoderSettings)">
            <summary>Creates a new instance of the HtmlEncoder class with the specified settings.</summary>
            <param name="settings">Settings that control how the <see cref="T:System.Text.Encodings.Web.HtmlEncoder" /> instance encodes, primarily which characters to encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="settings" /> is <see langword="null" />.</exception>
            <returns>A new instance of the <see cref="T:System.Text.Encodings.Web.HtmlEncoder" /> class.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.HtmlEncoder.Create(System.Text.Unicode.UnicodeRange[])">
            <summary>Creates a new instance of the HtmlEncoder class that specifies characters the encoder is allowed to not encode.</summary>
            <param name="allowedRanges">The set of characters that the encoder is allowed to not encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="allowedRanges" /> is <see langword="null" />.</exception>
            <returns>A new instance of the <see cref="T:System.Text.Encodings.Web.HtmlEncoder" /> class.</returns>
        </member>
        <member name="P:System.Text.Encodings.Web.HtmlEncoder.Default">
            <summary>Gets a built-in instance of the <see cref="T:System.Text.Encodings.Web.HtmlEncoder" /> class.</summary>
            <returns>A built-in instance of the <see cref="T:System.Text.Encodings.Web.HtmlEncoder" /> class.</returns>
        </member>
        <member name="T:System.Text.Encodings.Web.JavaScriptEncoder">
            <summary>Represents a JavaScript character encoding.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.JavaScriptEncoder.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> class.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.JavaScriptEncoder.Create(System.Text.Encodings.Web.TextEncoderSettings)">
            <summary>Creates a new instance of JavaScriptEncoder class with the specified settings.</summary>
            <param name="settings">Settings that control how the <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> instance encodes, primarily which characters to encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="settings" /> is <see langword="null" />.</exception>
            <returns>A new instance of the <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> class.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.JavaScriptEncoder.Create(System.Text.Unicode.UnicodeRange[])">
            <summary>Creates a new instance of the JavaScriptEncoder class that specifies characters the encoder is allowed to not encode.</summary>
            <param name="allowedRanges">The set of characters that the encoder is allowed to not encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="allowedRanges" /> is <see langword="null" />.</exception>
            <returns>A new instance of the <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> class.</returns>
        </member>
        <member name="P:System.Text.Encodings.Web.JavaScriptEncoder.Default">
            <summary>Gets a built-in instance of the <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> class.</summary>
            <returns>A built-in instance of the <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> class.</returns>
        </member>
        <member name="P:System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping">
            <summary>Gets a built-in JavaScript encoder instance that is less strict about what is encoded.</summary>
            <returns>A JavaScript encoder instance.</returns>
        </member>
        <member name="T:System.Text.Encodings.Web.TextEncoder">
            <summary>The base class of web encoders.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Encodings.Web.TextEncoder" /> class.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.Encode(System.IO.TextWriter,System.Char[],System.Int32,System.Int32)">
            <summary>Encodes characters from an array and writes them to a <see cref="T:System.IO.TextWriter" /> object.</summary>
            <param name="output">The stream to which to write the encoded text.</param>
            <param name="value">The array of characters to encode.</param>
            <param name="startIndex">The array index of the first character to encode.</param>
            <param name="characterCount">The number of characters in the array to encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="output" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)" /> method failed. The encoder does not implement <see cref="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" /> correctly.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex" /> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="characterCount" /> is out of range.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.Encode(System.IO.TextWriter,System.String)">
            <summary>Encodes the specified string to a <see cref="T:System.IO.TextWriter" /> object.</summary>
            <param name="output">The stream to which to write the encoded text.</param>
            <param name="value">The string to encode.</param>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.Encode(System.IO.TextWriter,System.String,System.Int32,System.Int32)">
            <summary>Encodes a substring and writes it to a <see cref="T:System.IO.TextWriter" /> object.</summary>
            <param name="output">The stream to which to write the encoded text.</param>
            <param name="value">The string whose substring is to be encoded.</param>
            <param name="startIndex">The index where the substring starts.</param>
            <param name="characterCount">The number of characters in the substring.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="output" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)" /> method failed. The encoder does not implement <see cref="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" /> correctly.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex" /> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="characterCount" /> is out of range.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.Encode(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@,System.Int32@,System.Boolean)">
            <summary>Encodes the supplied characters.</summary>
            <param name="source">A source buffer containing the characters to encode.</param>
            <param name="destination">The destination buffer to which the encoded form of <paramref name="source" /> will be written.</param>
            <param name="charsConsumed">The number of characters consumed from the <paramref name="source" /> buffer.</param>
            <param name="charsWritten">The number of characters written to the <paramref name="destination" /> buffer.</param>
            <param name="isFinalBlock">
                <see langword="true" /> to indicate there is no further source data that needs to be encoded; otherwise, <see langword="false" />.</param>
            <returns>An enumeration value that describes the result of the encoding operation.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.Encode(System.String)">
            <summary>Encodes the supplied string and returns the encoded text as a new string.</summary>
            <param name="value">The string to encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)" /> method failed. The encoder does not implement <see cref="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter" /> correctly.</exception>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.EncodeUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
            <summary>Encodes the supplied UTF-8 text.</summary>
            <param name="utf8Source">A source buffer containing the UTF-8 text to encode.</param>
            <param name="utf8Destination">The destination buffer to which the encoded form of <paramref name="utf8Source" /> will be written.</param>
            <param name="bytesConsumed">The number of bytes consumed from the <paramref name="utf8Source" /> buffer.</param>
            <param name="bytesWritten">The number of bytes written to the <paramref name="utf8Destination" /> buffer.</param>
            <param name="isFinalBlock">
                <see langword="true" /> to indicate there is no further source data that needs to be encoded; otherwise, <see langword="false" />.</param>
            <returns>A status code that describes the result of the encoding operation.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.FindFirstCharacterToEncode(System.Char*,System.Int32)">
            <summary>Finds the index of the first character to encode.</summary>
            <param name="text">The text buffer to search.</param>
            <param name="textLength">The number of characters in <paramref name="text" />.</param>
            <returns>The index of the first character to encode.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.FindFirstCharacterToEncodeUtf8(System.ReadOnlySpan{System.Byte})">
            <summary>Finds the first element in a UTF-8 text input buffer that would be escaped by the current encoder instance.</summary>
            <param name="utf8Text">The UTF-8 text input buffer to search.</param>
            <returns>The index of the first element in <paramref name="utf8Text" /> that would be escaped by the current encoder instance, or -1 if no data in <paramref name="utf8Text" /> requires escaping.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)">
            <summary>Encodes a Unicode scalar value and writes it to a buffer.</summary>
            <param name="unicodeScalar">A Unicode scalar value.</param>
            <param name="buffer">A pointer to the buffer to which to write the encoded text.</param>
            <param name="bufferLength">The length of the destination <paramref name="buffer" /> in characters.</param>
            <param name="numberOfCharactersWritten">When the method returns, indicates the number of characters written to the <paramref name="buffer" />.</param>
            <returns>
                <see langword="false" /> if <paramref name="bufferLength" /> is too small to fit the encoded text; otherwise, returns <see langword="true" />.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoder.WillEncode(System.Int32)">
            <summary>Determines if a given Unicode scalar value will be encoded.</summary>
            <param name="unicodeScalar">A Unicode scalar value.</param>
            <returns>
                <see langword="true" /> if the <paramref name="unicodeScalar" /> value will be encoded by this encoder; otherwise, returns <see langword="false" />.</returns>
        </member>
        <member name="P:System.Text.Encodings.Web.TextEncoder.MaxOutputCharactersPerInputCharacter">
            <summary>Gets the maximum number of characters that this encoder can generate for each input code point.</summary>
            <returns>The maximum number of characters.</returns>
        </member>
        <member name="T:System.Text.Encodings.Web.TextEncoderSettings">
            <summary>Represents a filter that allows only certain Unicode code points.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.#ctor">
            <summary>Instantiates an empty filter (allows no code points through by default).</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.#ctor(System.Text.Encodings.Web.TextEncoderSettings)">
            <summary>Instantiates a filter by cloning the allowed list of another <see cref="T:System.Text.Encodings.Web.TextEncoderSettings" /> object.</summary>
            <param name="other">The other <see cref="T:System.Text.Encodings.Web.TextEncoderSettings" /> object to be cloned.</param>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.#ctor(System.Text.Unicode.UnicodeRange[])">
            <summary>Instantiates a filter where only the character ranges specified by <paramref name="allowedRanges" /> are allowed by the filter.</summary>
            <param name="allowedRanges">The allowed character ranges.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="allowedRanges" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.AllowCharacter(System.Char)">
            <summary>Allows the character specified by <paramref name="character" /> through the filter.</summary>
            <param name="character">The allowed character.</param>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.AllowCharacters(System.Char[])">
            <summary>Allows all characters specified by <paramref name="characters" /> through the filter.</summary>
            <param name="characters">The allowed characters.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="characters" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.AllowCodePoints(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Allows all code points specified by <paramref name="codePoints" />.</summary>
            <param name="codePoints">The allowed code points.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="codePoints" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.AllowRange(System.Text.Unicode.UnicodeRange)">
            <summary>Allows all characters specified by <paramref name="range" /> through the filter.</summary>
            <param name="range">The range of characters to be allowed.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="range" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.AllowRanges(System.Text.Unicode.UnicodeRange[])">
            <summary>Allows all characters specified by <paramref name="ranges" /> through the filter.</summary>
            <param name="ranges">The ranges of characters to be allowed.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="ranges" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.Clear">
            <summary>Resets this object by disallowing all characters.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.ForbidCharacter(System.Char)">
            <summary>Disallows the character <paramref name="character" /> through the filter.</summary>
            <param name="character">The disallowed character.</param>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.ForbidCharacters(System.Char[])">
            <summary>Disallows all characters specified by <paramref name="characters" /> through the filter.</summary>
            <param name="characters">The disallowed characters.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="characters" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.ForbidRange(System.Text.Unicode.UnicodeRange)">
            <summary>Disallows all characters specified by <paramref name="range" /> through the filter.</summary>
            <param name="range">The range of characters to be disallowed.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="range" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.ForbidRanges(System.Text.Unicode.UnicodeRange[])">
            <summary>Disallows all characters specified by <paramref name="ranges" /> through the filter.</summary>
            <param name="ranges">The ranges of characters to be disallowed.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="ranges" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Encodings.Web.TextEncoderSettings.GetAllowedCodePoints">
            <summary>Gets an enumerator of all allowed code points.</summary>
            <returns>The enumerator of allowed code points.</returns>
        </member>
        <member name="T:System.Text.Encodings.Web.UrlEncoder">
            <summary>Represents a URL character encoding.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.UrlEncoder.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Encodings.Web.UrlEncoder" /> class.</summary>
        </member>
        <member name="M:System.Text.Encodings.Web.UrlEncoder.Create(System.Text.Encodings.Web.TextEncoderSettings)">
            <summary>Creates a new instance of UrlEncoder class with the specified settings.</summary>
            <param name="settings">Settings that control how the <see cref="T:System.Text.Encodings.Web.UrlEncoder" /> instance encodes, primarily which characters to encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="settings" /> is <see langword="null" />.</exception>
            <returns>A new instance of the <see cref="T:System.Text.Encodings.Web.UrlEncoder" /> class.</returns>
        </member>
        <member name="M:System.Text.Encodings.Web.UrlEncoder.Create(System.Text.Unicode.UnicodeRange[])">
            <summary>Creates a new instance of the UrlEncoder class that specifies characters the encoder is allowed to not encode.</summary>
            <param name="allowedRanges">The set of characters that the encoder is allowed to not encode.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="allowedRanges" /> is <see langword="null" />.</exception>
            <returns>A new instance of the <see cref="T:System.Text.Encodings.Web.UrlEncoder" /> class.</returns>
        </member>
        <member name="P:System.Text.Encodings.Web.UrlEncoder.Default">
            <summary>Gets a built-in instance of the <see cref="T:System.Text.Encodings.Web.UrlEncoder" /> class.</summary>
            <returns>A built-in instance of the <see cref="T:System.Text.Encodings.Web.UrlEncoder" /> class.</returns>
        </member>
        <member name="T:System.Text.Unicode.UnicodeRange">
            <summary>Represents a contiguous range of Unicode code points.</summary>
        </member>
        <member name="M:System.Text.Unicode.UnicodeRange.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:System.Text.Unicode.UnicodeRange" /> that includes a specified number of characters starting at a specified Unicode code point.</summary>
            <param name="firstCodePoint">The first code point in the range.</param>
            <param name="length">The number of code points in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="firstCodePoint" /> is less than zero or greater than 0xFFFF. 

-or-           

<paramref name="length" /> is less than zero.

-or-

<paramref name="firstCodePoint" /> plus <paramref name="length" /> is greater than 0xFFFF.</exception>
        </member>
        <member name="M:System.Text.Unicode.UnicodeRange.Create(System.Char,System.Char)">
            <summary>Creates a new <see cref="T:System.Text.Unicode.UnicodeRange" /> instance from a span of characters.</summary>
            <param name="firstCharacter">The first character in the range.</param>
            <param name="lastCharacter">The last character in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="lastCharacter" /> precedes <paramref name="firstCharacter" />.</exception>
            <returns>A range that includes all characters between <paramref name="firstCharacter" /> and <paramref name="lastCharacter" />.</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRange.FirstCodePoint">
            <summary>Gets the first code point in the range represented by this <see cref="T:System.Text.Unicode.UnicodeRange" /> instance.</summary>
            <returns>The first code point in the range.</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRange.Length">
            <summary>Gets the number of code points in the range represented by this <see cref="T:System.Text.Unicode.UnicodeRange" /> instance.</summary>
            <returns>The number of code points in the range.</returns>
        </member>
        <member name="T:System.Text.Unicode.UnicodeRanges">
            <summary>Provides static properties that return predefined <see cref="T:System.Text.Unicode.UnicodeRange" /> instances that correspond to blocks from the Unicode specification.</summary>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.All">
            <summary>Gets a range that consists of the entire Basic Multilingual Plane (BMP), from U+0000 to U+FFFF).</summary>
            <returns>A range that consists of the entire BMP.</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.AlphabeticPresentationForms">
            <summary>Gets the Alphabetic Presentation Forms Unicode block (U+FB00-U+FB4F).</summary>
            <returns>The Alphabetic Presentation Forms Unicode block (U+FB00-U+FB4F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Arabic">
            <summary>Gets the Arabic Unicode block (U+0600-U+06FF).</summary>
            <returns>The Arabic Unicode block (U+0600-U+06FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.ArabicExtendedA">
            <summary>Gets the Arabic Extended-A Unicode block (U+08A0-U+08FF).</summary>
            <returns>The Arabic Extended-A Unicode block (U+08A0-U+08FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.ArabicPresentationFormsA">
            <summary>Gets the Arabic Presentation Forms-A Unicode block (U+FB50-U+FDFF).</summary>
            <returns>The Arabic Presentation Forms-A Unicode block (U+FB50-U+FDFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.ArabicPresentationFormsB">
            <summary>Gets the Arabic Presentation Forms-B Unicode block (U+FE70-U+FEFF).</summary>
            <returns>The Arabic Presentation Forms-B Unicode block (U+FE70-U+FEFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.ArabicSupplement">
            <summary>Gets the Arabic Supplement Unicode block (U+0750-U+077F).</summary>
            <returns>The Arabic Supplement Unicode block (U+0750-U+077F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Armenian">
            <summary>Gets the Armenian Unicode block (U+0530-U+058F).</summary>
            <returns>The Armenian Unicode block (U+0530-U+058F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Arrows">
            <summary>Gets the Arrows Unicode block (U+2190-U+21FF).</summary>
            <returns>The Arrows Unicode block (U+2190-U+21FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Balinese">
            <summary>Gets the Balinese Unicode block (U+1B00-U+1B7F).</summary>
            <returns>The Balinese Unicode block (U+1B00-U+1B7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Bamum">
            <summary>Gets the Bamum Unicode block (U+A6A0-U+A6FF).</summary>
            <returns>The Bamum Unicode block (U+A6A0-U+A6FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.BasicLatin">
            <summary>Gets the Basic Latin Unicode block (U+0021-U+007F).</summary>
            <returns>The Basic Latin Unicode block (U+0021-U+007F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Batak">
            <summary>Gets the Batak Unicode block (U+1BC0-U+1BFF).</summary>
            <returns>The Batak Unicode block (U+1BC0-U+1BFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Bengali">
            <summary>Gets the Bengali Unicode block (U+0980-U+09FF).</summary>
            <returns>The Bengali Unicode block (U+0980-U+09FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.BlockElements">
            <summary>Gets the Block Elements Unicode block (U+2580-U+259F).</summary>
            <returns>The Block Elements Unicode block (U+2580-U+259F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Bopomofo">
            <summary>Gets the Bopomofo Unicode block (U+3100-U+312F).</summary>
            <returns>The Bopomofo Unicode block (U+3105-U+312F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.BopomofoExtended">
            <summary>Gets the Bopomofo Extended Unicode block (U+31A0-U+31BF).</summary>
            <returns>The Bopomofo Extended Unicode block (U+31A0-U+31BF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.BoxDrawing">
            <summary>Gets the Box Drawing Unicode block (U+2500-U+257F).</summary>
            <returns>The Box Drawing Unicode block (U+2500-U+257F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.BraillePatterns">
            <summary>Gets the Braille Patterns Unicode block (U+2800-U+28FF).</summary>
            <returns>The Braille Patterns Unicode block (U+2800-U+28FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Buginese">
            <summary>Gets the Buginese Unicode block (U+1A00-U+1A1F).</summary>
            <returns>The Buginese Unicode block (U+1A00-U+1A1F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Buhid">
            <summary>Gets the Buhid Unicode block (U+1740-U+175F).</summary>
            <returns>The Buhid Unicode block (U+1740-U+175F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Cham">
            <summary>Gets the Cham Unicode block (U+AA00-U+AA5F).</summary>
            <returns>The Cham Unicode block (U+AA00-U+AA5F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Cherokee">
            <summary>Gets the Cherokee Unicode block (U+13A0-U+13FF).</summary>
            <returns>The Cherokee Unicode block (U+13A0-U+13FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CherokeeSupplement">
            <summary>Gets the Cherokee Supplement Unicode block (U+AB70-U+ABBF).</summary>
            <returns>The Cherokee Supplement Unicode block (U+AB70-U+ABBF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkCompatibility">
            <summary>Gets the CJK Compatibility Unicode block (U+3300-U+33FF).</summary>
            <returns>The CJK Compatibility Unicode block (U+3300-U+33FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkCompatibilityForms">
            <summary>Gets the CJK Compatibility Forms Unicode block (U+FE30-U+FE4F).</summary>
            <returns>The CJK Compatibility Forms Unicode block (U+FE30-U+FE4F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkCompatibilityIdeographs">
            <summary>Gets the CJK Compatibility Ideographs Unicode block (U+F900-U+FAD9).</summary>
            <returns>The CJK Compatibility Ideographs Unicode block (U+F900-U+FAD9).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkRadicalsSupplement">
            <summary>Gets the CJK Radicals Supplement Unicode block (U+2E80-U+2EFF).</summary>
            <returns>The CJK Radicals Supplement Unicode block (U+2E80-U+2EFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkStrokes">
            <summary>Gets the CJK Strokes Unicode block (U+31C0-U+31EF).</summary>
            <returns>The CJK Strokes Unicode block (U+31C0-U+31EF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkSymbolsandPunctuation">
            <summary>Gets the CJK Symbols and Punctuation Unicode block (U+3000-U+303F).</summary>
            <returns>The CJK Symbols and Punctuation Unicode block (U+3000-U+303F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkUnifiedIdeographs">
            <summary>Gets the CJK Unified Ideographs Unicode block (U+4E00-U+9FCC).</summary>
            <returns>The CJK Unified Ideographs Unicode block (U+4E00-U+9FCC).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CjkUnifiedIdeographsExtensionA">
            <summary>Gets the CJK Unitied Ideographs Extension A Unicode block (U+3400-U+4DB5).</summary>
            <returns>The CJK Unitied Ideographs Extension A Unicode block (U+3400-U+4DB5).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CombiningDiacriticalMarks">
            <summary>Gets the Combining Diacritical Marks Unicode block (U+0300-U+036F).</summary>
            <returns>The Combining Diacritical Marks Unicode block (U+0300-U+036F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CombiningDiacriticalMarksExtended">
            <summary>Gets the Combining Diacritical Marks Extended Unicode block (U+1AB0-U+1AFF).</summary>
            <returns>The Combining Diacritical Marks Extended Unicode block (U+1AB0-U+1AFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CombiningDiacriticalMarksforSymbols">
            <summary>Gets the Combining Diacritical Marks for Symbols Unicode block (U+20D0-U+20FF).</summary>
            <returns>The Combining Diacritical Marks for Symbols Unicode block (U+20D0-U+20FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CombiningDiacriticalMarksSupplement">
            <summary>Gets the Combining Diacritical Marks Supplement Unicode block (U+1DC0-U+1DFF).</summary>
            <returns>The Combining Diacritical Marks Supplement Unicode block (U+1DC0-U+1DFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CombiningHalfMarks">
            <summary>Gets the Combining Half Marks Unicode block (U+FE20-U+FE2F).</summary>
            <returns>The Combining Half Marks Unicode block (U+FE20-U+FE2F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CommonIndicNumberForms">
            <summary>Gets the Common Indic Number Forms Unicode block (U+A830-U+A83F).</summary>
            <returns>The Common Indic Number Forms Unicode block (U+A830-U+A83F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.ControlPictures">
            <summary>Gets the Control Pictures Unicode block (U+2400-U+243F).</summary>
            <returns>The Control Pictures Unicode block (U+2400-U+243F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Coptic">
            <summary>Gets the Coptic Unicode block (U+2C80-U+2CFF).</summary>
            <returns>The Coptic Unicode block (U+2C80-U+2CFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CurrencySymbols">
            <summary>Gets the Currency Symbols Unicode block (U+20A0-U+20CF).</summary>
            <returns>The Currency Symbols Unicode block (U+20A0-U+20CF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Cyrillic">
            <summary>Gets the Cyrillic Unicode block (U+0400-U+04FF).</summary>
            <returns>The Cyrillic Unicode block (U+0400-U+04FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CyrillicExtendedA">
            <summary>Gets the Cyrillic Extended-A Unicode block (U+2DE0-U+2DFF).</summary>
            <returns>The Cyrillic Extended-A Unicode block (U+2DE0-U+2DFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CyrillicExtendedB">
            <summary>Gets the Cyrillic Extended-B Unicode block (U+A640-U+A69F).</summary>
            <returns>The Cyrillic Extended-B Unicode block (U+A640-U+A69F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CyrillicExtendedC">
            <summary>A <see cref="T:System.Text.Unicode.UnicodeRange" /> corresponding to the 'Cyrillic Extended-C' Unicode block (U+1C80..U+1C8F).</summary>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.CyrillicSupplement">
            <summary>Gets the Cyrillic Supplement Unicode block (U+0500-U+052F).</summary>
            <returns>The Cyrillic Supplement Unicode block (U+0500-U+052F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Devanagari">
            <summary>Gets the Devangari Unicode block (U+0900-U+097F).</summary>
            <returns>The Devangari Unicode block (U+0900-U+097F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.DevanagariExtended">
            <summary>Gets the Devanagari Extended Unicode block (U+A8E0-U+A8FF).</summary>
            <returns>The Devanagari Extended Unicode block (U+A8E0-U+A8FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Dingbats">
            <summary>Gets the Dingbats Unicode block (U+2700-U+27BF).</summary>
            <returns>The Dingbats Unicode block (U+2700-U+27BF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.EnclosedAlphanumerics">
            <summary>Gets the Enclosed Alphanumerics Unicode block (U+2460-U+24FF).</summary>
            <returns>The Enclosed Alphanumerics Unicode block (U+2460-U+24FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.EnclosedCjkLettersandMonths">
            <summary>Gets the Enclosed CJK Letters and Months Unicode block (U+3200-U+32FF).</summary>
            <returns>The Enclosed CJK Letters and Months Unicode block (U+3200-U+32FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Ethiopic">
            <summary>Gets the Ethiopic Unicode block (U+1200-U+137C).</summary>
            <returns>The Ethiopic Unicode block (U+1200-U+137C).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.EthiopicExtended">
            <summary>Gets the Ethipic Extended Unicode block (U+2D80-U+2DDF).</summary>
            <returns>The Ethipic Extended Unicode block (U+2D80-U+2DDF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.EthiopicExtendedA">
            <summary>Gets the Ethiopic Extended-A Unicode block (U+AB00-U+AB2F).</summary>
            <returns>The Ethiopic Extended-A Unicode block (U+AB00-U+AB2F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.EthiopicSupplement">
            <summary>Gets the Ethiopic Supplement Unicode block (U+1380-U+1399).</summary>
            <returns>The Ethiopic Supplement Unicode block (U+1380-U+1399).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.GeneralPunctuation">
            <summary>Gets the General Punctuation Unicode block (U+2000-U+206F).</summary>
            <returns>The General Punctuation Unicode block (U+2000-U+206F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.GeometricShapes">
            <summary>Gets the Geometric Shapes Unicode block (U+25A0-U+25FF).</summary>
            <returns>The Geometric Shapes Unicode block (U+25A0-U+25FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Georgian">
            <summary>Gets the Georgian Unicode block (U+10A0-U+10FF).</summary>
            <returns>The Georgian Unicode block (U+10A0-U+10FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.GeorgianExtended">
            <summary>A <see cref="T:System.Text.Unicode.UnicodeRange" /> corresponding to the 'Georgian Extended' Unicode block (U+1C90..U+1CBF).</summary>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.GeorgianSupplement">
            <summary>Gets the Georgian Supplement Unicode block (U+2D00-U+2D2F).</summary>
            <returns>The Georgian Supplement Unicode block (U+2D00-U+2D2F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Glagolitic">
            <summary>Gets the Glagolitic Unicode block (U+2C00-U+2C5F).</summary>
            <returns>The Glagolitic Unicode block (U+2C00-U+2C5F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.GreekandCoptic">
            <summary>Gets the Greek and Coptic Unicode block (U+0370-U+03FF).</summary>
            <returns>The Greek and Coptic Unicode block (U+0370-U+03FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.GreekExtended">
            <summary>Gets the Greek Extended Unicode block (U+1F00-U+1FFF).</summary>
            <returns>The Greek Extended Unicode block (U+1F00-U+1FFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Gujarati">
            <summary>Gets the Gujarti Unicode block (U+0A81-U+0AFF).</summary>
            <returns>The Gujarti Unicode block (U+0A81-U+0AFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Gurmukhi">
            <summary>Gets the Gurmukhi Unicode block (U+0A01-U+0A7F).</summary>
            <returns>The Gurmukhi Unicode block (U+0A01-U+0A7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.HalfwidthandFullwidthForms">
            <summary>Gets the Halfwidth and Fullwidth Forms Unicode block (U+FF00-U+FFEE).</summary>
            <returns>The Halfwidth and Fullwidth Forms Unicode block (U+FF00-U+FFEE).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.HangulCompatibilityJamo">
            <summary>Gets the Hangul Compatibility Jamo Unicode block (U+3131-U+318F).</summary>
            <returns>The Hangul Compatibility Jamo Unicode block (U+3131-U+318F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.HangulJamo">
            <summary>Gets the Hangul Jamo Unicode block (U+1100-U+11FF).</summary>
            <returns>The Hangul Jamo Unicode block (U+1100-U+11FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.HangulJamoExtendedA">
            <summary>Gets the Hangul Jamo Extended-A Unicode block (U+A960-U+A9F).</summary>
            <returns>The Hangul Jamo Extended-A Unicode block (U+A960-U+A97F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.HangulJamoExtendedB">
            <summary>Gets the Hangul Jamo Extended-B Unicode block (U+D7B0-U+D7FF).</summary>
            <returns>The Hangul Jamo Extended-B Unicode block (U+D7B0-U+D7FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.HangulSyllables">
            <summary>Gets the Hangul Syllables Unicode block (U+AC00-U+D7AF).</summary>
            <returns>The Hangul Syllables Unicode block (U+AC00-U+D7AF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Hanunoo">
            <summary>Gets the Hanunoo Unicode block (U+1720-U+173F).</summary>
            <returns>The Hanunoo Unicode block (U+1720-U+173F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Hebrew">
            <summary>Gets the Hebrew Unicode block (U+0590-U+05FF).</summary>
            <returns>The Hebrew Unicode block (U+0590-U+05FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Hiragana">
            <summary>Gets the Hiragana Unicode block (U+3040-U+309F).</summary>
            <returns>The Hiragana Unicode block (U+3040-U+309F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.IdeographicDescriptionCharacters">
            <summary>Gets the Ideographic Description Characters Unicode block (U+2FF0-U+2FFF).</summary>
            <returns>The Ideographic Description Characters Unicode block (U+2FF0-U+2FFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.IpaExtensions">
            <summary>Gets the IPA Extensions Unicode block (U+0250-U+02AF).</summary>
            <returns>The IPA Extensions Unicode block (U+0250-U+02AF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Javanese">
            <summary>Gets the Javanese Unicode block (U+A980-U+A9DF).</summary>
            <returns>The Javanese Unicode block (U+A980-U+A9DF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Kanbun">
            <summary>Gets the Kanbun Unicode block (U+3190-U+319F).</summary>
            <returns>The Kanbun Unicode block (U+3190-U+319F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.KangxiRadicals">
            <summary>Gets the Kangxi Radicals Supplement Unicode block (U+2F00-U+2FDF).</summary>
            <returns>The Kangxi Radicals Supplement Unicode block (U+2F00-U+2FDF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Kannada">
            <summary>Gets the Kannada Unicode block (U+0C81-U+0CFF).</summary>
            <returns>The Kannada Unicode block (U+0C81-U+0CFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Katakana">
            <summary>Gets the Katakana Unicode block (U+30A0-U+30FF).</summary>
            <returns>The Katakana Unicode block (U+30A0-U+30FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.KatakanaPhoneticExtensions">
            <summary>Gets the Katakana Phonetic Extensions Unicode block (U+31F0-U+31FF).</summary>
            <returns>The Katakana Phonetic Extensions Unicode block (U+31F0-U+31FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.KayahLi">
            <summary>Gets the Kayah Li Unicode block (U+A900-U+A92F).</summary>
            <returns>The Kayah Li Unicode block (U+A900-U+A92F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Khmer">
            <summary>Gets the Khmer Unicode block (U+1780-U+17FF).</summary>
            <returns>The Khmer Unicode block (U+1780-U+17FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.KhmerSymbols">
            <summary>Gets the Khmer Symbols Unicode block (U+19E0-U+19FF).</summary>
            <returns>The Khmer Symbols Unicode block (U+19E0-U+19FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Lao">
            <summary>Gets the Lao Unicode block (U+0E80-U+0EDF).</summary>
            <returns>The Lao Unicode block (U+0E80-U+0EDF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Latin1Supplement">
            <summary>Gets the Latin-1 Supplement Unicode block (U+00A1-U+00FF).</summary>
            <returns>The Latin-1 Supplement Unicode block (U+00A1-U+00FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.LatinExtendedA">
            <summary>Gets the Latin Extended-A Unicode block (U+0100-U+017F).</summary>
            <returns>The Latin Extended-A Unicode block (U+0100-U+017F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.LatinExtendedAdditional">
            <summary>Gets the Latin Extended Additional Unicode block (U+1E00-U+1EFF).</summary>
            <returns>The Latin Extended Additional Unicode block (U+1E00-U+1EFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.LatinExtendedB">
            <summary>Gets the Latin Extended-B Unicode block (U+0180-U+024F).</summary>
            <returns>The Latin Extended-B Unicode block (U+0180-U+024F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.LatinExtendedC">
            <summary>Gets the Latin Extended-C Unicode block (U+2C60-U+2C7F).</summary>
            <returns>The Latin Extended-C Unicode block (U+2C60-U+2C7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.LatinExtendedD">
            <summary>Gets the Latin Extended-D Unicode block (U+A720-U+A7FF).</summary>
            <returns>The Latin Extended-D Unicode block (U+A720-U+A7FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.LatinExtendedE">
            <summary>Gets the Latin Extended-E Unicode block (U+AB30-U+AB6F).</summary>
            <returns>The Latin Extended-E Unicode block (U+AB30-U+AB6F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Lepcha">
            <summary>Gets the Lepcha Unicode block (U+1C00-U+1C4F).</summary>
            <returns>The Lepcha Unicode block (U+1C00-U+1C4F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.LetterlikeSymbols">
            <summary>Gets the Letterlike Symbols Unicode block (U+2100-U+214F).</summary>
            <returns>The Letterlike Symbols Unicode block (U+2100-U+214F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Limbu">
            <summary>Gets the Limbu Unicode block (U+1900-U+194F).</summary>
            <returns>The Limbu Unicode block (U+1900-U+194F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Lisu">
            <summary>Gets the Lisu Unicode block (U+A4D0-U+A4FF).</summary>
            <returns>The Lisu Unicode block (U+A4D0-U+A4FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Malayalam">
            <summary>Gets the Malayalam Unicode block (U+0D00-U+0D7F).</summary>
            <returns>The Malayalam Unicode block (U+0D00-U+0D7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Mandaic">
            <summary>Gets the Mandaic Unicode block (U+0840-U+085F).</summary>
            <returns>The Mandaic Unicode block (U+0840-U+085F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MathematicalOperators">
            <summary>Gets the Mathematical Operators Unicode block (U+2200-U+22FF).</summary>
            <returns>The Mathematical Operators Unicode block (U+2200-U+22FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MeeteiMayek">
            <summary>Gets the Meetei Mayek Unicode block (U+ABC0-U+ABFF).</summary>
            <returns>The Meetei Mayek Unicode block (U+ABC0-U+ABFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MeeteiMayekExtensions">
            <summary>Gets the Meetei Mayek Extensions Unicode block (U+AAE0-U+AAFF).</summary>
            <returns>The Meetei Mayek Extensions Unicode block (U+AAE0-U+AAFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MiscellaneousMathematicalSymbolsA">
            <summary>Gets the Miscellaneous Mathematical Symbols-A Unicode block (U+27C0-U+27EF).</summary>
            <returns>The Miscellaneous Mathematical Symbols-A Unicode block (U+27C0-U+27EF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MiscellaneousMathematicalSymbolsB">
            <summary>Gets the Miscellaneous Mathematical Symbols-B Unicode block (U+2980-U+29FF).</summary>
            <returns>The Miscellaneous Mathematical Symbols-B Unicode block (U+2980-U+29FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MiscellaneousSymbols">
            <summary>Gets the Miscellaneous Symbols Unicode block (U+2600-U+26FF).</summary>
            <returns>The Miscellaneous Symbols Unicode block (U+2600-U+26FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MiscellaneousSymbolsandArrows">
            <summary>Gets the Miscellaneous Symbols and Arrows Unicode block (U+2B00-U+2BFF).</summary>
            <returns>The Miscellaneous Symbols and Arrows Unicode block (U+2B00-U+2BFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MiscellaneousTechnical">
            <summary>Gets the Miscellaneous Technical Unicode block (U+2300-U+23FF).</summary>
            <returns>The Miscellaneous Technical Unicode block (U+2300-U+23FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.ModifierToneLetters">
            <summary>Gets the Modifier Tone Letters Unicode block (U+A700-U+A71F).</summary>
            <returns>The Modifier Tone Letters Unicode block (U+A700-U+A71F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Mongolian">
            <summary>Gets the Mongolian Unicode block (U+1800-U+18AF).</summary>
            <returns>The Mongolian Unicode block (U+1800-U+18AF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Myanmar">
            <summary>Gets the Myanmar Unicode block (U+1000-U+109F).</summary>
            <returns>The Myanmar Unicode block (U+1000-U+109F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MyanmarExtendedA">
            <summary>Gets the Myanmar Extended-A Unicode block (U+AA60-U+AA7F).</summary>
            <returns>The Myanmar Extended-A Unicode block (U+AA60-U+AA7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.MyanmarExtendedB">
            <summary>Gets the Myanmar Extended-B Unicode block (U+A9E0-U+A9FF).</summary>
            <returns>The Myanmar Extended-B Unicode block (U+A9E0-U+A9FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.NewTaiLue">
            <summary>Gets the New Tai Lue Unicode block (U+1980-U+19DF).</summary>
            <returns>The New Tai Lue Unicode block (U+1980-U+19DF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.NKo">
            <summary>Gets the NKo Unicode block (U+07C0-U+07FF).</summary>
            <returns>The NKo Unicode block (U+07C0-U+07FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.None">
            <summary>Gets an empty Unicode range.</summary>
            <returns>A Unicode range with no elements.</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.NumberForms">
            <summary>Gets the Number Forms Unicode block (U+2150-U+218F).</summary>
            <returns>The Number Forms Unicode block (U+2150-U+218F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Ogham">
            <summary>Gets the Ogham Unicode block (U+1680-U+169F).</summary>
            <returns>The Ogham Unicode block (U+1680-U+169F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.OlChiki">
            <summary>Gets the Ol Chiki Unicode block (U+1C50-U+1C7F).</summary>
            <returns>The Ol Chiki Unicode block (U+1C50-U+1C7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.OpticalCharacterRecognition">
            <summary>Gets the Optical Character Recognition Unicode block (U+2440-U+245F).</summary>
            <returns>The Optical Character Recognition Unicode block (U+2440-U+245F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Oriya">
            <summary>Gets the Oriya Unicode block (U+0B00-U+0B7F).</summary>
            <returns>The Oriya Unicode block (U+0B00-U+0B7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Phagspa">
            <summary>Gets the Phags-pa Unicode block (U+A840-U+A87F).</summary>
            <returns>The Phags-pa Unicode block (U+A840-U+A87F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.PhoneticExtensions">
            <summary>Gets the Phonetic Extensions Unicode block (U+1D00-U+1D7F).</summary>
            <returns>The Phonetic Extensions Unicode block (U+1D00-U+1D7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.PhoneticExtensionsSupplement">
            <summary>Gets the Phonetic Extensions Supplement Unicode block (U+1D80-U+1DBF).</summary>
            <returns>The Phonetic Extensions Supplement Unicode block (U+1D80-U+1DBF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Rejang">
            <summary>Gets the Rejang Unicode block (U+A930-U+A95F).</summary>
            <returns>The Rejang Unicode block (U+A930-U+A95F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Runic">
            <summary>Gets the Runic Unicode block (U+16A0-U+16FF).</summary>
            <returns>The Runic Unicode block (U+16A0-U+16FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Samaritan">
            <summary>Gets the Samaritan Unicode block (U+0800-U+083F).</summary>
            <returns>The Samaritan Unicode block (U+0800-U+083F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Saurashtra">
            <summary>Gets the Saurashtra Unicode block (U+A880-U+A8DF).</summary>
            <returns>The Saurashtra Unicode block (U+A880-U+A8DF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Sinhala">
            <summary>Gets the Sinhala Unicode block (U+0D80-U+0DFF).</summary>
            <returns>The Sinhala Unicode block (U+0D80-U+0DFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SmallFormVariants">
            <summary>Gets the Small Form Variants Unicode block (U+FE50-U+FE6F).</summary>
            <returns>The Small Form Variants Unicode block (U+FE50-U+FE6F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SpacingModifierLetters">
            <summary>Gets the Spacing Modifier Letters Unicode block (U+02B0-U+02FF).</summary>
            <returns>The Spacing Modifier Letters Unicode block (U+02B0-U+02FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Specials">
            <summary>Gets the Specials Unicode block (U+FFF0-U+FFFF).</summary>
            <returns>The Specials Unicode block (U+FFF0-U+FFFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Sundanese">
            <summary>Gets the Sundanese Unicode block (U+1B80-U+1BBF).</summary>
            <returns>The Sundanese Unicode block (U+1B80-U+1BBF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SundaneseSupplement">
            <summary>Gets the Sundanese Supplement Unicode block (U+1CC0-U+1CCF).</summary>
            <returns>The Sundanese Supplement Unicode block (U+1CC0-U+1CCF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SuperscriptsandSubscripts">
            <summary>Gets the Superscripts and Subscripts Unicode block (U+2070-U+209F).</summary>
            <returns>The Superscripts and Subscripts Unicode block (U+2070-U+209F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SupplementalArrowsA">
            <summary>Gets the Supplemental Arrows-A Unicode block (U+27F0-U+27FF).</summary>
            <returns>The Supplemental Arrows-A Unicode block (U+27F0-U+27FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SupplementalArrowsB">
            <summary>Gets the Supplemental Arrows-B Unicode block (U+2900-U+297F).</summary>
            <returns>The Supplemental Arrows-B Unicode block (U+2900-U+297F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SupplementalMathematicalOperators">
            <summary>Gets the Supplemental Mathematical Operators Unicode block (U+2A00-U+2AFF).</summary>
            <returns>The Supplemental Mathematical Operators Unicode block (U+2A00-U+2AFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SupplementalPunctuation">
            <summary>Gets the Supplemental Punctuation Unicode block (U+2E00-U+2E7F).</summary>
            <returns>The Supplemental Punctuation Unicode block (U+2E00-U+2E7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SylotiNagri">
            <summary>Gets the Syloti Nagri Unicode block (U+A800-U+A82F).</summary>
            <returns>The Syloti Nagri Unicode block (U+A800-U+A82F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Syriac">
            <summary>Gets the Syriac Unicode block (U+0700-U+074F).</summary>
            <returns>The Syriac Unicode block (U+0700-U+074F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.SyriacSupplement">
            <summary>A <see cref="T:System.Text.Unicode.UnicodeRange" /> corresponding to the 'Syriac Supplement' Unicode block (U+0860..U+086F).</summary>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Tagalog">
            <summary>Gets the Tagalog Unicode block (U+1700-U+171F).</summary>
            <returns>The Tagalog Unicode block (U+1700-U+171F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Tagbanwa">
            <summary>Gets the Tagbanwa Unicode block (U+1760-U+177F).</summary>
            <returns>The Tagbanwa Unicode block (U+1760-U+177F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.TaiLe">
            <summary>Gets the Tai Le Unicode block (U+1950-U+197F).</summary>
            <returns>The Tai Le Unicode block (U+1950-U+197F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.TaiTham">
            <summary>Gets the Tai Tham Unicode block (U+1A20-U+1AAF).</summary>
            <returns>The Tai Tham Unicode block (U+1A20-U+1AAF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.TaiViet">
            <summary>Gets the Tai Viet Unicode block (U+AA80-U+AADF).</summary>
            <returns>The Tai Viet Unicode block (U+AA80-U+AADF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Tamil">
            <summary>Gets the Tamil Unicode block (U+0B80-U+0BFF).</summary>
            <returns>The Tamil Unicode block (U+0B82-U+0BFA).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Telugu">
            <summary>Gets the Telugu Unicode block (U+0C00-U+0C7F).</summary>
            <returns>The Telugu Unicode block (U+0C00-U+0C7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Thaana">
            <summary>Gets the Thaana Unicode block (U+0780-U+07BF).</summary>
            <returns>The Thaana Unicode block (U+0780-U+07BF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Thai">
            <summary>Gets the Thai Unicode block (U+0E00-U+0E7F).</summary>
            <returns>The Thai Unicode block (U+0E00-U+0E7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Tibetan">
            <summary>Gets the Tibetan Unicode block (U+0F00-U+0FFF).</summary>
            <returns>The Tibetan Unicode block (U+0F00-U+0FFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Tifinagh">
            <summary>Gets the Tifinagh Unicode block (U+2D30-U+2D7F).</summary>
            <returns>The Tifinagh Unicode block (U+2D30-U+2D7F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.UnifiedCanadianAboriginalSyllabics">
            <summary>Gets the Unified Canadian Aboriginal Syllabics Unicode block (U+1400-U+167F).</summary>
            <returns>The Unified Canadian Aboriginal Syllabics Unicode block (U+1400-U+167F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.UnifiedCanadianAboriginalSyllabicsExtended">
            <summary>Gets the Unified Canadian Aboriginal Syllabics Extended Unicode block (U+18B0-U+18FF).</summary>
            <returns>The Unified Canadian Aboriginal Syllabics Extended Unicode block (U+18B0-U+18FF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.Vai">
            <summary>Gets the Vai Unicode block (U+A500-U+A63F).</summary>
            <returns>The Vai Unicode block (U+A500-U+A63F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.VariationSelectors">
            <summary>Gets the Variation Selectors Unicode block (U+FE00-U+FE0F).</summary>
            <returns>The Variation Selectors Unicode block (U+FE00-U+FE0F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.VedicExtensions">
            <summary>Gets the Vedic Extensions Unicode block (U+1CD0-U+1CFF).</summary>
            <returns>The Vedic Extensions Unicode block (U+1CD0-U+1CFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.VerticalForms">
            <summary>Gets the Vertical Forms Unicode block (U+FE10-U+FE1F).</summary>
            <returns>The Vertical Forms Unicode block (U+FE10-U+FE1F).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.YijingHexagramSymbols">
            <summary>Gets the Yijing Hexagram Symbols Unicode block (U+4DC0-U+4DFF).</summary>
            <returns>The Yijing Hexagram Symbols Unicode block (U+4DC0-U+4DFF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.YiRadicals">
            <summary>Gets the Yi Radicals Unicode block (U+A490-U+A4CF).</summary>
            <returns>The Yi Radicals Unicode block (U+A490-U+A4CF).</returns>
        </member>
        <member name="P:System.Text.Unicode.UnicodeRanges.YiSyllables">
            <summary>Gets the Yi Syllables Unicode block (U+A000-U+A48F).</summary>
            <returns>The Yi Syllables Unicode block (U+A000-U+A48F).</returns>
        </member>
        <member name="T:System.Text.Json.JsonCommentHandling">
            <summary>Defines how the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct handles comments.</summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Allow">
            <summary>Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.</summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
            <summary>Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a <see cref="T:System.Text.Json.JsonException" /> is thrown. This is the default value.</summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Skip">
            <summary>Allows comments within the JSON input and ignores them. The <see cref="T:System.Text.Json.Utf8JsonReader" /> behaves as if no comments are present.</summary>
        </member>
        <member name="T:System.Text.Json.JsonDocument">
            <summary>Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.</summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Dispose">
            <summary>Releases the resources used by this <see cref="T:System.Text.Json.JsonDocument" /> instance.</summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>Parses a sequence as UTF-8-encoded text representing a single JSON byte value into a JsonDocument.</summary>
            <param name="utf8Json">The JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="utf8Json" /> does not represent a valid single JSON value.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> contains unsupported options.</exception>
            <returns>A JsonDocument representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>Parses a <see cref="T:System.IO.Stream" /> as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.</summary>
            <param name="utf8Json">The JSON data to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="utf8Json" /> does not represent a valid single JSON value.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> contains unsupported options.</exception>
            <returns>A JsonDocument representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>Parses memory as UTF-8-encoded text representing a single JSON byte value into a JsonDocument.</summary>
            <param name="utf8Json">The JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="utf8Json" /> does not represent a valid single JSON value.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> contains unsupported options.</exception>
            <returns>A JsonDocument representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>Parses text representing a single JSON value into a JsonDocument.</summary>
            <param name="json">The JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="json" /> does not represent a valid single JSON value.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> contains unsupported options.</exception>
            <returns>A JsonDocument representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>Parses text representing a single JSON string value into a JsonDocument.</summary>
            <param name="json">The JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="json" /> does not represent a valid single JSON value.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> contains unsupported options.</exception>
            <returns>A JsonDocument representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
            <summary>Parses a <see cref="T:System.IO.Stream" /> as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.</summary>
            <param name="utf8Json">The JSON data to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="utf8Json" /> does not represent a valid single JSON value.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="options" /> contains unsupported options.</exception>
            <returns>A task to produce a JsonDocument representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>Parses one JSON value (including objects or arrays) from the provided reader.</summary>
            <param name="reader">The reader to read.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> contains unsupported options.

-or-

The current <paramref name="reader" /> token does not start or represent a value.</exception>
            <exception cref="T:System.Text.Json.JsonException">A value could not be read from the reader.</exception>
            <returns>A JsonDocument representing the value (and nested values) read from the reader.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
            <summary>Attempts to parse one JSON value (including objects or arrays) from the provided reader.</summary>
            <param name="reader">The reader to read.</param>
            <param name="document">When the method returns, contains the parsed document.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> contains unsupported options.

-or-

The current <paramref name="reader" /> token does not start or represent a value.</exception>
            <exception cref="T:System.Text.Json.JsonException">A value could not be read from the reader.</exception>
            <returns>
                <see langword="true" /> if a value was read and parsed into a JsonDocument; <see langword="false" /> if the reader ran out of data while parsing. All other situations result in an exception being thrown.</returns>
        </member>
        <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>Writes the document to the provided writer as a JSON value.</summary>
            <param name="writer">The writer to which to write the document.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Text.Json.JsonElement.ValueKind" /> of this <see cref="P:System.Text.Json.JsonDocument.RootElement" /> would result in invalid JSON.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
        </member>
        <member name="P:System.Text.Json.JsonDocument.RootElement">
            <summary>Gets the root element of this JSON document.</summary>
            <returns>A <see cref="T:System.Text.Json.JsonElement" /> representing the value of the document.</returns>
        </member>
        <member name="T:System.Text.Json.JsonDocumentOptions">
            <summary>Provides the ability for the user to define custom behavior when parsing JSON to create a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
            <summary>Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.</summary>
            <returns>
                <see langword="true" /> if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, <see langword="false" />. Default is <see langword="false" /></returns>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
            <summary>Gets or sets a value that determines how the <see cref="T:System.Text.Json.JsonDocument" /> handles comments when reading through the JSON data.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling" /> enum range).</exception>
            <returns>One of the enumeration values that indicates how comments are handled.</returns>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
            <summary>Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The max depth is set to a negative value.</exception>
            <returns>The maximum depth allowed when parsing JSON data.</returns>
        </member>
        <member name="T:System.Text.Json.JsonElement">
            <summary>Represents a specific JSON value within a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.Clone">
            <summary>Gets a JsonElement that can be safely stored beyond the lifetime of the original <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <returns>A JsonElement that can be safely stored beyond the lifetime of the original <see cref="T:System.Text.Json.JsonDocument" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateArray">
            <summary>Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>An enumerator to enumerate the values in the JSON array represented by this JsonElement.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateObject">
            <summary>Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>An enumerator to enumerate the properties in the JSON object represented by this JsonElement.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetArrayLength">
            <summary>Gets the number of values contained within the current array value.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The number of values contained within the current array value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetBoolean">
            <summary>Gets the value of the element as a <see cref="T:System.Boolean" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is neither <see cref="F:System.Text.Json.JsonValueKind.True" /> nor <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The value of the element as a <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetByte">
            <summary>Gets the current JSON number as a <see cref="T:System.Byte" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.Byte" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as a <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
            <summary>Gets the value of the element as a byte array.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.FormatException">The value is not encoded as Base64 text and hence cannot be decoded to bytes.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The value decoded as a byte array.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTime">
            <summary>Gets the value of the element as a <see cref="T:System.DateTime" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be read as a <see cref="T:System.DateTime" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The value of the element as a <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
            <summary>Gets the value of the element as a <see cref="T:System.DateTimeOffset" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be read as a <see cref="T:System.DateTimeOffset" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The value of the element as a <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDecimal">
            <summary>Gets the current JSON number as a <see cref="T:System.Decimal" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.Decimal" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as a <see cref="T:System.Decimal" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDouble">
            <summary>Gets the current JSON number as a <see cref="T:System.Double" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.Double" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as a <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetGuid">
            <summary>Gets the value of the element as a <see cref="T:System.Guid" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.Guid" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The value of the element as a <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt16">
            <summary>Gets the current JSON number as an <see cref="T:System.Int16" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as an <see cref="T:System.Int16" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as an <see cref="T:System.Int16" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt32">
            <summary>Gets the current JSON number as an <see cref="T:System.Int32" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as an <see cref="T:System.Int32" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as an <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt64">
            <summary>Gets the current JSON number as an <see cref="T:System.Int64" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.Int64" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as an <see cref="T:System.Int64" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
            <summary>Gets a <see cref="T:System.Text.Json.JsonElement" /> representing the value of a required property identified by <paramref name="utf8PropertyName" />.</summary>
            <param name="utf8PropertyName">The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No property was found with the requested name.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonElement" /> representing the value of the requested property.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
            <summary>Gets a <see cref="T:System.Text.Json.JsonElement" /> representing the value of a required property identified by <paramref name="propertyName" />.</summary>
            <param name="propertyName">The name of the property whose value is to be returned.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No property was found with the requested name.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonElement" /> representing the value of the requested property.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
            <summary>Gets a <see cref="T:System.Text.Json.JsonElement" /> representing the value of a required property identified by <paramref name="propertyName" />.</summary>
            <param name="propertyName">The name of the property whose value is to be returned.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No property was found with the requested name.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonElement" /> representing the value of the requested property.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetRawText">
            <summary>Gets a string that represents the original input data backing this value.</summary>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The original input data backing this value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetSByte">
            <summary>Gets the current JSON number as an <see cref="T:System.SByte" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as an <see cref="T:System.SByte" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as an <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetSingle">
            <summary>Gets the current JSON number as a <see cref="T:System.Single" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.Single" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as a <see cref="T:System.Single" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetString">
            <summary>Gets the value of the element as a <see cref="T:System.String" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is neither <see cref="F:System.Text.Json.JsonValueKind.String" /> nor <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The value of the element as a <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt16">
            <summary>Gets the current JSON number as a <see cref="T:System.UInt16" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.UInt16" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as a <see cref="T:System.UInt16" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt32">
            <summary>Gets the current JSON number as a <see cref="T:System.UInt32" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.UInt32" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as a <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt64">
            <summary>Gets the current JSON number as a <see cref="T:System.UInt64" />.</summary>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.FormatException">The value cannot be represented as a <see cref="T:System.UInt64" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The current JSON number as a <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>Parses one JSON value (including objects or arrays) from the provided reader.</summary>
            <param name="reader">The reader to read.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> is using unsupported options.</exception>
            <exception cref="T:System.ArgumentException">The current <paramref name="reader" /> token does not start or represent a value.</exception>
            <exception cref="T:System.Text.Json.JsonException">A value could not be read from the reader.</exception>
            <returns>A JsonElement representing the value (and nested values) read from the reader.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ToString">
            <summary>Gets a string representation for the current value appropriate to the value type.</summary>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>A string representation for the current value appropriate to the value type.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.Byte" />.</summary>
            <param name="value">When the method returns, contains the byte equivalent of the current JSON number if the conversion succeeded.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.Byte" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
            <summary>Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.</summary>
            <param name="value">If the method succeeds, contains the decoded binary representation of the Base64 text.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
            <summary>Attempts to represent the current JSON string as a <see cref="T:System.DateTime" />.</summary>
            <param name="value">When this method returns, contains the date and time value equivalent to the current JSON string.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the string can be represented as a <see cref="T:System.DateTime" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>Attempts to represent the current JSON string as a <see cref="T:System.DateTimeOffset" />.</summary>
            <param name="value">When this method returns, contains the date and time equivalent to the current JSON string.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the string can be represented as a <see cref="T:System.DateTimeOffset" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.Decimal" />.</summary>
            <param name="value">When this method returns, contains the decimal equivalent of the current JSON number.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.Decimal" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.Double" />.</summary>
            <param name="value">When this method returns, contains a double-precision floating point value equivalent to the current JSON number.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.Double" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
            <summary>Attempts to represent the current JSON string as a <see cref="T:System.Guid" />.</summary>
            <param name="value">When this method returns, contains the GUID equivalent to the current JSON string.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the string can be represented as a <see cref="T:System.Guid" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
            <summary>Attempts to represent the current JSON number as an <see cref="T:System.Int16" />.</summary>
            <param name="value">When the method returns, contains the 16-bit integer equivalent of the current JSON number if the conversion succeeded.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as an <see cref="T:System.Int16" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
            <summary>Attempts to represent the current JSON number as an <see cref="T:System.Int32" />.</summary>
            <param name="value">When this method returns, contains the 32-bit integer value equivalent to the current JSON number.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as an <see cref="T:System.Int32" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.Int64" />.</summary>
            <param name="value">When this method returns, contains the 64-bit integer value equivalent to the current JSON number.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.Int64" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
            <summary>Looks for a property named <paramref name="utf8PropertyName" /> in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the <paramref name="value" /> argument.</summary>
            <param name="utf8PropertyName">The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.</param>
            <param name="value">Receives the value of the located property.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the property was found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
            <summary>Looks for a property named <paramref name="propertyName" /> in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the <paramref name="value" /> argument.</summary>
            <param name="propertyName">The name of the property to find.</param>
            <param name="value">When this method returns, contains the value of the specified property.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the property was found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
            <summary>Looks for a property named <paramref name="propertyName" /> in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the <paramref name="value" /> argument.</summary>
            <param name="propertyName">The name of the property to find.</param>
            <param name="value">When this method returns, contains the value of the specified property.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the property was found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
            <summary>Attempts to represent the current JSON number as an <see cref="T:System.SByte" />.</summary>
            <param name="value">When the method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as an <see cref="T:System.SByte" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.Single" />.</summary>
            <param name="value">When this method returns, contains the single-precision floating point value equivalent to the current JSON number.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.Single" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.UInt16" />.</summary>
            <param name="value">When the method returns, contains the unsigned 16-bit integer equivalent of the current JSON number if the conversion succeeded.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.UInt16" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.UInt32" />.</summary>
            <param name="value">When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.UInt32" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
            <summary>Attempts to represent the current JSON number as a <see cref="T:System.UInt64" />.</summary>
            <param name="value">When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>
                <see langword="true" /> if the number can be represented as a <see cref="T:System.UInt64" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Nullable{System.Text.Json.JsonElement}@)">
            <summary>Attempts to parse one JSON value (including objects or arrays) from the provided reader.</summary>
            <param name="reader">The reader to read.</param>
            <param name="element">Receives the parsed element.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> is using unsupported options.</exception>
            <exception cref="T:System.ArgumentException">The current <paramref name="reader" /> token does not start or represent a value.</exception>
            <exception cref="T:System.Text.Json.JsonException">A value could not be read from the reader.</exception>
            <returns>
                <see langword="true" /> if a value was read and parsed into a JsonElement; <see langword="false" /> if the reader ran out of data while parsing.
               All other situations result in an exception being thrown.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
            <summary>Compares the text represented by a UTF8-encoded byte span to the string value of this element.</summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <returns>
                <see langword="true" /> if the string value of this element has the same UTF-8 encoding as
              <paramref name="utf8Text" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
            <summary>Compares a specified read-only character span to the string value of this element.</summary>
            <param name="text">The text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <returns>
                <see langword="true" /> if the string value of this element matches <paramref name="text" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
            <summary>Compares a specified string to the string value of this element.</summary>
            <param name="text">The text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
            <returns>
                <see langword="true" /> if the string value of this element matches <paramref name="text" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>Writes the element to the specified writer as a JSON value.</summary>
            <param name="writer">The writer to which to write the element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Text.Json.JsonElement.ValueKind" /> of this value is <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
        </member>
        <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
            <summary>Gets the value at the specified index if the current value is an <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
            <param name="index">The item index.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="P:System.Text.Json.JsonElement.ValueKind" /> is not <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="index" /> is not in the range [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="P:System.Text.Json.JsonElement.ValueKind">
            <summary>Gets the type of the current JSON value.</summary>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
            <returns>The type of the current JSON value.</returns>
        </member>
        <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
            <summary>Represents an enumerator for the contents of a JSON array.</summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
            <summary>Releases the resources used by this <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> instance.</summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An enumerator that can be used to iterate through the array.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>
                <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An enumerator for an array of <see cref="T:System.Text.Json.JsonElement" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
            <summary>Represents an enumerator for the properties of a JSON object.</summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
            <summary>Releases the resources used by this <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> instance.</summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
            <summary>Returns an enumerator that iterates the properties of an object.</summary>
            <returns>An enumerator that can be used to iterate through the object.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>
                <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An enumerator for <see cref="T:System.Text.Json.JsonProperty" /> objects that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:System.Text.Json.JsonEncodedText">
            <summary>Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.</summary>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>Encodes a UTF-8 text value as a JSON string.</summary>
            <param name="utf8Value">The UTF-8 encoded text to convert to JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="utf8Value" /> is too large.

-or-

<paramref name="utf8Value" /> contains invalid UTF-8 bytes.</exception>
            <returns>The encoded JSON text.</returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>Encodes a specified text value as a JSON string.</summary>
            <param name="value">The value to convert to JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> is too large.

-or-

<paramref name="value" /> contains invalid UTF-16 characters.</exception>
            <returns>The encoded JSON text.</returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>Encodes the string text value as a JSON string.</summary>
            <param name="value">The value to convert to JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="value" /> is too large.

-or-

<paramref name="value" /> contains invalid UTF-16 characters.</exception>
            <returns>The encoded JSON text.</returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
            <summary>Determines whether this instance and a specified object, which must also be a <see cref="T:System.Text.Json.JsonEncodedText" /> instance, have the same value.</summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>
                <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
            <summary>Determines whether this instance and another specified <see cref="T:System.Text.Json.JsonEncodedText" /> instance have the same value.</summary>
            <param name="other">The object to compare to this instance.</param>
            <returns>
                <see langword="true" /> if this instance and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
            <summary>Returns the hash code for this <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.ToString">
            <summary>Converts the value of this instance to a <see cref="T:System.String" />.</summary>
            <returns>The underlying UTF-16 encoded string.</returns>
        </member>
        <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
            <summary>Gets the UTF-8 encoded representation of the pre-encoded JSON text.</summary>
            <returns>The UTF-8 encoded representation of the pre-encoded JSON text.</returns>
        </member>
        <member name="T:System.Text.Json.JsonException">
            <summary>Defines a custom exception object that is thrown when invalid JSON text is encountered, when the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.</summary>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.JsonException" /> class.</summary>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new exception object with serialized data.</summary>
            <param name="info">The serialized object data about the exception being thrown.</param>
            <param name="context">An object that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.JsonException" /> class with a specified error message.</summary>
            <param name="message">The context-specific error message.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.JsonException" /> class, with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The context-specific error message.</param>
            <param name="innerException">The exception that caused the current exception.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>Creates a new exception object to relay error information to the user.</summary>
            <param name="message">The context-specific error message.</param>
            <param name="path">The path where the invalid JSON was encountered.</param>
            <param name="lineNumber">The line number (starting at 0) at which the invalid JSON was encountered when deserializing.</param>
            <param name="bytePositionInLine">The byte count within the current line (starting at 0) where the invalid JSON was encountered.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
            <summary>Creates a new exception object to relay error information to the user that includes a specified inner exception.</summary>
            <param name="message">The context-specific error message.</param>
            <param name="path">The path where the invalid JSON was encountered.</param>
            <param name="lineNumber">The line number (starting at 0) at which the invalid JSON was encountered when deserializing.</param>
            <param name="bytePositionInLine">The byte count (starting at 0) within the current line where the invalid JSON was encountered.</param>
            <param name="innerException">The exception that caused the current exception.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
            <param name="info">The serialized object data about the exception being thrown.</param>
            <param name="context">An object that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Text.Json.JsonException.BytePositionInLine">
            <summary>Gets the zero-based number of bytes read within the current line before the exception.</summary>
            <returns>The zero-based number of bytes read within the current line before the exception.</returns>
        </member>
        <member name="P:System.Text.Json.JsonException.LineNumber">
            <summary>Gets the zero-based number of lines read before the exception.</summary>
            <returns>The zero-based number of lines read before the exception.</returns>
        </member>
        <member name="P:System.Text.Json.JsonException.Message">
            <summary>Gets a message that describes the current exception.</summary>
            <returns>The error message that describes the current exception.</returns>
        </member>
        <member name="P:System.Text.Json.JsonException.Path">
            <summary>Gets The path within the JSON where the exception was encountered.</summary>
            <returns>The path within the JSON where the exception was encountered.</returns>
        </member>
        <member name="T:System.Text.Json.JsonNamingPolicy">
            <summary>Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.</summary>
        </member>
        <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
        </member>
        <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
            <summary>When overridden in a derived class, converts the specified name according to the policy.</summary>
            <param name="name">The name to convert.</param>
            <returns>The converted name.</returns>
        </member>
        <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
            <summary>Gets the naming policy for camel-casing.</summary>
            <returns>The naming policy for camel-casing.</returns>
        </member>
        <member name="T:System.Text.Json.JsonProperty">
            <summary>Represents a single property for a JSON object.</summary>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
            <summary>Compares the specified UTF-8 encoded text to the name of this property.</summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="T:System.Type" /> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
            <returns>
                <see langword="true" /> if the name of this property has the same UTF-8 encoding as <paramref name="utf8Text" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
            <summary>Compares the specified text as a character span to the name of this property.</summary>
            <param name="text">The text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="T:System.Type" /> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
            <returns>
                <see langword="true" /> if the name of this property matches <paramref name="text" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
            <summary>Compares the specified string to the name of this property.</summary>
            <param name="text">The text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">This value's <see cref="T:System.Type" /> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
            <returns>
                <see langword="true" /> if the name of this property matches <paramref name="text" />; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.JsonProperty.ToString">
            <summary>Provides a string representation of the property for debugging purposes.</summary>
            <returns>A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>Writes the property to the provided writer as a named JSON object property.</summary>
            <param name="writer">The writer to which to write the property.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="writer" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:System.Text.Json.JsonProperty.Name" /> is too large to be a JSON object property.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Text.Json.JsonElement.ValueKind" /> of this JSON property's <see cref="P:System.Text.Json.JsonProperty.Value" /> would result in invalid JSON.</exception>
            <exception cref="T:System.ObjectDisposedException">The parent <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Name">
            <summary>Gets the name of this property.</summary>
            <returns>The name of this property.</returns>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Value">
            <summary>Gets the value of this property.</summary>
            <returns>The value of this property.</returns>
        </member>
        <member name="T:System.Text.Json.JsonReaderOptions">
            <summary>Provides the ability for the user to define custom behavior when reading JSON.</summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
            <summary>Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.</summary>
            <returns>
                <see langword="true" /> if an extra comma is allowed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
            <summary>Gets or sets a value that determines how the <see cref="T:System.Text.Json.Utf8JsonReader" /> handles comments when reading through the JSON data.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is not a member of the <see cref="T:System.Text.Json.JsonCommentHandling" /> enumeration.</exception>
            <returns>One of the enumeration values that indicates how comments are handled.</returns>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
            <summary>Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The maximum depth is being set to a negative value.</exception>
            <returns>The maximum depth allowed when reading JSON.</returns>
        </member>
        <member name="T:System.Text.Json.JsonReaderState">
            <summary>Defines an opaque type that holds and saves all the relevant state information, which must be provided to the <see cref="T:System.Text.Json.Utf8JsonReader" /> to continue reading after processing incomplete data.</summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
            <summary>Constructs a new <see cref="T:System.Text.Json.JsonReaderState" /> instance.</summary>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <exception cref="T:System.ArgumentException">The maximum depth is set to a non-positive value (&lt; 0).</exception>
        </member>
        <member name="P:System.Text.Json.JsonReaderState.Options">
            <summary>Gets the custom behavior to use when reading JSON data using the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct that may deviate from strict adherence to the JSON specification, which is the default behavior.</summary>
            <returns>The custom behavior to use when reading JSON data.</returns>
        </member>
        <member name="T:System.Text.Json.JsonSerializer">
            <summary>Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType" />.
            The Stream will be read to completion.</summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.IO.Stream,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Reads the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType" />.
            The Stream will be read to completion.</summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" />, <paramref name="returnType" />, or <paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method on the provided <paramref name="context" /> did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> for <paramref name="returnType" />.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</summary>
            <param name="utf8Json">The JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="returnType" /> is not compatible with the JSON.

-or-

There is remaining data in the span beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Parses the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method on the provided <paramref name="context" /> did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> for <paramref name="returnType" />.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Char},System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Parses the text representing a single JSON value into an instance of a specified type.</summary>
            <param name="json">The JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<paramref name="returnType" /> is not compatible with the JSON.

-or-

There is remaining data in the span beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Char},System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Parses the text representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.

-or-

<paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<paramref name="returnType" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Parses the text representing a single JSON value into an instance of a specified type.</summary>
            <param name="json">The JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Parses the text representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.

-or-

<paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<paramref name="returnType" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonDocument,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the <see cref="T:System.Text.Json.JsonDocument" /> representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="document">The <see cref="T:System.Text.Json.JsonDocument" /> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="document" /> or <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="returnType" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonDocument,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the <see cref="T:System.Text.Json.JsonDocument" /> representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="document">The <see cref="T:System.Text.Json.JsonDocument" /> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="document" /> is <see langword="null" />.

-or-

<paramref name="returnType" /> is <see langword="null" />.

-or-

<paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<paramref name="returnType" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonElement,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the <see cref="T:System.Text.Json.JsonElement" /> representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement" /> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="returnType" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonElement,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the <see cref="T:System.Text.Json.JsonElement" /> representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement" /> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> is <see langword="null" />.

-or-

<paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<paramref name="returnType" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the <see cref="T:System.Text.Json.Nodes.JsonNode" /> representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="returnType" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the <see cref="T:System.Text.Json.Nodes.JsonNode" /> representing a single JSON value into a <paramref name="returnType" />.</summary>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> is <see langword="null" />.

-or-

<paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<paramref name="returnType" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</summary>
            <param name="reader">The reader to read the JSON from.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the serializer behavior during reading.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="returnType" /> is not compatible with the JSON.

-or-

A value could not be read from the reader.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> is using unsupported options.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Reads one JSON value (including objects or arrays) from the provided reader into a <paramref name="returnType" />.</summary>
            <param name="reader">The reader to read.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="returnType" /> or <paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or a value could not be read from the reader.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> is using unsupported options.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method on the provided <paramref name="context" /> did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> for <paramref name="returnType" />.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue" />.
            The Stream will be read to completion.</summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, <typeparamref name="TValue" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.IO.Stream,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Reads the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue" />.
            The Stream will be read to completion.</summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> or <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, <typeparamref name="TValue" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
            <summary>Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</summary>
            <param name="utf8Json">The JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <typeparam name="TValue">The target type of the UTF-8 encoded text.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the span beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Parses the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, <typeparamref name="TValue" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Char},System.Text.Json.JsonSerializerOptions)">
            <summary>Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</summary>
            <param name="json">The JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the span beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Char},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Parses the text representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="json">JSON text to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> is <see langword="null" />.

-or-

<paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</summary>
            <param name="json">The JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <typeparam name="TValue">The target type of the JSON value.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Parses the text representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="json">JSON text to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> is <see langword="null" />.

-or-

<paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the string beyond a single JSON value.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonDocument,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the <see cref="T:System.Text.Json.JsonDocument" /> representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="document">The <see cref="T:System.Text.Json.JsonDocument" /> to convert.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="document" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <typeparamref name="TValue" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonDocument,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the <see cref="T:System.Text.Json.JsonDocument" /> representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="document">The <see cref="T:System.Text.Json.JsonDocument" /> to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="document" /> is <see langword="null" />.

-or-

<paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <typeparamref name="TValue" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonElement,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the <see cref="T:System.Text.Json.JsonElement" /> representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement" /> to convert.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">
                <typeparamref name="TValue" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonElement,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the <see cref="T:System.Text.Json.JsonElement" /> representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement" /> to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <typeparamref name="TValue" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Nodes.JsonNode,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the <see cref="T:System.Text.Json.Nodes.JsonNode" /> representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to convert.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">
                <typeparamref name="TValue" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Nodes.JsonNode,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the <see cref="T:System.Text.Json.Nodes.JsonNode" /> representing a single JSON value into a <typeparamref name="TValue" />.</summary>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <typeparamref name="TValue" /> is not compatible with the JSON.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</summary>
            <param name="reader">The reader to read the JSON from.</param>
            <param name="options">Options to control serializer behavior during reading.</param>
            <typeparam name="TValue">The target type of the JSON value.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

A value could not be read from the reader.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> uses unsupported options.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Reads one JSON value (including objects or arrays) from the provided reader into a <typeparamref name="TValue" />.</summary>
            <param name="reader">The reader to read.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, <typeparamref name="TValue" /> is not compatible with the JSON, or a value could not be read from the reader.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> is using unsupported options.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.</summary>
            <param name="utf8Json">The JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">A cancellation token that may be used to cancel the read operation.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)">
            <summary>Reads the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType" />.
            The Stream will be read to completion.</summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the read operation.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" />, <paramref name="returnType" />, or <paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method on the provided <paramref name="context" /> did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> for <paramref name="returnType" />.</exception>
            <returns>A <paramref name="returnType" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.</summary>
            <param name="utf8Json">The JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">A token that may be used to cancel the read operation.</param>
            <typeparam name="TValue">The target type of the JSON value.</typeparam>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid.

-or-

<typeparamref name="TValue" /> is not compatible with the JSON.

-or-

There is remaining data in the stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" />is <see langword="null" />.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)">
            <summary>Reads the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue" />.
            The Stream will be read to completion.</summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> which may be used to cancel the read operation.</param>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> or <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">The JSON is invalid, <typeparamref name="TValue" /> is not compatible with the JSON, or there is remaining data in the Stream.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <typeparamref name="TValue" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsyncEnumerable``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>Wraps the UTF-8 encoded text into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that can be used to deserialize root-level JSON arrays in a streaming manner.</summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> which may be used to cancel the read operation.</param>
            <typeparam name="TValue">The element type to deserialize asynchronously.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> representation of the provided JSON array.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream" />.</summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream" /> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> or <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" />  or its serializable members.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.IO.Stream,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream" />.</summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream" /> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" />, <paramref name="inputType" />, or <paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" />  or its serializable members.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the value of a specified type into a JSON string.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <returns>The JSON string representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the provided value into a <see cref="T:System.String" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> or <paramref name="context" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.String" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes the JSON representation of the specified type to the provided writer.</summary>
            <param name="writer">The JSON writer to write to.</param>
            <param name="value">The value to convert and write.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control serialization behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" /></exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="writer" /> or <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Writes one JSON value (including objects or arrays) to the provided writer.</summary>
            <param name="writer">A JSON writer to write to.</param>
            <param name="value">The value to convert and write.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="writer" /> or <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the value of a type specified by a generic type parameter into a JSON string.</summary>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control serialization behavior.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A JSON string representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the provided value into a <see cref="T:System.String" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.String" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream" />.</summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream" /> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.IO.Stream,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream" />.</summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream" /> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</summary>
            <param name="writer">A JSON writer to write to.</param>
            <param name="value">The value to convert and write.</param>
            <param name="options">Options to control serialization behavior.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="writer" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Writes one JSON value (including objects or arrays) to the provided writer.</summary>
            <param name="writer">The writer to write.</param>
            <param name="value">The value to convert and write.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="writer" /> or <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</summary>
            <param name="utf8Json">The UTF-8 stream to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control serialization behavior.</param>
            <param name="cancellationToken">A token that may be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> or <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)">
            <summary>Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream" />.</summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream" /> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" />, <paramref name="inputType" />, or <paramref name="context" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" />  or its serializable members.</exception>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</summary>
            <param name="utf8Json">The UTF-8 stream to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control serialization behavior.</param>
            <param name="cancellationToken">A token that may be used to cancel the write operation.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)">
            <summary>Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream" />.</summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream" /> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the write operation.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" />  or its serializable members.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> or <paramref name="context" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" />  or its serializable members.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> or <paramref name="context" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.Text.Json.JsonDocument" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" />  or its serializable members.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> or <paramref name="context" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</exception>
            <returns>A JSON string representation of the value, encoded as UTF-8 bytes.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>Converts the provided value into a <see cref="T:System.Byte" /> array.</summary>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value" /> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputType" /> is not compatible with <paramref name="value" />.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" />  or its serializable members.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)" /> method of the provided <paramref name="context" /> returns <see langword="null" /> for the type to convert.</exception>
            <returns>A UTF-8 representation of the value.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</summary>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <returns>A JSON string representation of the value, encoded as UTF-8 bytes.</returns>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Converts the provided value into a <see cref="T:System.Byte" /> array.</summary>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="jsonTypeInfo" /> is <see langword="null" />.</exception>
            <returns>A UTF-8 representation of the value.</returns>
        </member>
        <member name="T:System.Text.Json.JsonSerializerDefaults">
            <summary>Specifies scenario-based default serialization options that can be used to construct a <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance.</summary>
        </member>
        <member name="F:System.Text.Json.JsonSerializerDefaults.General">
            <summary>
                <para>General-purpose option values. These are the same settings that are applied if a <see cref="T:System.Text.Json.JsonSerializerDefaults" /> member isn't specified.</para>
                <para>For information about the default property values that are applied, see JsonSerializerOptions properties.</para>
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
            <summary>
                <para>Option values appropriate to Web-based scenarios.</para>
                <para>This member implies that:</para>
                <para>- Property names are treated as case-insensitive.</para>
                <para>- "camelCase" name formatting should be employed.</para>
                <para>- Quoted numbers (JSON strings for number properties) are allowed.</para>
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptions">
            <summary>Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.JsonSerializerOptions" /> class.</summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
            <summary>Constructs a new <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance with a predefined set of options determined by the specified <see cref="T:System.Text.Json.JsonSerializerDefaults" />.</summary>
            <param name="defaults">The <see cref="T:System.Text.Json.JsonSerializerDefaults" /> to reason about.</param>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>Copies the options from a <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance to a new instance.</summary>
            <param name="options">The options instance to copy options from.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="options" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.AddContext``1">
            <summary>Binds current <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance with a new instance of the specified <see cref="T:System.Text.Json.Serialization.JsonSerializerContext" /> type.</summary>
            <typeparam name="TContext">The generic definition of the specified context type.</typeparam>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
            <summary>Returns the converter for the specified type.</summary>
            <param name="typeToConvert">The type to return a converter for.</param>
            <exception cref="T:System.InvalidOperationException">The configured <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="typeToConvert" /> returned an invalid converter.</exception>
            <exception cref="T:System.NotSupportedException">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="typeToConvert" /> or its serializable members.</exception>
            <returns>The first converter that supports the given type, or <see langword="null" /> if there is no converter.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
            <summary>Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.</summary>
            <exception cref="T:System.InvalidOperationException">This property was set after serialization or deserialization has occurred.</exception>
            <returns>
                <see langword="true" /> if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); <see langword="false" /> otherwise.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
            <summary>Gets the list of user-defined converters that were registered.</summary>
            <returns>The list of custom converters.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
            <summary>Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.</summary>
            <exception cref="T:System.ArgumentException">The buffer size is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">This property was set after serialization or deserialization has occurred.</exception>
            <returns>The default buffer size in bytes.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
            <summary>Specifies a condition to determine when properties with default values are ignored during serialization or deserialization.
 The default value is <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</summary>
            <exception cref="T:System.ArgumentException">This property is set to <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" />.</exception>
            <exception cref="T:System.InvalidOperationException">This property is set after serialization or deserialization has occurred.

-or-

<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> has been set to <see langword="true" />. These properties cannot be used together.</exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
            <summary>Gets or sets the policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format, such as camel-casing.</summary>
            <returns>The policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
            <summary>Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</summary>
            <returns>The JavaScript character encoding.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
            <summary>Gets or sets a value that determines whether <see langword="null" /> values are ignored during serialization and deserialization. The default value is <see langword="false" />.</summary>
            <exception cref="T:System.InvalidOperationException">This property was set after serialization or deserialization has occurred.

-or-

<see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> has been set to a non-default value. These properties cannot be used together.</exception>
            <returns>
                <see langword="true" /> to ignore null values during serialization and deserialization; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
            <summary>Determines whether read-only fields are ignored during serialization. A field is read-only if it is marked with the <see langword="readonly" /> keyword. The default value is <see langword="false" />.</summary>
            <exception cref="T:System.InvalidOperationException">This property is set after serialization or deserialization has occurred.</exception>
            <returns>
                <see langword="true" /> if read-only fields should be ignored during serialization; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
            <summary>Gets a value that determines whether read-only properties are ignored during serialization. The default value is <see langword="false" />.</summary>
            <exception cref="T:System.InvalidOperationException">This property was set after serialization or deserialization has occurred.</exception>
            <returns>
                <see langword="true" /> to ignore read-only properties during serialization; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
            <summary>Determines whether fields are handled during serialization and deserialization.
            The default value is <see langword="false" />.</summary>
            <exception cref="T:System.InvalidOperationException">This property is set after serialization or deserialization has occurred.</exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
            <summary>Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.</summary>
            <exception cref="T:System.InvalidOperationException">This property was set after serialization or deserialization has occurred.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The max depth is set to a negative value.</exception>
            <returns>The maximum depth allowed when serializing or deserializing JSON.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
            <summary>Specifies how number types should be handled when serializing or deserializing.</summary>
            <exception cref="T:System.InvalidOperationException">This property is set after serialization or deserialization has occurred.</exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
            <summary>Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization. The default value is <see langword="false" />.</summary>
            <returns>
                <see langword="true" /> to compare property names using case-insensitive comparison; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
            <summary>Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or <see langword="null" /> to leave property names unchanged.</summary>
            <returns>A property naming policy, or <see langword="null" /> to leave property names unchanged.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
            <summary>Gets or sets a value that defines how comments are handled during deserialization.</summary>
            <exception cref="T:System.InvalidOperationException">This property was set after serialization or deserialization has occurred.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling" /> enum range).</exception>
            <returns>A value that indicates whether comments are allowed, disallowed, or skipped.</returns>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
            <summary>Configures how object references are handled when reading and writing JSON.</summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.UnknownTypeHandling">
            <summary>Defines how deserializing a type declared as an <see cref="T:System.Object" /> is handled during deserialization.</summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
            <summary>Gets or sets a value that defines whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.</summary>
            <exception cref="T:System.InvalidOperationException">This property was set after serialization or deserialization has occurred.</exception>
            <returns>
                <see langword="true" /> if JSON should pretty print on serialization; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="T:System.Text.Json.JsonTokenType">
            <summary>Defines the various JSON tokens that make up a JSON text.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Comment">
            <summary>The token type is a comment string.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.EndArray">
            <summary>The token type is the end of a JSON array.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.EndObject">
            <summary>The token type is the end of a JSON object.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.False">
            <summary>The token type is the JSON literal false.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.None">
            <summary>There is no value (as distinct from <see cref="F:System.Text.Json.JsonTokenType.Null" />). This is the default token type if no data has been read by the <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Null">
            <summary>The token type is the JSON literal null.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Number">
            <summary>The token type is a JSON number.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.PropertyName">
            <summary>The token type is a JSON property name.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.StartArray">
            <summary>The token type is the start of a JSON array.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.StartObject">
            <summary>The token type is the start of a JSON object.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.String">
            <summary>The token type is a JSON string.</summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.True">
            <summary>The token type is the JSON literal true.</summary>
        </member>
        <member name="T:System.Text.Json.JsonValueKind">
            <summary>Specifies the data type of a JSON value.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Array">
            <summary>A JSON array.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.False">
            <summary>The JSON value false.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Null">
            <summary>The JSON value null.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Number">
            <summary>A JSON number.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Object">
            <summary>A JSON object.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.String">
            <summary>A JSON string.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.True">
            <summary>The JSON value true.</summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Undefined">
            <summary>There is no value (as distinct from <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
        </member>
        <member name="T:System.Text.Json.JsonWriterOptions">
            <summary>Allows the user to define custom behavior when writing JSON using the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
            <summary>Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</summary>
            <returns>The JavaScript character encoder used to override the escaping behavior.</returns>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.Indented">
            <summary>Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.</summary>
            <returns>
                <see langword="true" /> to format the JSON output; <see langword="false" /> to write without any extra white space. The default is <see langword="false" />.</returns>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
            <summary>Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should skip structural validation and allow the user to write invalid JSON.</summary>
            <returns>
                <see langword="true" /> to skip structural validation and allow invalid JSON; <see langword="false" /> to throw an <see cref="T:System.InvalidOperationException" /> on any attempt to write invalid JSON.</returns>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonArray">
            <summary>Represents a mutable JSON array.</summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.#ctor(System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray" /> class that is empty.</summary>
            <param name="options">Options to control the behavior.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.#ctor(System.Text.Json.Nodes.JsonNode[])">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray" /> class that contains items from the specified array.</summary>
            <param name="items">The items to add to the new <see cref="T:System.Text.Json.Nodes.JsonArray" />.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.#ctor(System.Text.Json.Nodes.JsonNodeOptions,System.Text.Json.Nodes.JsonNode[])">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray" /> class that contains items from the specified params array.</summary>
            <param name="options">Options to control the behavior.</param>
            <param name="items">The items to add to the new <see cref="T:System.Text.Json.Nodes.JsonArray" />.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Add(System.Text.Json.Nodes.JsonNode)">
            <summary>Adds a <see cref="T:System.Text.Json.Nodes.JsonNode" /> to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <param name="item">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to be added to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Add``1(``0)">
            <summary>Adds an object to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <param name="value">The object to be added to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</param>
            <typeparam name="T">The type of object to be added.</typeparam>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Clear">
            <summary>Removes all elements from the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Contains(System.Text.Json.Nodes.JsonNode)">
            <summary>Determines whether an element is in the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Text.Json.Nodes.JsonArray" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray" /> class that contains items from the specified <see cref="T:System.Text.Json.JsonElement" />.</summary>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement" />.</param>
            <param name="options">Options to control the behavior.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="element" /> is not a <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray" /> class that contains items from the specified <see cref="T:System.Text.Json.JsonElement" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Text.Json.Nodes.JsonNode" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.IndexOf(System.Text.Json.Nodes.JsonNode)">
            <summary>The object to locate in the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <param name="item">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to locate in the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Insert(System.Int32,System.Text.Json.Nodes.JsonNode)">
            <summary>Inserts an element into the <see cref="T:System.Text.Json.Nodes.JsonArray" /> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than 0 or <paramref name="index" /> is greater than <see cref="P:System.Text.Json.Nodes.JsonArray.Count" />.</exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Remove(System.Text.Json.Nodes.JsonNode)">
            <summary>Removes the first occurrence of a specific <see cref="T:System.Text.Json.Nodes.JsonNode" /> from the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <param name="item">The <see cref="T:System.Text.Json.Nodes.JsonNode" /> to remove from the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</param>
            <returns>
                <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.RemoveAt(System.Int32)">
            <summary>Removes the element at the specified index of the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than 0 or <paramref name="index" /> is greater than <see cref="P:System.Text.Json.Nodes.JsonArray.Count" />.</exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.System#Collections#Generic#ICollection{System#Text#Json#Nodes#JsonNode}#CopyTo(System.Text.Json.Nodes.JsonNode[],System.Int32)">
            <summary>Copies the entire <see cref="T:System.Array" /> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Text.Json.Nodes.JsonArray" />. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source ICollection is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
            <returns>A <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes the <see cref="T:System.Text.Json.Nodes.JsonNode" /> into the provided <see cref="T:System.Text.Json.Utf8JsonWriter" /> as JSON.</summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" />.</param>
            <param name="options">Options to control the serialization behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonArray.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonArray.System#Collections#Generic#ICollection{System#Text#Json#Nodes#JsonNode}#IsReadOnly">
            <summary>Returns <see langword="false" />.</summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonNode">
            <summary>The base class that represents a single node within a mutable JSON document.</summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.AsArray">
            <summary>Casts to the derived <see cref="T:System.Text.Json.Nodes.JsonArray" /> type.</summary>
            <exception cref="T:System.InvalidOperationException">The node is not a <see cref="T:System.Text.Json.Nodes.JsonArray" />.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonArray" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.AsObject">
            <summary>Casts to the derived <see cref="T:System.Text.Json.Nodes.JsonObject" /> type.</summary>
            <exception cref="T:System.InvalidOperationException">The node is not a <see cref="T:System.Text.Json.Nodes.JsonObject" />.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonObject" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.AsValue">
            <summary>Casts to the derived <see cref="T:System.Text.Json.Nodes.JsonValue" /> type.</summary>
            <exception cref="T:System.InvalidOperationException">The node is not a <see cref="T:System.Text.Json.Nodes.JsonValue" />.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonValue" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.GetPath">
            <summary>Gets the JSON path.</summary>
            <returns>The JSON Path value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.GetValue``1">
            <summary>Gets the value for the current <see cref="T:System.Text.Json.Nodes.JsonValue" />.</summary>
            <typeparam name="T">The type of the value to obtain from the <see cref="T:System.Text.Json.Nodes.JsonValue" />.</typeparam>
            <exception cref="T:System.FormatException">The current <see cref="T:System.Text.Json.Nodes.JsonNode" /> cannot be represented as a {TValue}.</exception>
            <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Text.Json.Nodes.JsonNode" /> is not a <see cref="T:System.Text.Json.Nodes.JsonValue" /> or is not compatible with {TValue}.</exception>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Boolean">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Boolean" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Boolean" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Byte">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Byte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Byte" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Char">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Char" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Char" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.DateTime">
            <summary>Defines an explicit conversion of a given <see cref="T:System.DateTime" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTime" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.DateTimeOffset">
            <summary>Defines an explicit conversion of a given <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTimeOffset" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Decimal">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Decimal" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Decimal" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Double">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Double" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Double" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Guid">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Guid" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Guid" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Int16">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Int16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int16" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Int32">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Int32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int32" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Int64">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Int64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int64" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Boolean}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Boolean" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Boolean" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Byte}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Byte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Byte" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Char}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Char" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Char" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.DateTime}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.DateTime" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTime" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.DateTimeOffset}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTimeOffset" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Decimal}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Decimal" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Decimal" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Double}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Double" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Double" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Guid}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Guid" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Guid" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Int16}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Int16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int16" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Int32}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Int32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int32" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Int64}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Int64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int64" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.SByte}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.SByte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.SByte" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Single}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Single" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Single" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.UInt16}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.UInt16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt16" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.UInt32}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.UInt32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt32" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.UInt64}">
            <summary>Defines an explicit conversion of a given <see cref="T:System.UInt64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt64" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.SByte">
            <summary>Defines an explicit conversion of a given <see cref="T:System.SByte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.SByte" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Single">
            <summary>Defines an explicit conversion of a given <see cref="T:System.Single" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Single" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.String">
            <summary>Defines an explicit conversion of a given <see cref="T:System.String" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.String" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.UInt16">
            <summary>Defines an explicit conversion of a given <see cref="T:System.UInt16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt16" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.UInt32">
            <summary>Defines an explicit conversion of a given <see cref="T:System.UInt32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt32" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.UInt64">
            <summary>Defines an explicit conversion of a given <see cref="T:System.UInt64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt64" /> to implicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Boolean)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Boolean" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Boolean" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Byte)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Byte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Byte" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Char)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Char" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Char" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.DateTime)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.DateTime" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTime" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.DateTimeOffset)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTimeOffset" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Decimal)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Decimal" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Decimal" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Double)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Double" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Double" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Guid)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Guid" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Guid" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int16)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Int16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int16" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int32)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Int32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int32" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int64)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Int64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int64" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Boolean})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Boolean" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Boolean" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Byte})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Byte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Byte" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Char})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Char" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Char" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.DateTime})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.DateTime" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTime" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.DateTimeOffset" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Decimal})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Decimal" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Decimal" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Double})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Double" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Double" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Guid})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Guid" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Guid" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int16})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Int16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int16" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int32})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Int32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int32" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int64})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Int64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Int64" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.SByte})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.SByte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.SByte" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Single})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Single" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Single" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt16})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.UInt16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt16" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt32})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.UInt32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt32" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt64})~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.UInt64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt64" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.SByte)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.SByte" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.SByte" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Single)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.Single" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.Single" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.String)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.String" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.String" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt16)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.UInt16" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt16" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt32)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.UInt32" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt32" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt64)~System.Text.Json.Nodes.JsonNode">
            <summary>Defines an implicit conversion of a given <see cref="T:System.UInt64" /> to a <see cref="T:System.Text.Json.Nodes.JsonNode" />.</summary>
            <param name="value">A <see cref="T:System.UInt64" /> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> instance converted from the <paramref name="value" /> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.IO.Stream,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>Parse a <see cref="T:System.IO.Stream" /> as UTF-8-encoded data representing a single JSON value into a <see cref="T:System.Text.Json.Nodes.JsonNode" />.  The Stream will be read to completion.</summary>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="nodeOptions">Options to control the node behavior after parsing.</param>
            <param name="documentOptions">Options to control the document behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="utf8Json" /> does not represent a valid single JSON value.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.ReadOnlySpan{System.Byte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>Parses text representing a single JSON value.</summary>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="nodeOptions">Options to control the node behavior after parsing.</param>
            <param name="documentOptions">Options to control the document behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="utf8Json" /> does not represent a valid single JSON value.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>Parses text representing a single JSON value.</summary>
            <param name="json">JSON text to parse.</param>
            <param name="nodeOptions">Options to control the node behavior after parsing.</param>
            <param name="documentOptions">Options to control the document behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="json" /> does not represent a valid single JSON value.</exception>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode" /> representation of the JSON value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.Text.Json.Utf8JsonReader@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Parses one JSON value (including objects or arrays) from the provided reader.</summary>
            <param name="reader">The reader to read.</param>
            <param name="nodeOptions">Options to control the behavior.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="reader" /> is using unsupported options.</exception>
            <exception cref="T:System.ArgumentException">The current <paramref name="reader" /> token does not start or represent a value.</exception>
            <exception cref="T:System.Text.Json.JsonException">A value could not be read from the reader.</exception>
            <returns>The <see cref="T:System.Text.Json.Nodes.JsonNode" /> from the reader.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.ToJsonString(System.Text.Json.JsonSerializerOptions)">
            <summary>Converts the current instance to string in JSON format.</summary>
            <param name="options">Options to control the serialization behavior.</param>
            <returns>JSON representation of current instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.ToString">
            <summary>Gets a string representation for the current value appropriate to the node type.</summary>
            <returns>A string representation for the current value appropriate to the node type.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)">
            <summary>Write the <see cref="T:System.Text.Json.Nodes.JsonNode" /> into the provided <see cref="T:System.Text.Json.Utf8JsonWriter" /> as JSON.</summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" />.</param>
            <param name="options">Options to control the serialization behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than 0 or <paramref name="index" /> is greater than the number of properties.</exception>
            <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Text.Json.Nodes.JsonNode" /> is not a <see cref="T:System.Text.Json.Nodes.JsonArray" />.</exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Item(System.String)">
            <summary>Gets or sets the element with the specified property name.
              If the property is not found, <see langword="null" /> is returned.</summary>
            <param name="propertyName">The name of the property to return.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Text.Json.Nodes.JsonNode" /> is not a <see cref="T:System.Text.Json.Nodes.JsonObject" />.</exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Options">
            <summary>Options to control the behavior.</summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Parent">
            <summary>Gets the parent <see cref="T:System.Text.Json.Nodes.JsonNode" />.
              If there is no parent, <see langword="null" /> is returned.
              A parent can either be a <see cref="T:System.Text.Json.Nodes.JsonObject" /> or a <see cref="T:System.Text.Json.Nodes.JsonArray" />.</summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Root">
            <summary>Gets the root <see cref="T:System.Text.Json.Nodes.JsonNode" />.
              If the current <see cref="T:System.Text.Json.Nodes.JsonNode" /> is a root, <see langword="null" /> is returned.</summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonNodeOptions">
            <summary>Options to control <see cref="T:System.Text.Json.Nodes.JsonNode" /> behavior.</summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNodeOptions.PropertyNameCaseInsensitive">
            <summary>Specifies whether property names on <see cref="T:System.Text.Json.Nodes.JsonObject" /> are case insensitive.</summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonObject">
            <summary>Represents a mutable JSON object.</summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode}},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that contains the specified <paramref name="properties" />.</summary>
            <param name="properties">The properties to be added.</param>
            <param name="options">Options to control the behavior.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.#ctor(System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that is empty.</summary>
            <param name="options">Options to control the behavior.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})">
            <summary>Adds the specified property to the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
            <param name="property">The KeyValuePair structure representing the property name and value to add to the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
            <exception cref="T:System.ArgumentException">An element with the same property name already exists in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</exception>
            <exception cref="T:System.ArgumentNullException">The property name of <paramref name="property" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Add(System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>Adds an element with the provided property name and value to the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
            <param name="propertyName">The property name of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" />is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">An element with the same property name already exists in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Clear">
            <summary>Removes all elements from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.ContainsKey(System.String)">
            <summary>Determines whether the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the specified property name.</summary>
            <param name="propertyName">The property name to locate in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" /> is <see langword="null" />.</exception>
            <returns>
                <see langword="true" /> if the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the specified property name; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that contains properties from the specified <see cref="T:System.Text.Json.JsonElement" />.</summary>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement" />.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that contains properties from the specified <see cref="T:System.Text.Json.JsonElement" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
            <returns>An enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Remove(System.String)">
            <summary>Removes the element with the specified property name from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
            <param name="propertyName">The property name of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" /> is <see langword="null" />.</exception>
            <returns>
                <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Text#Json#Nodes#JsonNode}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})">
            <summary>Determines whether the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains a specific property name and <see cref="T:System.Text.Json.Nodes.JsonNode" /> reference.</summary>
            <param name="item">The element to locate in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
            <returns>
                <see langword="true" /> if the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the property name; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Text#Json#Nodes#JsonNode}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode}[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> to an array of type KeyValuePair starting at the specified array index.</summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source ICollection is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Text#Json#Nodes#JsonNode}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})">
            <summary>Removes a key and value from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
            <param name="item">The KeyValuePair structure representing the property name and value to remove from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
            <returns>
                <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary{System#String@System#Text#Json#Nodes#JsonNode}#TryGetValue(System.String,System.Text.Json.Nodes.JsonNode@)">
            <summary>Gets the value associated with the specified property name.</summary>
            <param name="propertyName">The property name of the value to get.</param>
            <param name="jsonNode">When this method returns, contains the value associated with the specified property name, if the property name is found; otherwise, <see langword="null" />.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" /> is <see langword="null" />.</exception>
            <returns>
                <see langword="true" /> if the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the specified property name; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
            <returns>An enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.TryGetPropertyValue(System.String,System.Text.Json.Nodes.JsonNode@)">
            <summary>Returns the value of a property with the specified name.</summary>
            <param name="propertyName">The name of the property to return.</param>
            <param name="jsonNode">The JSON value of the property with the specified name.</param>
            <returns>
                <see langword="true" /> if a property with the specified name was found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)">
            <summary>Write the <see cref="T:System.Text.Json.Nodes.JsonNode" /> into the provided <see cref="T:System.Text.Json.Utf8JsonWriter" /> as JSON.</summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" />.</param>
            <param name="options">Options to control the serialization behavior.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.Count">
            <summary>Gets the number of elements contained in <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Text#Json#Nodes#JsonNode}}#IsReadOnly">
            <summary>Returns <see langword="false" />.</summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary{System#String@System#Text#Json#Nodes#JsonNode}#Keys">
            <summary>Gets a collection containing the property names in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary{System#String@System#Text#Json#Nodes#JsonNode}#Values">
            <summary>Gets a collection containing the property values in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonValue">
            <summary>Represents a mutable JSON value.</summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Boolean,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Byte,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Char,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.DateTime,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.DateTimeOffset,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Decimal,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Double,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Guid,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Int16,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Int32,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Int64,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Boolean},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Byte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Char},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.DateTime},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.DateTimeOffset},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Decimal},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Double},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Guid},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int16},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int32},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int64},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.SByte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Single},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Text.Json.JsonElement},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt16},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt32},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt64},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.SByte,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Single,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.UInt16,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.UInt32,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.UInt64,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue" /> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create``1(``0,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The value to create.</param>
            <param name="options">Options to control the behavior.</param>
            <typeparam name="T">The type of value to create.</typeparam>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</summary>
            <param name="value">The value to create.</param>
            <param name="jsonTypeInfo">The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> that will be used to serialize the value.</param>
            <param name="options">Options to control the behavior.</param>
            <typeparam name="T">The type of value to create.</typeparam>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue" /> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.TryGetValue``1(``0@)">
            <summary>Tries to obtain the current JSON value and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <typeparam name="T">The type of value to obtain.</typeparam>
            <returns>
                <see langword="true" /> if the value can be successfully obtained; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnDeserialized">
            <summary>Specifies that the JSON type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnDeserialized.OnDeserialized" /> method called after deserialization occurs.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnDeserialized.OnDeserialized">
            <summary>The method that is called after deserialization.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnDeserializing">
            <summary>Specifies that the type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnDeserializing.OnDeserializing" /> method called before deserialization occurs.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnDeserializing.OnDeserializing">
            <summary>The method that is called before deserialization.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnSerialized">
            <summary>Specifies that the type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnSerialized.OnSerialized" /> method called after serialization occurs.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnSerialized.OnSerialized">
            <summary>The method that is called after serialization.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnSerializing">
            <summary>Specifies that the type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnSerializing.OnSerializing" /> method called before serialization occurs.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnSerializing.OnSerializing">
            <summary>The method that is called before serialization.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonAttribute">
            <summary>Provides the base class for serialization attributes.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
            <summary>Creates a new instance of the <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
            <summary>When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" />.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverter">
            <summary>Converts an object or value to or from JSON.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
            <summary>When overridden in a derived class, determines whether the converter instance can convert the specified object type.</summary>
            <param name="typeToConvert">The type of the object to check whether it can be converted by this converter instance.</param>
            <returns>
                <see langword="true" /> if the instance can convert the specified object type; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverter`1">
            <summary>Converts an object or value to or from JSON.</summary>
            <typeparam name="T">The type of object or value handled by the converter.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
            <summary>Initializes a new <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
            <summary>Determines whether the specified type can be converted.</summary>
            <param name="typeToConvert">The type to compare against.</param>
            <returns>
                <see langword="true" /> if the type can be converted; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <typeparamref name="T" />.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.ReadAsPropertyName(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads a dictionary key from a JSON property name.</summary>
            <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader" /> to read from.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The options to use when reading the value.</param>
            <returns>The value that was converted.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.WriteAsPropertyName(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a dictionary key as a JSON property name.</summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" /> to write to.</param>
            <param name="value">The value to convert. The value of <see cref="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull" /> determines if the converter handles <see langword="null" /> values.</param>
            <param name="options">The options to use when writing the value.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
            <summary>Indicates whether <see langword="null" /> should be passed to the converter on serialization, and whether <see cref="F:System.Text.Json.JsonTokenType.Null" /> should be passed on deserialization.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
            <summary>When placed on a property or type, specifies the converter type to use.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> with the specified converter type.</summary>
            <param name="converterType">The type of the converter.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
            <summary>When overridden in a derived class and <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> is <see langword="null" />, allows the derived class to create a <see cref="T:System.Text.Json.Serialization.JsonConverter" /> in order to pass additional state.</summary>
            <param name="typeToConvert">The type of the converter.</param>
            <returns>The custom converter.</returns>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
            <summary>Gets the type of the <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, or <see langword="null" /> if it was created without a type.</summary>
            <returns>The type of the <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, or <see langword="null" /> if it was created without a type.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
            <summary>Supports converting several types by using a factory pattern.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
            <summary>When overidden in a derived class, initializes a new instance of the <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> class.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Creates a converter for a specified type.</summary>
            <param name="typeToConvert">The type handled by the converter.</param>
            <param name="options">The serialization options to use.</param>
            <returns>A converter for which <typeparamref name="T" /> is compatible with <paramref name="typeToConvert" />.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
            <summary>When placed on a property of type <see cref="T:System.Collections.Generic.IDictionary`2" />, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
            <summary>Instantiates a new instance of the <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> class.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
            <summary>Prevents a property from being serialized or deserialized.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
            <summary>Specifies the condition that must be met before a property will be ignored.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
            <summary>Controls how the <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> ignores properties on serialization and deserialization.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
            <summary>Property will always be ignored.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
            <summary>Property will always be serialized and deserialized, regardless of <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> configuration.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
            <summary>Property will only be ignored if it is <see langword="null" />.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
            <summary>If the value is <see langword="null" />, the property is ignored during serialization. This is applied only to reference-type properties and fields.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
            <summary>Indicates that the member should be included for serialization and deserialization.</summary>
            <exception cref="T:System.InvalidOperationException">The attribute is applied to a non-public property.</exception>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" />.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonKnownNamingPolicy">
            <summary>The <see cref="T:System.Text.Json.JsonNamingPolicy" /> to be used at run time.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonKnownNamingPolicy.CamelCase">
            <summary>Specifies that the built-in <see cref="P:System.Text.Json.JsonNamingPolicy.CamelCase" /> be used to convert JSON property names.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonKnownNamingPolicy.Unspecified">
            <summary>Specifies that JSON property names should not be converted.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
            <summary>Determines how <see cref="T:System.Text.Json.JsonSerializer" /> handles numbers when serializing and deserializing.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
            <summary>The "NaN", "Infinity", and "-Infinity" <see cref="F:System.Text.Json.JsonTokenType.String" /> tokens can be read as floating-point constants, and the <see cref="T:System.Single" /> and <see cref="T:System.Double" /> values for these constants will be written as their corresponding JSON string representations.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
            <summary>Numbers can be read from <see cref="F:System.Text.Json.JsonTokenType.String" /> tokens. Does not prevent numbers from being read from <see cref="F:System.Text.Json.JsonTokenType.Number" /> token.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
            <summary>Numbers will only be read from <see cref="F:System.Text.Json.JsonTokenType.Number" /> tokens and will only be written as JSON numbers (without quotes).</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
            <summary>Numbers will be written as JSON strings (with quotes), not as JSON numbers.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
            <summary>When placed on a type, property, or field, indicates what <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> settings should be used when serializing or deserializing numbers.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" />.</summary>
            <param name="handling">A bitwise combination of the enumeration values that specify how number types should be handled when serializing or deserializing.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
            <summary>Indicates what settings should be used when serializing or deserializing numbers.</summary>
            <returns>An object that determines the number serialization and deserialization settings.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
            <summary>Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> with the specified property name.</summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
            <summary>Gets the name of the property.</summary>
            <returns>The name of the property.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyOrderAttribute">
            <summary>Specifies the property order that is present in the JSON when serializing. Lower values are serialized first.
            If the attribute is not specified, the default value is 0.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonPropertyOrderAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> with the specified order.</summary>
            <param name="order">The order of the property.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPropertyOrderAttribute.Order">
            <summary>Gets the serialization order of the property.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSerializableAttribute">
            <summary>Instructs the System.Text.Json source generator to generate source code to help optimize performance when serializing and deserializing instances of the specified type and types in its object graph.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializableAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute" /> with the specified type.</summary>
            <param name="type">The type to generate source code for.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializableAttribute.GenerationMode">
            <summary>Determines what the source generator should generate for the type. If the value is <see cref="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Default" />, then the setting specified on <see cref="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode" /> will be used.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializableAttribute.TypeInfoPropertyName">
            <summary>The name of the property for the generated <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1" /> for the type on the generated, derived <see cref="T:System.Text.Json.Serialization.JsonSerializerContext" /> type.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSerializerContext">
            <summary>Provides metadata about a set of types that is relevant to JSON serialization.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions,System.Text.Json.JsonSerializerOptions)">
            <summary>Creates an instance of <see cref="T:System.Text.Json.Serialization.JsonSerializerContext" /> and binds it with the indicated <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
            <param name="instanceOptions">The run-time provided options for the context instance.</param>
            <param name="defaultOptions">The default run-time options for the context. Its values are defined at design time via <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" />.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the given type.</summary>
            <param name="type">The type to fetch metadata about.</param>
            <returns>The metadata for the specified type, or <see langword="null" /> if the context has no metadata for the type.</returns>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerContext.Options">
            <summary>Gets the run-time specified options of the context. If no options were passed when instanciating the context, then a new instance is bound and returned.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSourceGenerationMode">
            <summary>The generation mode for the System.Text.Json source generator.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Default">
            <summary>When specified on <see cref="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode" />, indicates that both type-metadata initialization logic and optimized serialization logic should be generated for all types. When specified on <see cref="P:System.Text.Json.Serialization.JsonSerializableAttribute.GenerationMode" />, indicates that the setting on <see cref="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode" /> should be used.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Metadata">
            <summary>Instructs the JSON source generator to generate type-metadata initialization logic.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Serialization">
            <summary>Instructs the JSON source generator to generate optimized serialization logic.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute">
            <summary>Instructs the System.Text.Json source generator to assume the specified options will be used at run time via <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.#ctor">
            <summary>Instructs the System.Text.Json source generator to assume the specified options will be used at run time via <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.DefaultIgnoreCondition">
            <summary>Gets or sets the default ignore condition.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode">
            <summary>Gets or sets the source generation mode for types that don't explicitly set the mode with <see cref="P:System.Text.Json.Serialization.JsonSerializableAttribute.GenerationMode" />.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.IgnoreReadOnlyFields">
            <summary>Gets or sets a value that indicates whether to ignore read-only fields.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.IgnoreReadOnlyProperties">
            <summary>Gets or sets a value that indicates whether to ignore read-only properties.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.IgnoreRuntimeCustomConverters">
            <summary>Gets or sets a value that indicates whether to ignore custom converters provided at run time.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.IncludeFields">
            <summary>Gets or sets a value that indicates whether to include fields for serialization and deserialization.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.PropertyNamingPolicy">
            <summary>Gets or sets a built-in naming policy to convert JSON property names with.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.WriteIndented">
            <summary>Gets or sets a value that indicates whether JSON output should be pretty-printed.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
            <summary>Converts enumeration values to and from strings.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
            <summary>Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with the default naming policy that allows integer values.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
            <summary>Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.</summary>
            <param name="namingPolicy">The optional naming policy for writing enum values.</param>
            <param name="allowIntegerValues">
                <see langword="true" /> to allow undefined enum values; otherwise, <see langword="false" />. When <see langword="true" />, if an enum value isn't defined, it will output as a number rather than a string.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
            <summary>Determines whether the specified type can be converted to an enum.</summary>
            <param name="typeToConvert">The type to be checked.</param>
            <returns>
                <see langword="true" /> if the type can be converted; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Creates a converter for the specified type.</summary>
            <param name="typeToConvert">The type handled by the converter.</param>
            <param name="options">The serialization options to use.</param>
            <returns>A converter for which <typeparamref name="T" /> is compatible with <paramref name="typeToConvert" />.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonUnknownTypeHandling">
            <summary>Defines how deserializing a type declared as an <see cref="T:System.Object" /> is handled during deserialization.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonElement">
            <summary>A type declared as <see cref="T:System.Object" /> is deserialized as a <see cref="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonElement" />.</summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonNode">
            <summary>A type declared as <see cref="T:System.Object" /> is deserialized as a <see cref="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonNode" />.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonMetadataServices">
            <summary>Provides helpers to create and initialize metadata for JSON-serializable types.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateArrayInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0[]})">
            <summary>Creates metadata for an array.</summary>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions" /> to use.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateConcurrentQueueInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateConcurrentStackInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="keyInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the key type.</param>
            <param name="valueInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the value type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateICollectionInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIDictionaryInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.IDictionary" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="stringInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing <see cref="T:System.String" /> instances.</param>
            <param name="objectInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing <see cref="T:System.Object" /> instances.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="keyInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the key type.</param>
            <param name="valueInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the value type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIEnumerableInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.IList" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIEnumerableInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIListInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.IList" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="objectInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIListInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.IList`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateImmutableDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0},System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``1,``2}},``0})">
            <summary>Creates metadata for <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> and types assignable to <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="keyInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the key type.</param>
            <param name="valueInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the value type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <param name="createRangeFunc">A method to create an immutable dictionary instance.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateImmutableEnumerableInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0},System.Func{System.Collections.Generic.IEnumerable{``1},``0})">
            <summary>Creates metadata for non-dictionary immutable collection types.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <param name="createRangeFunc">A method to create an immutable dictionary instance.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIReadOnlyDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="keyInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the key type.</param>
            <param name="valueInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the value type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateISetInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.ISet`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateListInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.List`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonObjectInfoValues{``0})">
            <summary>Creates metadata for a complex class or struct.</summary>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions" /> to initialize the metadata with.</param>
            <param name="objectInfo">Provides serialization metadata about an object type with constructors, properties, and fields.</param>
            <typeparam name="T">The type of the class or struct.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="options" /> or <paramref name="objectInfo" /> is <see langword="null" />.</exception>
            <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1" /> instance representing the class or struct.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo``1(System.Text.Json.JsonSerializerOptions,System.Boolean,System.Boolean,System.Boolean,System.Type,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonConverter{``0},System.Func{System.Object,``0},System.Action{System.Object,``0},System.Nullable{System.Text.Json.Serialization.JsonIgnoreCondition},System.Boolean,System.Nullable{System.Text.Json.Serialization.JsonNumberHandling},System.String,System.String)">
            <summary>Creates metadata for a property or field.</summary>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions" /> to initialize the metadata with.</param>
            <param name="isProperty">Whether the CLR member is a property or field.</param>
            <param name="isPublic">Whether the CLR member is public.</param>
            <param name="isVirtual">Whether the CLR member is a virtual property.</param>
            <param name="declaringType">The declaring type of the property or field.</param>
            <param name="propertyTypeInfo">The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> info for the property or field's type.</param>
            <param name="converter">A <see cref="T:System.Text.Json.Serialization.JsonConverter" /> for the property or field, specified by <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</param>
            <param name="getter">Provides a mechanism to get the property or field's value.</param>
            <param name="setter">Provides a mechanism to set the property or field's value.</param>
            <param name="ignoreCondition">Specifies a condition for the property to be ignored.</param>
            <param name="hasJsonInclude">Whether the property was annotated with <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" />.</param>
            <param name="numberHandling">If the property or field is a number, specifies how it should processed when serializing and deserializing.</param>
            <param name="propertyName">The CLR name of the property or field.</param>
            <param name="jsonPropertyName">The name to be used when processing the property or field, specified by <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" />.</param>
            <typeparam name="T">The type that the converter for the property returns or accepts when converting JSON data.</typeparam>
            <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo" /> instance intialized with the provided metadata.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateQueueInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateStackInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateStackOrQueueInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0},System.Action{``0,System.Object})">
            <summary>Creates metadata for types assignable to <see cref="T:System.Collections.IList" />.</summary>
            <param name="options" />
            <param name="createObjectFunc">A <see cref="T:System.Func`1" /> to create an instance of the list when deserializing.</param>
            <param name="elementInfo">A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance representing the element type.</param>
            <param name="numberHandling">The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> option to apply to number collection elements.</param>
            <param name="serializeFunc">An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> defaults.</param>
            <param name="addFunc">A method for adding elements to the collection when using the serializer's code-paths.</param>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateValueInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.JsonConverter)">
            <summary>Creates metadata for a primitive or a type with a custom converter.</summary>
            <param name="options" />
            <param name="converter" />
            <typeparam name="T">The generic type definition.</typeparam>
            <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1" /> instance representing the type.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GetEnumConverter``1(System.Text.Json.JsonSerializerOptions)">
            <summary>Creates a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <typeparamref name="T" /> values.</summary>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions" /> to use for serialization and deserialization.</param>
            <typeparam name="T">The generic definition for the enum type.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GetNullableConverter``1(System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>Creates a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <typeparamref name="T??" /> values.</summary>
            <param name="underlyingTypeInfo">Serialization metadata for the underlying nullable type.</param>
            <typeparam name="T">The generic definition for the underlying nullable type.</typeparam>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.BooleanConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Boolean" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.ByteArrayConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts byte array values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.ByteConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Byte" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CharConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Char" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DateTimeConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.DateTime" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DateTimeOffsetConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.DateTimeOffset" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DecimalConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Decimal" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DoubleConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Double" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GuidConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Guid" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.Int16Converter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Int16" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.Int32Converter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Int32" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.Int64Converter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Int64" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.JsonElementConverter">
            <summary>Gets a JSON converter that converts <see cref="T:System.Text.Json.JsonElement" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.ObjectConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Object" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.SByteConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.SByte" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.SingleConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Single" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.StringConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.String" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.TimeSpanConverter">
            <summary>Gets a JSON converter that converts <see cref="T:System.TimeSpan" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UInt16Converter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.UInt16" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UInt32Converter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.UInt32" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UInt64Converter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.UInt64" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UriConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Uri" /> values.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.VersionConverter">
            <summary>Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance that converts <see cref="T:System.Version" /> values.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1">
            <summary>Provides serialization metadata about an object type with constructors, properties, and fields.</summary>
            <typeparam name="T">The object type to serialize or deserialize.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.#ctor" />
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.ConstructorParameterMetadataInitializer">
            <summary>Provides a mechanism to initialize metadata for a parameterized constructor of the class or struct to be used when deserializing.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.NumberHandling">
            <summary>Gets or sets an object that specifies how number properties and fields should be processed when serializing and deserializing.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.ObjectCreator">
            <summary>Gets or sets a mechanism to create an instance of the class or struct using a parameterless constructor during deserialization.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.ObjectWithParameterizedConstructorCreator">
            <summary>Gets or sets a mechanism to create an instance of the class or struct using a parameterized constructor during deserialization.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.PropertyMetadataInitializer">
            <summary>Gets or sets a mechanism to initialize metadata for properties and fields of the class or struct.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.SerializeHandler">
            <summary>Gets or sets a serialization implementation for instances of the class or struct that assumes options specified by <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" />.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues">
            <summary>Provides information about a constructor parameter required for JSON deserialization.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.#ctor" />
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.DefaultValue">
            <summary>Gets or sets the default value of the parameter.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.HasDefaultValue">
            <summary>Gets or sets a value that specifies whether a default value was specified for the parameter.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.Name">
            <summary>Gets or sets the name of the parameter.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.ParameterType">
            <summary>Gets or sets the type of the parameter.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.Position">
            <summary>Gets or sets the zero-based position of the parameter in the formal parameter list.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo">
            <summary>Provides JSON serialization-related metadata about a property or field.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo">
            <summary>Provides JSON serialization-related metadata about a type.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1">
            <summary>Provides JSON serialization-related metadata about a type.</summary>
            <typeparam name="T">The generic definition of the type.</typeparam>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.Serialize">
            <summary>A method that serializes an instance of <typeparamref name="T" /> using <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute" /> values specified at design time.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceHandler">
            <summary>This class defines how the <see cref="T:System.Text.Json.JsonSerializer" /> deals with references on serialization and deserialization.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Serialization.ReferenceHandler" /> class.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
            <summary>Returns the <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> used for each serialization call.</summary>
            <returns>The resolver to use for serialization and deserialization.</returns>
        </member>
        <member name="P:System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles">
            <summary>Ignores an object when a reference cycle is detected during serialization.</summary>
        </member>
        <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
            <summary>Metadata properties will be honored when deserializing JSON objects and arrays into reference types and written when serializing reference types. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.</summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
            <summary>This class defines how the <see cref="T:System.Text.Json.JsonSerializer" /> deals with references on serialization and deserialization.</summary>
            <typeparam name="T">The type of the <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> to create on each serialization or deserialization call.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" /> generic class that can create a <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> instance of the specified type.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
            <summary>Creates a new <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> of type <typeparamref name="T" /> used for each serialization call.</summary>
            <returns>The new resolver to use for serialization and deserialization.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceResolver">
            <summary>This class defines how the <see cref="T:System.Text.Json.JsonSerializer" /> deals with references on serialization and deserialization.
 Defines the core behavior of preserving references on serialization and deserialization.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> class.</summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
            <summary>Adds an entry to the bag of references using the specified id and value.
 This method gets called when an $id metadata property from a JSON object is read.</summary>
            <param name="referenceId">The identifier of the JSON object or array.</param>
            <param name="value">The value of the CLR reference type object that results from parsing the JSON object.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
            <summary>Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.
 This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.</summary>
            <param name="value">The value of the CLR reference type object to get an id for.</param>
            <param name="alreadyExists">When this method returns, <see langword="true" /> if a reference to value already exists; otherwise, <see langword="false" />.</param>
            <returns>The reference id for the specified object.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
            <summary>Returns the CLR reference type object related to the specified reference id.
 This method gets called when $ref metadata property is read.</summary>
            <param name="referenceId">The reference id related to the returned object.</param>
            <returns>The reference type object related to the specified reference id.</returns>
        </member>
        <member name="T:System.Text.Json.Utf8JsonReader">
            <summary>Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.</summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.</summary>
            <param name="jsonData">The UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">
                <see langword="true" /> to indicate that the input sequence contains the entire data to process; <see langword="false" /> to indicate that the input span contains partial data with more data to follow.</param>
            <param name="state">An object that contains the reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> property from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only sequence of UTF-8 encoded text using the specified options.</summary>
            <param name="jsonData">The UTF-8 encoded JSON text to process.</param>
            <param name="options">Defines customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading). By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.</param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.</summary>
            <param name="jsonData">The UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">
                <see langword="true" /> to indicate that the input sequence contains the entire data to process; <see langword="false" /> to indicate that the input span contains partial data with more data to follow.</param>
            <param name="state">An object that contains the reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> property from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only span of UTF-8 encoded text using the specified options.</summary>
            <param name="jsonData">The UTF-8 encoded JSON text to process.</param>
            <param name="options">Defines customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading). By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.</param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
            <summary>Reads the next JSON token value from the source as a <see cref="T:System.Boolean" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token isn't a boolean value (that is, <see cref="F:System.Text.Json.JsonTokenType.True" /> or <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
            <returns>
                <see langword="true" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
            <summary>Parses the current JSON token value from the source as a <see cref="T:System.Byte" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).
          
-or-

The JSON token value represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
            <returns>The value of the UTF-8 encoded token.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
            <summary>Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.</summary>
            <exception cref="T:System.InvalidOperationException">The type of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <exception cref="T:System.FormatException">The value is not encoded as Base64 text, so it can't be decoded to bytes.

-or-

The value contains invalid or more than two padding characters.

-or-

The value is incomplete. That is, the JSON string length is not a multiple of 4.</exception>
            <returns>The byte array that represents the current JSON token value.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
            <summary>Parses the current JSON token value from the source as a comment, transcoded it as a <see cref="T:System.String" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token is not a comment.</exception>
            <returns>The comment that represents the current JSON token value.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTime" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value cannot be read as a <see cref="T:System.DateTime" />.
        
-or-
        
The entire UTF-8 encoded token value cannot be parsed to a <see cref="T:System.DateTime" /> value.

-or-

The JSON token value is of an unsupported format.</exception>
            <returns>The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTimeOffset" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value cannot be read as a <see cref="T:System.DateTimeOffset" />.

-or-
        
The entire UTF-8 encoded token value cannot be parsed to a <see cref="T:System.DateTimeOffset" /> value.

-or-

The JSON token value is of an unsupported format.</exception>
            <returns>The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to a <see cref="T:System.Decimal" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to a <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.Guid" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value is in an unsupported format for a Guid.
        
-or-

The entire UTF-8 encoded token value cannot be parsed to a <see cref="T:System.Guid" /> value.</exception>
            <returns>The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
            <summary>Parses the current JSON token value from the source as a <see cref="T:System.Int16" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).
          
-or-

The JSON token value represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to an <see cref="T:System.Int16" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
            <summary>Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.
            
-or-

The JSON token value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to an <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
            <summary>Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.
            
-or-

The JSON token value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to an <see cref="T:System.Int64" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
            <summary>Parses the current JSON token value from the source as an <see cref="T:System.SByte" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).
          
-or-

The JSON token value represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to an <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to a <see cref="T:System.Single" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetString">
            <summary>Reads the next JSON token value from the source, unescaped, and transcoded as a string.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a string (that is, not a <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, or <see cref="F:System.Text.Json.JsonTokenType.Null" />).

-or-

The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.</exception>
            <returns>The token value parsed to a string, or <see langword="null" /> if <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
            <summary>Parses the current JSON token value from the source as a <see cref="T:System.UInt16" />.</summary>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).
          
-or-

The JSON token value represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to a <see cref="T:System.UInt16" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.

-or-

The JSON token value represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to a <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
            <summary>Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</summary>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <exception cref="T:System.FormatException">The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.
            
-or-

The JSON token value represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
            <returns>The UTF-8 encoded token value parsed to a <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.Read">
            <summary>Reads the next JSON token from the input source.</summary>
            <exception cref="T:System.Text.Json.JsonException">An invalid JSON token according to the JSON RFC is encountered.
        
-or-

The current depth exceeds the recursive limit set by the maximum depth.</exception>
            <returns>
                <see langword="true" /> if the token was read successfully; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.Skip">
            <summary>Skips the children of the current JSON token.</summary>
            <exception cref="T:System.InvalidOperationException">The reader was given partial data with more data to follow (that is, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> is <see langword="false" />).</exception>
            <exception cref="T:System.Text.Json.JsonException">An invalid JSON token was encountered while skipping, according to the JSON RFC.

-or-

The current depth exceeds the recursive limit set by the maximum depth.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.Byte" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Byte" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
            <summary>Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the decoded binary representation of the Base64 text.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <returns>
                <see langword="true" /> if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.DateTime" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTime" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.DateTimeOffset" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTimeOffset" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.Decimal" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.Double" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.Guid" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Guid" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
            <summary>Tries to parse the current JSON token value from the source as an <see cref="T:System.Int16" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int16" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
            <summary>Tries to parse the current JSON token value from the source as an <see cref="T:System.Int32" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
            <summary>Tries to parse the current JSON token value from the source as an <see cref="T:System.Int64" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int64" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
            <summary>Tries to parse the current JSON token value from the source as an <see cref="T:System.SByte" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.SByte" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.Single" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Single" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt16" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt16" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt32" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
            <summary>Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt64" /> and returns a value that indicates whether the operation succeeded.</summary>
            <param name="value">When this method returns, contains the parsed value.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
            <returns>
                <see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64" /> value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
            <summary>Tries to skip the children of the current JSON token.</summary>
            <exception cref="T:System.Text.Json.JsonException">An invalid JSON token was encountered while skipping, according to the JSON RFC.
          
-or -

The current depth exceeds the recursive limit set by the maximum depth.</exception>
            <returns>
                <see langword="true" /> if there was enough data for the children to be skipped successfully; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
            <summary>Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.</summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token is not a JSON string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
            <returns>
                <see langword="true" /> if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
            <summary>Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.</summary>
            <param name="text">The text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token is not a JSON string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
            <returns>
                <see langword="true" /> if the JSON token value in the source matches the lookup text; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
            <summary>Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.</summary>
            <param name="text">The text to compare against.</param>
            <exception cref="T:System.InvalidOperationException">The JSON token is not a JSON string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
            <returns>
                <see langword="true" /> if the JSON token value in the source matches the lookup text; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
            <summary>Gets the total number of bytes consumed so far by this instance of the <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
            <returns>The total number of bytes consumed so far.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
            <summary>Gets the depth of the current token.</summary>
            <returns>The depth of the current token.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
            <summary>Gets the current <see cref="T:System.Text.Json.Utf8JsonReader" /> state to pass to a <see cref="T:System.Text.Json.Utf8JsonReader" /> constructor with more data.</summary>
            <returns>The current reader state.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
            <summary>Gets a value that indicates which <c>Value</c> property to use to get the token value.</summary>
            <returns>
                <see langword="true" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> should be used to get the token value; <see langword="false" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> should be used instead.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
            <summary>Gets the mode of this instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> which indicates whether all the JSON data was provided or there is more data to come.</summary>
            <returns>
                <see langword="true" /> if the reader was constructed with the input span or sequence containing the entire JSON data to process; <see langword="false" /> if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.Position">
            <summary>Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</summary>
            <returns>The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
            <summary>Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.</summary>
            <returns>The starting index of the last processed JSON token within the given UTF-8 encoded input text.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
            <summary>Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.</summary>
            <returns>The type of the last processed JSON token.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
            <summary>Gets the raw value of the last processed token as a ReadOnlySequence&lt;byte&gt; slice of the input payload, only if the token is contained within multiple segments.</summary>
            <returns>A byte read-only sequence.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
            <summary>Gets the raw value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&lt;byte&gt;.</summary>
            <returns>A read-only span of bytes.</returns>
        </member>
        <member name="T:System.Text.Json.Utf8JsonWriter">
            <summary>Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified <see cref="T:System.Buffers.IBufferWriter`1" /> to write the output to and customization options.</summary>
            <param name="bufferWriter">The destination for writing JSON text.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="bufferWriter" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified stream to write the output to and customization options.</summary>
            <param name="utf8Json">The destination for writing JSON text.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
            <summary>Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
            <summary>Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</summary>
            <returns>A task representing the asynchronous dispose operation.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
            <summary>Commits the JSON text written so far, which makes it visible to the output destination.</summary>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
            <returns>A task representing the asynchronous flush operation.</returns>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
            <summary>Resets the internal state of this instance so that it can be reused.</summary>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
            <summary>Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
            <param name="bufferWriter">The destination for writing JSON text.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="bufferWriter" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
            <summary>Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</summary>
            <param name="utf8Json">The destination for writing JSON text.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="utf8Json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
            <summary>Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
            <summary>Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</summary>
            <param name="bytes">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON literal true or false as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON literal true or false as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON literal true or false as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal true or false) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON literal true or false as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
            <summary>Writes a <see cref="T:System.Boolean" /> value (as a JSON literal true or false) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON literal true or false as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
            <summary>Writes a UTF-8 text value as a JSON comment.</summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON comment within <c>/*..*/</c>.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.
        
-or-

<paramref name="utf8Value" /> contains a comment delimiter (that is, <c>*/</c>).</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
            <summary>Writes a UTF-16 text value as a JSON comment.</summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within <c>/*..*/</c>.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.
        
-or-

<paramref name="value" /> contains a comment delimiter (that is, <c>*/</c>).</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
            <summary>Writes a string text value as a JSON comment.</summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within <c>/*..*/</c>.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.
        
-or-

<paramref name="value" /> contains a comment delimiter (that is, <c>*/</c>).</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
            <summary>Writes the end of a JSON array.</summary>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
            <summary>Writes the end of a JSON object.</summary>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
            <summary>Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
            <summary>Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
            <summary>Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
            <summary>Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
            <summary>Writes the JSON literal null as an element of a JSON array.</summary>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
            <summary>Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
            <summary>Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
            <summary>Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
            <summary>Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
            <summary>Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
            <summary>Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
            <summary>Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
            <summary>Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
            <summary>Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
            <summary>Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
            <summary>Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
            <summary>Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
            <summary>Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
            <summary>Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
            <summary>Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
            <summary>Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="propertyName" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
            <summary>Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>Writes the input as JSON content. It is expected that the input content is a single complete JSON value.</summary>
            <param name="utf8Json">The raw JSON content to write.</param>
            <param name="skipInputValidation">
                <see langword="false" /> to validate if the input is an RFC 8259-compliant JSON payload; <see langword="true" /> otherwise.</param>
            <exception cref="T:System.ArgumentException">The length of the input is zero or equal to <see cref="F:System.Int32.MaxValue" />.</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="skipInputValidation" /> is <see langword="false" />, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>Writes the input as JSON content. It is expected that the input content is a single complete JSON value.</summary>
            <param name="json">The raw JSON content to write.</param>
            <param name="skipInputValidation">
                <see langword="false" /> to validate if the input is an RFC 8259-compliant JSON payload; <see langword="true" /> otherwise.</param>
            <exception cref="T:System.ArgumentException">The length of the input is zero or greater than 715,827,882 (<see cref="F:System.Int32.MaxValue" /> / 3).</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="skipInputValidation" /> is <see langword="false" />, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.String,System.Boolean)">
            <summary>Writes the input as JSON content. It is expected that the input content is a single complete JSON value.</summary>
            <param name="json">The raw JSON content to write.</param>
            <param name="skipInputValidation">
                <see langword="false" /> to validate if the input is an RFC 8259-compliant JSON payload; <see langword="true" /> otherwise.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="json" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The length of the input is zero or greater than 715,827,882 (<see cref="F:System.Int32.MaxValue" /> / 3).</exception>
            <exception cref="T:System.Text.Json.JsonException">
                <paramref name="skipInputValidation" /> is <see langword="false" />, and the input is not a valid, complete, single JSON value according to the JSON RFC, or the input JSON exceeds a recursive depth of 64.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
            <summary>Writes the beginning of a JSON array.</summary>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000.

-or-

Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
            <summary>Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON array to be written.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000.

-or-
       
Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
            <summary>Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000.

-or-
       
Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
            <summary>Writes the beginning of a JSON array with a property name specified as a string as the key.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000.

-or-
       
Validation is enabled, and this write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
            <summary>Writes the beginning of a JSON array with a pre-encoded property name as the key.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON has exceeded the maximum depth of 1,000.
    
-or-

Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
            <summary>Writes the beginning of a JSON object.</summary>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000.

-or-

Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
            <summary>Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000. 

-or-
       
Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
            <summary>Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000. 

-or-
       
Validation is enabled, and this write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
            <summary>Writes the beginning of a JSON object with a property name specified as a string as the key.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON exceeds the maximum depth of 1,000. 

-or-
       
Validation is enabled, and this write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
            <summary>Writes the beginning of a JSON object with a pre-encoded property name as the key.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <exception cref="T:System.InvalidOperationException">The depth of the JSON has exceeded the maximum depth of 1,000.
          
-or-

Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
            <summary>Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
            <summary>Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
            <summary>Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
            <summary>Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
            <summary>Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and this method would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
            <summary>Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
            <summary>Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
            <summary>Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
            <summary>Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
            <summary>Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
            <summary>Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name or value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
            <summary>Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified property name is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is <see langword="null" />.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
            <summary>Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
            <summary>Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
            <summary>Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
            <summary>Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
            <summary>Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</summary>
            <param name="propertyName">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
            <summary>Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON string as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
            <summary>Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON string as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
            <summary>Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</summary>
            <param name="value">The value to be written as a JSON string as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
            <summary>Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
            <summary>Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
            <summary>Writes a string text value (as a JSON string) as an element of a JSON array.</summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</param>
            <exception cref="T:System.ArgumentException">The specified value is too large.</exception>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
            <summary>Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</summary>
            <param name="value">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the write operation would produce invalid JSON.</exception>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
            <summary>Gets the total number of bytes committed to the output by the current instance so far.</summary>
            <returns>The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
            <summary>Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</summary>
            <returns>The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
            <summary>Gets the depth of the current token.</summary>
            <returns>The depth of the current token.</returns>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.Options">
            <summary>Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.</summary>
            <returns>The custom behavior of this instance of the writer for formatting, validating, and escaping.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter`1">
            <typeparam name="TResult" />
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult">
            <returns />
        </member>
        <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter`1.IsCompleted">
            <returns />
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.OnCompleted(System.Action)">
            <param name="continuation" />
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.UnsafeOnCompleted(System.Action)">
            <param name="continuation" />
        </member>
        <member name="T:System.Threading.Tasks.ValueTask`1">
            <summary>Provides a value type that wraps a <see cref="Task{TResult}" /> and a <typeparamref name="TResult">TResult</typeparamref>, only one of which is used.</summary>
            <typeparam name="TResult">The result.</typeparam>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>Initializes a new instance of the <see cref="ValueTask{TResult}" /> class using the supplied task that represents the operation.</summary>
            <param name="task">The task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task">task</paramref> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="ValueTask{TResult}" /> class using the supplied result of a successful operation.</summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.AsTask">
            <summary>Retrieves a <see cref="Task{TResult}" /> object that represents this <see cref="ValueTask{TResult}" />.</summary>
            <returns>The <see cref="Task{TResult}" /> object that is wrapped in this <see cref="ValueTask{TResult}" /> if one exists, or a new <see cref="Task{TResult}" /> object that represents the result.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
            <summary>Configures an awaiter for this value.</summary>
            <param name="continueOnCapturedContext">true to attempt to marshal the continuation back to the captured context; otherwise, false.</param>
            <returns>The configured awaiter.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.CreateAsyncMethodBuilder">
            <summary>Creates a method builder for use with an async method.</summary>
            <returns>The created builder.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
            <summary>Determines whether the specified <see cref="ValueTask{TResult}" /> object is equal to the current <see cref="ValueTask{TResult}" /> object.</summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
            <summary>Creates an awaiter for this value.</summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code for the current object.</returns>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
            <summary>Gets a value that indicates whether this object represents a canceled operation.</summary>
            <returns>true if this object represents a canceled operation; otherwise, false.</returns>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
            <summary>Gets a value that indicates whether this object represents a completed operation.</summary>
            <returns>true if this object represents a completed operation; otherwise, false.</returns>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
            <summary>Gets a value that indicates whether this object represents a successfully completed operation.</summary>
            <returns>true if this object represents a successfully completed operation; otherwise, false.</returns>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
            <summary>Gets a value that indicates whether this object represents a failed operation.</summary>
            <returns>true if this object represents a failed operation; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
            <summary>Compares two values for equality.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the two <see cref="ValueTask{TResult}" /> values are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
            <summary>Determines whether two <see cref="ValueTask{TResult}" /> values are unequal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The seconed value to compare.</param>
            <returns>true if the two <see cref="ValueTask{TResult}" /> values are not equal; otherwise, false.</returns>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.Result">
            <summary>Gets the result.</summary>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute" />
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <param name="builderType" />
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <returns />
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1">
            <typeparam name="TResult" />
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <param name="awaiter" />
            <param name="stateMachine" />
            <typeparam name="TAwaiter" />
            <typeparam name="TStateMachine" />
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <param name="awaiter" />
            <param name="stateMachine" />
            <typeparam name="TAwaiter" />
            <typeparam name="TStateMachine" />
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Create">
            <returns />
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetException(System.Exception)">
            <param name="exception" />
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(`0)">
            <param name="result" />
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <param name="stateMachine" />
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start``1(``0@)">
            <param name="stateMachine" />
            <typeparam name="TStateMachine" />
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Task">
            <returns />
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter">
            <typeparam name="TResult" />
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult">
            <returns />
        </member>
        <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.IsCompleted">
            <returns />
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
            <param name="continuation" />
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <param name="continuation" />
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1">
            <typeparam name="TResult" />
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.GetAwaiter">
            <returns />
        </member>
        <member name="T:ZXing.BarcodeFormat">
            <summary>
            Enumerates barcode formats known to this package.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.BarcodeFormat.AZTEC">
            <summary>Aztec 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODABAR">
            <summary>CODABAR 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODE_39">
            <summary>Code 39 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODE_93">
            <summary>Code 93 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODE_128">
            <summary>Code 128 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.DATA_MATRIX">
            <summary>Data Matrix 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.EAN_8">
            <summary>EAN-8 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.EAN_13">
            <summary>EAN-13 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.ITF">
            <summary>ITF (Interleaved Two of Five) 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.MAXICODE">
            <summary>MaxiCode 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.PDF_417">
            <summary>PDF417 format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.QR_CODE">
            <summary>QR Code 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.RSS_14">
            <summary>RSS 14</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.RSS_EXPANDED">
            <summary>RSS EXPANDED</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.UPC_A">
            <summary>UPC-A 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.UPC_E">
            <summary>UPC-E 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.UPC_EAN_EXTENSION">
            <summary>UPC/EAN extension format. Not a stand-alone format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.MSI">
            <summary>MSI</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.PLESSEY">
            <summary>Plessey</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.IMB">
            <summary>Intelligent Mail barcode</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.PHARMA_CODE">
            <summary>Pharmacode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.All_1D">
            <summary>
            UPC_A | UPC_E | EAN_13 | EAN_8 | CODABAR | CODE_39 | CODE_93 | CODE_128 | ITF | RSS_14 | RSS_EXPANDED
            without MSI (to many false-positives) and IMB (not enough tested, and it looks more like a 2D)
            </summary>
        </member>
        <member name="T:ZXing.DecodeHintType">
            <summary>
            Encapsulates a type of hint that a caller may pass to a barcode reader to help it
            more quickly or accurately decode it. It is up to implementations to decide what,
            if anything, to do with the information that is supplied.
            <seealso cref="M:ZXing.Reader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})" /></summary>
            <author>Sean Owen</author>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="F:ZXing.DecodeHintType.OTHER">
            <summary>
            Unspecified, application-specific hint. Maps to an unspecified <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.PURE_BARCODE">
            <summary>
            Image is a pure monochrome image of a barcode. Doesn't matter what it maps to;
            use <see cref="T:System.Boolean" /> = true.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.POSSIBLE_FORMATS">
            <summary>
            Image is known to be of one of a few possible formats.
            Maps to a <see cref="T:System.Collections.ICollection" /> of <see cref="T:ZXing.BarcodeFormat" />s.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.TRY_HARDER">
            <summary>
            Spend more time to try to find a barcode; optimize for accuracy, not speed.
            Doesn't matter what it maps to; use <see cref="T:System.Boolean" /> = true.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.CHARACTER_SET">
            <summary>
            Specifies what character encoding to use when decoding, where applicable (type String)
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ALLOWED_LENGTHS">
            <summary>
            Allowed lengths of encoded data -- reject anything else. Maps to an int[].
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT">
            <summary>
            Assume Code 39 codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.NEED_RESULT_POINT_CALLBACK">
            <summary>
            The caller needs to be notified via callback when a possible <see cref="T:ZXing.ResultPoint" />
            is found. Maps to a <see cref="T:ZXing.ResultPointCallback" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ASSUME_MSI_CHECK_DIGIT">
            <summary>
            Assume MSI codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.USE_CODE_39_EXTENDED_MODE">
            <summary>
            if Code39 could be detected try to use extended mode for full ASCII character set
            Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.RELAXED_CODE_39_EXTENDED_MODE">
            <summary>
            Don't fail if a Code39 is detected but can't be decoded in extended mode.
            Return the raw Code39 result instead. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.TRY_HARDER_WITHOUT_ROTATION">
            <summary>
            1D readers supporting rotation with TRY_HARDER enabled.
            But BarcodeReader class can do auto-rotating for 1D and 2D codes.
            Enabling that option prevents 1D readers doing double rotation.
            BarcodeReader enables that option automatically if "global" auto-rotation is enabled.
            Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ASSUME_GS1">
            <summary>
            Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed.
            For example this affects FNC1 handling for Code 128 (aka GS1-128). Doesn't matter what it maps to;
            use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.RETURN_CODABAR_START_END">
            <summary>
            If true, return the start and end digits in a Codabar barcode instead of stripping them. They
            are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them
            to not be. Doesn't matter what it maps to; use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ALLOWED_EAN_EXTENSIONS">
            <summary>
            Allowed extension lengths for EAN or UPC barcodes. Other formats will ignore this.
            Maps to an int[] of the allowed extension lengths, for example [2], [5], or [2, 5].
            If it is optional to have an extension, do not set this hint. If this is set,
            and a UPC or EAN barcode is found but an extension is not, then no result will be returned
            at all.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ALSO_INVERTED">
            <summary>
            If true, also tries to decode as inverted image. All configured decoders are simply called a
            second time with an inverted image. Doesn't matter what it maps to; use {@link Boolean#TRUE}.
            </summary>
        </member>
        <member name="T:ZXing.Dimension">
            <summary>
            Simply encapsulates a width and height.
            </summary>
        </member>
        <member name="M:ZXing.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="width" />
            <param name="height" />
        </member>
        <member name="P:ZXing.Dimension.Width">
            <summary>
            the width
            </summary>
        </member>
        <member name="P:ZXing.Dimension.Height">
            <summary>
            the height
            </summary>
        </member>
        <member name="M:ZXing.Dimension.Equals(System.Object)">
            <summary />
            <param name="other" />
            <returns />
        </member>
        <member name="M:ZXing.Dimension.GetHashCode">
            <summary />
            <returns />
        </member>
        <member name="M:ZXing.Dimension.ToString">
            <summary />
            <returns />
        </member>
        <member name="T:ZXing.EncodeHintType">
            <summary>
            These are a set of hints that you may pass to Writers to specify their behavior.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="F:ZXing.EncodeHintType.WIDTH">
            <summary>
            Specifies the width of the barcode image
            type: <see cref="T:System.Int32" /></summary>
        </member>
        <member name="F:ZXing.EncodeHintType.HEIGHT">
            <summary>
            Specifies the height of the barcode image
            type: <see cref="T:System.Int32" /></summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PURE_BARCODE">
            <summary>
            Don't put the content string into the output image.
            type: <see cref="T:System.Boolean" /></summary>
        </member>
        <member name="F:ZXing.EncodeHintType.ERROR_CORRECTION">
            <summary>
            Specifies what degree of error correction to use, for example in QR Codes.
            Type depends on the encoder. For example for QR codes it's type
            <see cref="T:ZXing.QrCode.Internal.ErrorCorrectionLevel" />
            For Aztec it is of type <see cref="T:System.Int32" />, representing the minimal percentage of error correction words. 
            In all cases, it can also be a <see cref="T:System.String" /> representation of the desired value as well.
            Note: an Aztec symbol should have a minimum of 25% EC words.
            For PDF417 it is of type <see cref="T:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel" /> or <see cref="T:System.Int32" /> (between 0 and 8),
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.CHARACTER_SET">
            <summary>
            Specifies what character encoding to use where applicable.
            type: <see cref="T:System.String" /></summary>
        </member>
        <member name="F:ZXing.EncodeHintType.MARGIN">
            <summary>
            Specifies margin, in pixels, to use when generating the barcode. The meaning can vary
            by format; for example it controls margin before and after the barcode horizontally for
            most 1D formats.
            type: <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_ASPECT_RATIO">
            <summary>
            Specifies the aspect ratio to use.  Default is 4.
            type: <see cref="T:ZXing.PDF417.Internal.PDF417AspectRatio" />, or 1-4.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_IMAGE_ASPECT_RATIO">
            <summary>
            Specifies the desired aspect ratio (number of columns / number of rows) of the output image.  Default is 3.
            type: <see cref="T:System.Single" />.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_COMPACT">
            <summary>
            Specifies whether to use compact mode for PDF417
            type: <see cref="T:System.Boolean" />, or "true" or "false"
            <see cref="T:System.String" /> value
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_COMPACTION">
            <summary>
            Specifies what compaction mode to use for PDF417.
            type: <see cref="T:ZXing.PDF417.Internal.Compaction" /> or <see cref="T:System.String" /> value of one of its
            enum values
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_DIMENSIONS">
            <summary>
            Specifies the minimum and maximum number of rows and columns for PDF417.
            type: <see cref="T:ZXing.PDF417.Internal.Dimensions" /></summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_MACRO_META_DATA">
            <summary>
            The Specifies that the PDF417 will contain macro metadata.
            type: <see cref="T:ZXing.PDF417.PDF417MacroMetadata" /></summary>
        </member>
        <member name="F:ZXing.EncodeHintType.DISABLE_ECI">
            <summary>
            Don't append ECI segment.
            That is against the specification of QR Code but some
            readers have problems if the charset is switched from
            ISO-8859-1 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use UTF-8 encoding
            and the ECI segment is omitted.
            type: <see cref="T:System.Boolean" /></summary>
        </member>
        <member name="F:ZXing.EncodeHintType.DATA_MATRIX_SHAPE">
            <summary>
            Specifies the matrix shape for Data Matrix (type <see cref="T:ZXing.Datamatrix.Encoder.SymbolShapeHint" />)
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.MIN_SIZE">
            <summary>
            Specifies a minimum barcode size (type <see cref="T:ZXing.Dimension" />). Only applicable to Data Matrix now.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.MAX_SIZE">
            <summary>
            Specifies a maximum barcode size (type <see cref="T:ZXing.Dimension" />). Only applicable to Data Matrix now.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.CODE128_FORCE_CODESET_B">
            <summary>
            if true, don't switch to codeset C for numbers
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.DATA_MATRIX_DEFAULT_ENCODATION">
            <summary>
            Specifies the default encodation for Data Matrix (type <see cref="T:ZXing.Datamatrix.Encoder.Encodation" />)
            Make sure that the content fits into the encodation value, otherwise there will be an exception thrown.
            standard value: Encodation.ASCII
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.AZTEC_LAYERS">
            <summary>
            Specifies the required number of layers for an Aztec code.
            A negative number (-1, -2, -3, -4) specifies a compact Aztec code
            0 indicates to use the minimum number of layers (the default)
            A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code
            type: <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.QR_VERSION">
            <summary>
            Specifies the exact version of QR code to be encoded.
            (Type <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value).
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.GS1_FORMAT">
            <summary>
            Specifies whether the data should be encoded to the GS1 standard
            type: <see cref="T:System.Boolean" />, or "true" or "false"
            <see cref="T:System.String" /> value
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.QR_MASK_PATTERN">
            <summary>
             Specifies the QR code mask pattern to be used. Allowed values are
            0..QRCode.NUM_MASK_PATTERNS-1. By default the code will automatically select
            the optimal mask pattern.
            (Type <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value).
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.FORCE_CODE_SET">
            <summary>
            Forces which encoding will be used. Currently only used for Code-128 code sets (Type <see cref="T:System.String" />).
            Valid values are "A", "B", "C".
            see also CODE128_FORCE_CODESET_B
            This option and {@link #CODE128_COMPACT} are mutually exclusive.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.QR_COMPACT">
            <summary>
            Specifies whether to use compact mode for QR code (type <see cref="T:System.Boolean" />, or "true" or "false"
            Please note that when compaction is performed, the most compact character encoding is chosen
            for characters in the input that are not in the ISO-8859-1 character set. Based on experience,
            some scanners do not support encodings like cp-1256 (Arabic). In such cases the encoding can
            be forced to UTF-8 by means of the <see cref="F:ZXing.EncodeHintType.CHARACTER_SET" /> encoding hint.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.NO_PADDING">
            <summary>
            if set to true, barcode writer uses WIDTH and HEIGHT as maximum values and in combination with MARGIN=0
            there is no white border added. The resulting image would be smaller than the requested size.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.DATA_MATRIX_COMPACT">
            <summary>
            Specifies whether to use compact mode for Data Matrix (type {@link Boolean}, or "true" or "false"
            The compact encoding mode also supports the encoding of characters that are not in the ISO-8859-1
            character set via ECIs.
            Please note that in that case, the most compact character encoding is chosen for characters in
            the input that are not in the ISO-8859-1 character set. Based on experience, some scanners do not
            support encodings like cp-1256 (Arabic). In such cases the encoding can be forced to UTF-8 by
            means of the {@link #CHARACTER_SET} encoding hint.
            Compact encoding also provides GS1-FNC1 support when {@link #GS1_FORMAT} is selected. In this case
            group-separator character (ASCII 29 decimal) can be used to encode the positions of FNC1 codewords
            for the purpose of delimiting AIs.
            This option and {@link #FORCE_C40} are mutually exclusive.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.CODE128_COMPACT">
            <summary>
            Specifies whether to use compact mode for Code-128 code (type {@link Boolean}, or "true" or "false"
            This can yield slightly smaller bar codes. This option and {@link #FORCE_CODE_SET} are mutually
            exclusive options.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.FORCE_C40">
            <summary>
            Forces C40 encoding for data-matrix (type {@link Boolean}, or "true" or "false") {@link String } value). This 
            option and {@link #DATA_MATRIX_COMPACT} are mutually exclusive.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_AUTO_ECI">
            <summary>
            Specifies whether to automatically insert ECIs when encoding PDF417 (type {@link Boolean}, or "true" or "false"
            {@link String} value). 
            Please note that in that case, the most compact character encoding is chosen for characters in
            the input that are not in the ISO-8859-1 character set. Based on experience, some scanners do not
            support encodings like cp-1256 (Arabic). In such cases the encoding can be forced to UTF-8 by
            means of the {@link #CHARACTER_SET} encoding hint.
            </summary>
        </member>
        <member name="T:ZXing.FormatException">
            <summary>
            Thrown when a barcode was successfully detected, but some aspect of
            the content did not conform to the barcode's format rules. This could have
            been due to a mis-detection.
            <author>Sean Owen</author></summary>
        </member>
        <member name="M:ZXing.FormatException.#ctor">
            <summary />
        </member>
        <member name="M:ZXing.FormatException.#ctor(System.String)">
            <summary />
        </member>
        <member name="M:ZXing.FormatException.#ctor(System.Exception)">
            <summary />
        </member>
        <member name="M:ZXing.FormatException.#ctor(System.String,System.Exception)">
            <summary />
        </member>
        <member name="T:ZXing.ReaderException">
            <summary>
            The general exception class throw when something goes wrong during decoding of a barcode.
            This includes, but is not limited to, failing checksums / error correction algorithms, being
            unable to locate finder timing patterns, and so on.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.ReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException" /> class.
            </summary>
        </member>
        <member name="M:ZXing.ReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException" /> class.
            </summary>
            <param name="message" />
        </member>
        <member name="M:ZXing.ReaderException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ZXing.ReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="message" />
        </member>
        <member name="T:ZXing.WriterException">
            <summary>
            A base class which covers the range of exceptions which may occur when encoding a barcode using
            the Writer framework.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:ZXing.WriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.WriterException" /> class.
            </summary>
        </member>
        <member name="M:ZXing.WriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.WriterException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ZXing.WriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.WriterException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExc">The inner exc.</param>
        </member>
        <member name="T:ZXing.Aztec.AztecEncodingOptions">
            <summary>
            The class holds the available options for the <see cref="T:ZXing.Aztec.AztecWriter" /></summary>
        </member>
        <member name="P:ZXing.Aztec.AztecEncodingOptions.ErrorCorrection">
            <summary>
            Representing the minimal percentage of error correction words. 
            Note: an Aztec symbol should have a minimum of 25% EC words.
            </summary>
        </member>
        <member name="P:ZXing.Aztec.AztecEncodingOptions.Layers">
            <summary>
            Specifies the required number of layers for an Aztec code:
            a negative number (-1, -2, -3, -4) specifies a compact Aztec code
            0 indicates to use the minimum number of layers (the default)
            a positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code
            </summary>
        </member>
        <member name="P:ZXing.Aztec.AztecEncodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use where applicable (type <see cref="T:System.String" />)
            </summary>
        </member>
        <member name="T:ZXing.Common.DecodingOptions">
            <summary>
            Defines an container for encoder options
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.Hints">
            <summary>
            Gets the data container for all options
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.TryHarder">
            <summary>
            Gets or sets a flag which cause a deeper look into the bitmap
            </summary>
            <value>
                <c>true</c> if [try harder]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.TryInverted">
            <summary>
            Gets or sets a value indicating whether the image should be automatically inverted
            if no result is found in the original image.
            ATTENTION: Please be carefully because it slows down the decoding process if it is used
            </summary>
            <value>
                <c>true</c> if image should be inverted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.PureBarcode">
            <summary>
            Image is a pure monochrome image of a barcode.
            </summary>
            <value>
                <c>true</c> if monochrome image of a barcode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use when decoding, where applicable (type String)
            </summary>
            <value>
            The character set.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.PossibleFormats">
            <summary>
            Image is known to be of one of a few possible formats.
            Maps to a {@link java.util.List} of {@link BarcodeFormat}s.
            </summary>
            <value>
            The possible formats.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.UseCode39ExtendedMode">
            <summary>
            if Code39 could be detected try to use extended mode for full ASCII character set
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.UseCode39RelaxedExtendedMode">
            <summary>
            Don't fail if a Code39 is detected but can't be decoded in extended mode.
            Return the raw Code39 result instead. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AssumeCode39CheckDigit">
            <summary>
            Assume Code 39 codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
            <value>
                <c>true</c> if it should assume a Code 39 check digit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.ReturnCodabarStartEnd">
            <summary>
            If true, return the start and end digits in a Codabar barcode instead of stripping them. They
            are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them
            to not be. Doesn't matter what it maps to; use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AssumeGS1">
            <summary>
            Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed.
            For example this affects FNC1 handling for Code 128 (aka GS1-128).
            </summary>
            <value>
                <c>true</c> if it should assume GS1; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AssumeMSICheckDigit">
            <summary>
            Assume MSI codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
            <value>
                <c>true</c> if it should assume a MSI check digit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AllowedLengths">
            <summary>
            Allowed lengths of encoded data -- reject anything else. Maps to an int[].
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AllowedEANExtensions">
            <summary>
            Allowed extension lengths for EAN or UPC barcodes. Other formats will ignore this.
            Maps to an int[] of the allowed extension lengths, for example [2], [5], or [2, 5].
            If it is optional to have an extension, do not set this hint. If this is set,
            and a UPC or EAN barcode is found but an extension is not, then no result will be returned
            at all.
            </summary>
        </member>
        <member name="M:ZXing.Common.DecodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.DecodingOptions" /> class.
            </summary>
        </member>
        <member name="T:ZXing.Common.EncodingOptions">
            <summary>
            Defines an container for encoder options
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Hints">
            <summary>
            Gets the data container for all options
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Height">
            <summary>
            Specifies the height of the barcode image
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Width">
            <summary>
            Specifies the width of the barcode image
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.PureBarcode">
            <summary>
            Don't put the content string into the output image.
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Margin">
            <summary>
            Specifies margin, in pixels, to use when generating the barcode. The meaning can vary
            by format; for example it controls margin before and after the barcode horizontally for
            most 1D formats.
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.GS1Format">
            <summary>
            Specifies whether the data should be encoded to the GS1 standard;
            FNC1 character is added in front of the data
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.NoPadding">
            <summary>
            Don't add a white area around the generated barcode if the requested size is larger than then barcode.
            </summary>
        </member>
        <member name="M:ZXing.Common.EncodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.EncodingOptions" /> class.
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.SymbolShapeHint">
            <summary>
            Enumeration for DataMatrix symbol shape hint. It can be used to force square or rectangular
            symbols.   
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.SymbolShapeHint.FORCE_NONE">
            <summary>
            doesn't force anything
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.SymbolShapeHint.FORCE_SQUARE">
            <summary>
            forces square image
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.SymbolShapeHint.FORCE_RECTANGLE">
            <summary>
            forces rectangle image
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.DatamatrixEncodingOptions">
            <summary>
            The class holds the available options for the DatamatrixWriter
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.SymbolShape">
            <summary>
            Specifies the matrix shape for Data Matrix
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.MinSize">
            <summary>
            Specifies a minimum barcode size
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.MaxSize">
            <summary>
            Specifies a maximum barcode size
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.DefaultEncodation">
            <summary>
            Specifies the default encodation
            Make sure that the content fits into the encodation value, otherwise there will be an exception thrown.
            standard value: Encodation.ASCII
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.CompactEncoding">
            <summary>
            Specifies whether to use compact mode for Data Matrix (type {@link Boolean}, or "true" or "false"
            The compact encoding mode also supports the encoding of characters that are not in the ISO-8859-1
            character set via ECIs.
            Please note that in that case, the most compact character encoding is chosen for characters in
            the input that are not in the ISO-8859-1 character set. Based on experience, some scanners do not
            support encodings like cp-1256 (Arabic). In such cases the encoding can be forced to UTF-8 by
            means of the {@link #CHARACTER_SET} encoding hint.
            Compact encoding also provides GS1-FNC1 support when {@link #GS1_FORMAT} is selected. In this case
            group-separator character (ASCII 29 decimal) can be used to encode the positions of FNC1 codewords
            for the purpose of delimiting AIs.
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.ForceC40">
            <summary>
            Forces C40 encoding for data-matrix (type {@link Boolean}, or "true" or "false") {@link String } value). This 
            option and {@link #DATA_MATRIX_COMPACT} are mutually exclusive.
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use where applicable (type {@link String})
            </summary>
        </member>
        <member name="T:ZXing.OneD.Code128EncodingOptions">
            <summary>
            The class holds the available options for the Code128 1D Writer
            </summary>
        </member>
        <member name="P:ZXing.OneD.Code128EncodingOptions.ForceCodesetB">
            <summary>
            if true, don't switch to codeset C for numbers
            </summary>
        </member>
        <member name="P:ZXing.OneD.Code128EncodingOptions.ForceCodeset">
            <summary>
            Forces which encoding will be used. Currently only used for Code-128 code sets (Type <see cref="T:System.String" />). Valid values are "A", "B", "C".
            </summary>
        </member>
        <member name="P:ZXing.OneD.Code128EncodingOptions.CompactEncoding">
            <summary>
            Specifies whether to use compact mode for Code-128 code (type {@link Boolean}, or "true" or "false"
            This can yield slightly smaller bar codes. This option and {@link #FORCE_CODE_SET} are mutually
            exclusive options.
            </summary>
        </member>
        <member name="T:ZXing.OneD.Code128EncodingOptions.Codesets">
            <summary>
            avaiable codesets
            </summary>
        </member>
        <member name="F:ZXing.OneD.Code128EncodingOptions.Codesets.None">
            <summary>
            none specified
            </summary>
        </member>
        <member name="F:ZXing.OneD.Code128EncodingOptions.Codesets.A">
            <summary>
            Codeset A
            </summary>
        </member>
        <member name="F:ZXing.OneD.Code128EncodingOptions.Codesets.B">
            <summary>
            Codeset B
            </summary>
        </member>
        <member name="F:ZXing.OneD.Code128EncodingOptions.Codesets.C">
            <summary>
            Codeset C
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Compaction">
            <summary>
            Represents possible PDF417 barcode compaction types.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.AUTO">
            <summary />
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.TEXT">
            <summary />
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.BYTE">
            <summary />
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.NUMERIC">
            <summary />
        </member>
        <member name="T:ZXing.PDF417.Internal.Dimensions">
            <summary>
            Data object to specify the minimum and maximum number of rows and columns for a PDF417 barcode.
            @author qwandor@google.com (Andrew Walbran)
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Dimensions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.Dimensions" /> class.
            </summary>
            <param name="minCols">The min cols.</param>
            <param name="maxCols">The max cols.</param>
            <param name="minRows">The min rows.</param>
            <param name="maxRows">The max rows.</param>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MinCols">
            <summary>
            Gets the min cols.
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MaxCols">
            <summary>
            Gets the max cols.
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MinRows">
            <summary>
            Gets the min rows.
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MaxRows">
            <summary>
            Gets the max rows.
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417AspectRatio">
            <summary>
            defines the aspect ratio of the image
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417AspectRatio.A1">
            <summary>
            ratio 1
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417AspectRatio.A2">
            <summary>
            ratio 2
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417AspectRatio.A3">
            <summary>
            ratio 3
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417AspectRatio.A4">
            <summary>
            ratio 4
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417AspectRatio.AUTO">
            <summary>
            automatic selection
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel">
            <summary>
            defines the level of the error correction / count of error correction codewords
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L0">
            <summary>
            level 0
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L1">
            <summary>
            level 1
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L2">
            <summary>
            level 2
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L3">
            <summary>
            level 3
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L4">
            <summary>
            level 4
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L5">
            <summary>
            level 5
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L6">
            <summary>
            level 6
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L7">
            <summary>
            level 7
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.L8">
            <summary>
            level 8
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel.AUTO">
            <summary>
            automatic selection
            </summary>
        </member>
        <member name="T:ZXing.PDF417.PDF417EncodingOptions">
            <summary>
            The class holds the available options for the <see cref="T:ZXing.PDF417.PDF417Writer" /></summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.Compact">
            <summary>
            Specifies whether to use compact mode for PDF417 (type <see cref="T:System.Boolean" />).
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.Compaction">
            <summary>
            Specifies what compaction mode to use for PDF417 (type
            <see cref="P:ZXing.PDF417.PDF417EncodingOptions.Compaction" />).
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.Dimensions">
            <summary>
            Specifies the minimum and maximum number of rows and columns for PDF417 (type
            <see cref="P:ZXing.PDF417.PDF417EncodingOptions.Dimensions" />).
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.ErrorCorrection">
            <summary>
            Specifies what degree of error correction to use
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.AspectRatio">
            <summary>
            Specifies the aspect ratio of the smallest codeword.
            (Width of narrowest bar / Row Height)
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.ImageAspectRatio">
            <summary>
            Specifies the desired output image aspect ratio (Width / Height).
            The actual aspect ratio is calculated based on the necessary number of codewords.
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use where applicable (type {@link String})
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.DisableECI">
            <summary>
            Explicitly disables ECI segment when generating PDF417 Code
            That is against the specification but some
            readers have problems if the charset is switched from
            CP437 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use different encodings
            and the ECI segment is omitted.
            </summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.ErrorCorrectionLevel">
            <summary>
                <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels
            defined by the QR code standard.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.L">
            <summary> L = ~7% correction</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.M">
            <summary> M = ~15% correction</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.Q">
            <summary> Q = ~25% correction</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.H">
            <summary> H = ~30% correction</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.ErrorCorrectionLevel.Bits">
            <summary>
            Gets the bits.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.ErrorCorrectionLevel.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.ErrorCorrectionLevel.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ZXing.QrCode.QrCodeEncodingOptions">
            <summary>
            The class holds the available options for the QrCodeWriter
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.ErrorCorrection">
            <summary>
            Specifies what degree of error correction to use, for example in QR Codes.
            Type depends on the encoder. For example for QR codes it's type
            <see cref="T:ZXing.QrCode.Internal.ErrorCorrectionLevel" />.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use where applicable (type <see cref="T:System.String" />)
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.DisableECI">
            <summary>
            Explicitly disables ECI segment when generating QR Code
            That is against the specification of QR Code but some
            readers have problems if the charset is switched from
            ISO-8859-1 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use UTF-8 encoding
            and the ECI segment is omitted.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.QrVersion">
            <summary>
            Specifies the exact version of QR code to be encoded. An integer, range 1 to 40. If the data specified
            cannot fit within the required version, a WriterException will be thrown.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.QrCompact">
            <summary>
            Specifies whether to use compact mode for QR code (type <see cref="T:System.Boolean" />, or "true" or "false"
            Please note that when compaction is performed, the most compact character encoding is chosen
            for characters in the input that are not in the ISO-8859-1 character set. Based on experience,
            some scanners do not support encodings like cp-1256 (Arabic). In such cases the encoding can
            be forced to UTF-8 by means of the <see cref="P:ZXing.QrCode.QrCodeEncodingOptions.CharacterSet" /> encoding hint.
            </summary>
        </member>
    </members>
</doc>